{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/82813529", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/82813529/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/82813529/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.20.2", "id": 82813529, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4E76JZ", "tag_name": "v0.20.2", "target_commitish": "master", "name": "pytest-asyncio 0.20.2", "draft": false, "prerelease": false, "created_at": "2022-11-11T15:35:53Z", "published_at": "2022-11-11T15:58:21Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/84282610", "id": 84282610, "node_id": "RA_kwDOAgMU_M4FBgzy", "name": "pytest-asyncio-0.20.2.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 28904, "download_count": 0, "created_at": "2022-11-11T15:58:23Z", "updated_at": "2022-11-11T15:58:23Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.20.2/pytest-asyncio-0.20.2.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/84282609", "id": 84282609, "node_id": "RA_kwDOAgMU_M4FBgzx", "name": "pytest_asyncio-0.20.2-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 14649, "download_count": 0, "created_at": "2022-11-11T15:58:22Z", "updated_at": "2022-11-11T15:58:22Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.20.2/pytest_asyncio-0.20.2-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.20.2", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.20.2", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nPytest-asyncio provides two modes: *auto* and *strict* with *strict*\nmode being the default.\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nThis mode is used by default for the sake of project\ninter-compatibility.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates a new asyncio event loop based on the current event loop policy.\nThe new loop is available as the return value of this fixture or via\n[asyncio.get\\_running\\_loop](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop).\nThe event loop is closed when the fixture scope ends. The fixture scope\ndefaults to `function` scope.\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThe `event_loop` fixture can be overridden in any of the standard pytest\nlocations, e.g. directly in the test file, or in `conftest.py`. This\nallows redefining the fixture scope, for example:\n\n``` {.sourceCode .python}\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    policy = asyncio.get_event_loop_policy()\n    loop = policy.new_event_loop()\n    yield loop\n    loop.close()\n```\n\nIf you need to change the type of the event loop, prefer setting a\ncustom event loop policy over redefining the `event_loop` fixture.\n\nIf the `pytest.mark.asyncio` marker is applied to a test function, the\n`event_loop` fixture will be requested automatically by the test\nfunction.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* mode automatically converts async fixtures declared with the\nstandard `@pytest.fixture` decorator to *asyncio-driven* versions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unittest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n"}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/80610360", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/80610360/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/80610360/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.20.1", "id": 80610360, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4EzgQ4", "tag_name": "v0.20.1", "target_commitish": "master", "name": "pytest-asyncio 0.20.1", "draft": false, "prerelease": false, "created_at": "2022-10-21T13:04:08Z", "published_at": "2022-10-21T13:22:52Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/81803661", "id": 81803661, "node_id": "RA_kwDOAgMU_M4E4DmN", "name": "pytest-asyncio-0.20.1.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 28455, "download_count": 4, "created_at": "2022-10-21T13:22:53Z", "updated_at": "2022-10-21T13:22:53Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.20.1/pytest-asyncio-0.20.1.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/81803657", "id": 81803657, "node_id": "RA_kwDOAgMU_M4E4DmJ", "name": "pytest_asyncio-0.20.1-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 14397, "download_count": 0, "created_at": "2022-10-21T13:22:52Z", "updated_at": "2022-10-21T13:22:53Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.20.1/pytest_asyncio-0.20.1-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.20.1", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.20.1", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nPytest-asyncio provides two modes: *auto* and *strict* with *strict*\nmode being the default.\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nThis mode is used by default for the sake of project\ninter-compatibility.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates a new asyncio event loop based on the current event loop policy.\nThe new loop is available as the return value of this fixture or via\n[asyncio.get\\_running\\_loop](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop).\nThe event loop is closed when the fixture scope ends. The fixture scope\ndefaults to `function` scope.\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThe `event_loop` fixture can be overridden in any of the standard pytest\nlocations, e.g. directly in the test file, or in `conftest.py`. This\nallows redefining the fixture scope, for example:\n\n``` {.sourceCode .python}\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    policy = asyncio.get_event_loop_policy()\n    loop = policy.new_event_loop()\n    yield loop\n    loop.close()\n```\n\nIf you need to change the type of the event loop, prefer setting a\ncustom event loop policy over redefining the `event_loop` fixture.\n\nIf the `pytest.mark.asyncio` marker is applied to a test function, the\n`event_loop` fixture will be requested automatically by the test\nfunction.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* mode automatically converts async fixtures declared with the\nstandard `@pytest.fixture` decorator to *asyncio-driven* versions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unittest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n"}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/80577371", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/80577371/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/80577371/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.20.0", "id": 80577371, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4EzYNb", "tag_name": "v0.20.0", "target_commitish": "master", "name": "pytest-asyncio 0.20.0", "draft": false, "prerelease": false, "created_at": "2022-10-21T08:52:32Z", "published_at": "2022-10-21T09:11:08Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/81776903", "id": 81776903, "node_id": "RA_kwDOAgMU_M4E39EH", "name": "pytest-asyncio-0.20.0.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 28245, "download_count": 0, "created_at": "2022-10-21T09:11:10Z", "updated_at": "2022-10-21T09:11:10Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.20.0/pytest-asyncio-0.20.0.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/81776902", "id": 81776902, "node_id": "RA_kwDOAgMU_M4E39EG", "name": "pytest_asyncio-0.20.0-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 14401, "download_count": 1, "created_at": "2022-10-21T09:11:09Z", "updated_at": "2022-10-21T09:11:09Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.20.0/pytest_asyncio-0.20.0-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.20.0", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.20.0", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nPytest-asyncio provides two modes: *auto* and *strict* with *strict*\nmode being the default.\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nThis mode is used by default for the sake of project\ninter-compatibility.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates a new asyncio event loop based on the current event loop policy.\nThe new loop is available as the return value of this fixture or via\n[asyncio.get\\_running\\_loop](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop).\nThe event loop is closed when the fixture scope ends. The fixture scope\ndefaults to `function` scope.\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThe `event_loop` fixture can be overridden in any of the standard pytest\nlocations, e.g. directly in the test file, or in `conftest.py`. This\nallows redefining the fixture scope, for example:\n\n``` {.sourceCode .python}\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    policy = asyncio.get_event_loop_policy()\n    loop = policy.new_event_loop()\n    yield loop\n    loop.close()\n```\n\nIf you need to change the type of the event loop, prefer setting a\ncustom event loop policy over redefining the `event_loop` fixture.\n\nIf the `pytest.mark.asyncio` marker is applied to a test function, the\n`event_loop` fixture will be requested automatically by the test\nfunction.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* mode automatically converts async fixtures declared with the\nstandard `@pytest.fixture` decorator to *asyncio-driven* versions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unittest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/80577371/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/72068821", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/72068821/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/72068821/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.19.0", "id": 72068821, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4ES67V", "tag_name": "v0.19.0", "target_commitish": "master", "name": "pytest-asyncio 0.19.0", "draft": false, "prerelease": false, "created_at": "2022-07-15T08:01:39Z", "published_at": "2022-07-15T08:25:15Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/71652588", "id": 71652588, "node_id": "RA_kwDOAgMU_M4ERVTs", "name": "pytest-asyncio-0.19.0.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 28865, "download_count": 2, "created_at": "2022-07-15T08:25:16Z", "updated_at": "2022-07-15T08:25:17Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.19.0/pytest-asyncio-0.19.0.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/71652587", "id": 71652587, "node_id": "RA_kwDOAgMU_M4ERVTr", "name": "pytest_asyncio-0.19.0-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 14743, "download_count": 0, "created_at": "2022-07-15T08:25:16Z", "updated_at": "2022-07-15T08:25:16Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.19.0/pytest_asyncio-0.19.0-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.19.0", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.19.0", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy*. Starting from `pytest-asyncio>=0.19` the *strict*\nmode is the default.\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nThis mode is used by default for the sake of project\ninter-compatibility.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nDeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nThe default was changed to `strict` in `pytest-asyncio>=0.19`.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates a new asyncio event loop based on the current event loop policy.\nThe new loop is available as the return value of this fixture or via\n[asyncio.get\\_running\\_loop](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop).\nThe event loop is closed when the fixture scope ends. The fixture scope\ndefaults to `function` scope.\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThe `event_loop` fixture can be overridden in any of the standard pytest\nlocations, e.g. directly in the test file, or in `conftest.py`. This\nallows redefining the fixture scope, for example:\n\n``` {.sourceCode .python}\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    policy = asyncio.get_event_loop_policy()\n    loop = policy.new_event_loop()\n    yield loop\n    loop.close()\n```\n\nIf you need to change the type of the event loop, prefer setting a\ncustom event loop policy over redefining the `event_loop` fixture.\n\nIf the `pytest.mark.asyncio` marker is applied to a test function, the\n`event_loop` fixture will be requested automatically by the test\nfunction.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unittest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/72068821/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/62761622", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/62761622/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/62761622/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.18.3", "id": 62761622, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DvaqW", "tag_name": "v0.18.3", "target_commitish": "master", "name": "pytest-asyncio 0.18.3", "draft": false, "prerelease": false, "created_at": "2022-03-25T09:24:40Z", "published_at": "2022-03-25T09:44:00Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/60557179", "id": 60557179, "node_id": "RA_kwDOAgMU_M4DnAd7", "name": "pytest-asyncio-0.18.3.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 28052, "download_count": 5, "created_at": "2022-03-25T09:44:01Z", "updated_at": "2022-03-25T09:44:01Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.3/pytest-asyncio-0.18.3.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/60557178", "id": 60557178, "node_id": "RA_kwDOAgMU_M4DnAd6", "name": "pytest_asyncio-0.18.3-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 14597, "download_count": 5, "created_at": "2022-03-25T09:44:00Z", "updated_at": "2022-03-25T09:44:01Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.3/pytest_asyncio-0.18.3-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.18.3", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.18.3", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/62761622/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/60880505", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/60880505/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/60880505/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.18.2", "id": 60880505, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DoPZ5", "tag_name": "v0.18.2", "target_commitish": "master", "name": "pytest-asyncio 0.18.2", "draft": false, "prerelease": false, "created_at": "2022-03-03T11:35:02Z", "published_at": "2022-03-03T11:53:23Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/58437048", "id": 58437048, "node_id": "RA_kwDOAgMU_M4De624", "name": "pytest-asyncio-0.18.2.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 32091, "download_count": 3, "created_at": "2022-03-03T11:53:24Z", "updated_at": "2022-03-03T11:53:25Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.2/pytest-asyncio-0.18.2.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/58437047", "id": 58437047, "node_id": "RA_kwDOAgMU_M4De623", "name": "pytest_asyncio-0.18.2-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 16735, "download_count": 2, "created_at": "2022-03-03T11:53:24Z", "updated_at": "2022-03-03T11:53:24Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.2/pytest_asyncio-0.18.2-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.18.2", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.18.2", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.18.2 (22-03-03)\n-----------------\n\n-   Fix asyncio auto mode not marking static methods.\n    [\\#295](https://github.com/pytest-dev/pytest-asyncio/issues/295)\n-   Fix a compatibility issue with Hypothesis 6.39.0.\n    [\\#302](https://github.com/pytest-dev/pytest-asyncio/issues/302)\n\n0.18.1 (22-02-10)\n-----------------\n\n-   Fixes a regression that prevented async fixtures from working in\n    synchronous tests.\n    [\\#286](https://github.com/pytest-dev/pytest-asyncio/issues/286)\n\n0.18.0 (22-02-07)\n-----------------\n\n-   Raise a warning if \\@pytest.mark.asyncio is applied to non-async\n    function.\n    [\\#275](https://github.com/pytest-dev/pytest-asyncio/issues/275)\n-   Support parametrized `event_loop` fixture.\n    [\\#278](https://github.com/pytest-dev/pytest-asyncio/issues/278)\n\n0.17.2 (22-01-17)\n-----------------\n\n-   Require `typing-extensions` on Python\\<3.8 only.\n    [\\#269](https://github.com/pytest-dev/pytest-asyncio/issues/269)\n-   Fix a regression in tests collection introduced by 0.17.1, the\n    plugin works fine with non-python tests again.\n    [\\#267](https://github.com/pytest-dev/pytest-asyncio/issues/267)\n\n0.17.1 (22-01-16)\n-----------------\n\n-   Fixes a bug that prevents async Hypothesis tests from working\n    without explicit `asyncio` marker when `--asyncio-mode=auto` is set.\n    [\\#258](https://github.com/pytest-dev/pytest-asyncio/issues/258)\n-   Fixed a bug that closes the default event loop if the loop doesn\\'t\n    exist\n    [\\#257](https://github.com/pytest-dev/pytest-asyncio/issues/257)\n-   Added type annotations.\n    [\\#198](https://github.com/pytest-dev/pytest-asyncio/issues/198)\n-   Show asyncio mode in pytest report headers.\n    [\\#266](https://github.com/pytest-dev/pytest-asyncio/issues/266)\n-   Relax `asyncio_mode` type definition; it allows to support pytest\n    6.1+.\n    [\\#262](https://github.com/pytest-dev/pytest-asyncio/issues/262)\n\n0.17.0 (22-01-13)\n-----------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/60880505/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/59229326", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/59229326/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/59229326/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.18.1", "id": 59229326, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4Dh8SO", "tag_name": "v0.18.1", "target_commitish": "master", "name": "pytest-asyncio 0.18.1", "draft": false, "prerelease": false, "created_at": "2022-02-10T12:30:35Z", "published_at": "2022-02-10T13:01:48Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/56388383", "id": 56388383, "node_id": "RA_kwDOAgMU_M4DXGsf", "name": "pytest-asyncio-0.18.1.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 31904, "download_count": 1, "created_at": "2022-02-10T13:01:50Z", "updated_at": "2022-02-10T13:01:50Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.1/pytest-asyncio-0.18.1.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/56388380", "id": 56388380, "node_id": "RA_kwDOAgMU_M4DXGsc", "name": "pytest_asyncio-0.18.1-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 16635, "download_count": 2, "created_at": "2022-02-10T13:01:49Z", "updated_at": "2022-02-10T13:01:49Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.1/pytest_asyncio-0.18.1-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.18.1", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.18.1", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overridden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; please use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.18.1 (22-02-10)\n-----------------\n\n-   Fixes a regression that prevented async fixtures from working in\n    synchronous tests.\n    [\\#286](https://github.com/pytest-dev/pytest-asyncio/issues/286)\n\n0.18.0 (22-02-07)\n-----------------\n\n-   Raise a warning if \\@pytest.mark.asyncio is applied to non-async\n    function.\n    [\\#275](https://github.com/pytest-dev/pytest-asyncio/issues/275)\n-   Support parametrized `event_loop` fixture.\n    [\\#278](https://github.com/pytest-dev/pytest-asyncio/issues/278)\n\n0.17.2 (22-01-17)\n-----------------\n\n-   Require `typing-extensions` on Python\\<3.8 only.\n    [\\#269](https://github.com/pytest-dev/pytest-asyncio/issues/269)\n-   Fix a regression in tests collection introduced by 0.17.1, the\n    plugin works fine with non-python tests again.\n    [\\#267](https://github.com/pytest-dev/pytest-asyncio/issues/267)\n\n0.17.1 (22-01-16)\n-----------------\n\n-   Fixes a bug that prevents async Hypothesis tests from working\n    without explicit `asyncio` marker when `--asyncio-mode=auto` is set.\n    [\\#258](https://github.com/pytest-dev/pytest-asyncio/issues/258)\n-   Fixed a bug that closes the default event loop if the loop doesn\\'t\n    exist\n    [\\#257](https://github.com/pytest-dev/pytest-asyncio/issues/257)\n-   Added type annotations.\n    [\\#198](https://github.com/pytest-dev/pytest-asyncio/issues/198)\n-   Show asyncio mode in pytest report headers.\n    [\\#266](https://github.com/pytest-dev/pytest-asyncio/issues/266)\n-   Relax `asyncio_mode` type definition; it allows to support pytest\n    6.1+.\n    [\\#262](https://github.com/pytest-dev/pytest-asyncio/issues/262)\n\n0.17.0 (22-01-13)\n-----------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n"}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/58884178", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/58884178/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/58884178/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.18.0", "id": 58884178, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DgoBS", "tag_name": "v0.18.0", "target_commitish": "master", "name": "pytest-asyncio 0.18.0", "draft": false, "prerelease": false, "created_at": "2022-02-07T11:42:07Z", "published_at": "2022-02-07T11:59:46Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/56070362", "id": 56070362, "node_id": "RA_kwDOAgMU_M4DV5Da", "name": "pytest-asyncio-0.18.0.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 31725, "download_count": 2, "created_at": "2022-02-07T11:59:47Z", "updated_at": "2022-02-07T11:59:47Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.0/pytest-asyncio-0.18.0.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/56070361", "id": 56070361, "node_id": "RA_kwDOAgMU_M4DV5DZ", "name": "pytest_asyncio-0.18.0-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 16597, "download_count": 1, "created_at": "2022-02-07T11:59:47Z", "updated_at": "2022-02-07T11:59:47Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.18.0/pytest_asyncio-0.18.0-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.18.0", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.18.0", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overriden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; plase use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.18.0 (22-02-07)\n-----------------\n\n-   Raise a warning if \\@pytest.mark.asyncio is applied to non-async\n    function.\n    [\\#275](https://github.com/pytest-dev/pytest-asyncio/issues/275)\n-   Support parametrized `event_loop` fixture.\n    [\\#278](https://github.com/pytest-dev/pytest-asyncio/issues/278)\n\n0.17.2 (22-01-17)\n-----------------\n\n-   Require `typing-extensions` on Python\\<3.8 only.\n    [\\#269](https://github.com/pytest-dev/pytest-asyncio/issues/269)\n-   Fix a regression in tests collection introduced by 0.17.1, the\n    plugin works fine with non-python tests again.\n    [\\#267](https://github.com/pytest-dev/pytest-asyncio/issues/267)\n\n0.17.1 (22-01-16)\n-----------------\n\n-   Fixes a bug that prevents async Hypothesis tests from working\n    without explicit `asyncio` marker when `--asyncio-mode=auto` is set.\n    [\\#258](https://github.com/pytest-dev/pytest-asyncio/issues/258)\n-   Fixed a bug that closes the default event loop if the loop doesn\\'t\n    exist\n    [\\#257](https://github.com/pytest-dev/pytest-asyncio/issues/257)\n-   Added type annotations.\n    [\\#198](https://github.com/pytest-dev/pytest-asyncio/issues/198)\n-   Show asyncio mode in pytest report headers.\n    [\\#266](https://github.com/pytest-dev/pytest-asyncio/issues/266)\n-   Relax `asyncio_mode` type definition; it allows to support pytest\n    6.1+.\n    [\\#262](https://github.com/pytest-dev/pytest-asyncio/issues/262)\n\n0.17.0 (22-01-13)\n-----------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/58884178/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57301201", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57301201/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/57301201/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.17.2", "id": 57301201, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DaljR", "tag_name": "v0.17.2", "target_commitish": "master", "name": "pytest-asyncio 0.17.2", "draft": false, "prerelease": false, "created_at": "2022-01-17T15:18:19Z", "published_at": "2022-01-17T15:35:45Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/54197981", "id": 54197981, "node_id": "RA_kwDOAgMU_M4DOv7d", "name": "pytest-asyncio-0.17.2.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 31194, "download_count": 4, "created_at": "2022-01-17T15:35:47Z", "updated_at": "2022-01-17T15:35:48Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.2/pytest-asyncio-0.17.2.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/54197974", "id": 54197974, "node_id": "RA_kwDOAgMU_M4DOv7W", "name": "pytest_asyncio-0.17.2-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 16458, "download_count": 1, "created_at": "2022-01-17T15:35:46Z", "updated_at": "2022-01-17T15:35:47Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.2/pytest_asyncio-0.17.2-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.17.2", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.17.2", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overriden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; plase use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.17.2 (22-01-17)\n-----------------\n\n-   Require `typing-extensions` on Python\\<3.8 only.\n    [\\#269](https://github.com/pytest-dev/pytest-asyncio/issues/269)\n-   Fix a regression in tests collection introduced by 0.17.1, the\n    plugin works fine with non-python tests again.\n    [\\#267](https://github.com/pytest-dev/pytest-asyncio/issues/267)\n\n0.17.1 (22-01-16)\n-----------------\n\n-   Fixes a bug that prevents async Hypothesis tests from working\n    without explicit `asyncio` marker when `--asyncio-mode=auto` is set.\n    [\\#258](https://github.com/pytest-dev/pytest-asyncio/issues/258)\n-   Fixed a bug that closes the default event loop if the loop doesn\\'t\n    exist\n    [\\#257](https://github.com/pytest-dev/pytest-asyncio/issues/257)\n-   Added type annotations.\n    [\\#198](https://github.com/pytest-dev/pytest-asyncio/issues/198)\n-   Show asyncio mode in pytest report headers.\n    [\\#266](https://github.com/pytest-dev/pytest-asyncio/issues/266)\n-   Relax `asyncio_mode` type definition; it allows to support pytest\n    6.1+.\n    [\\#262](https://github.com/pytest-dev/pytest-asyncio/issues/262)\n\n0.17.0 (22-01-13)\n-----------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57301201/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57233454", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57233454/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/57233454/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.17.1", "id": 57233454, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DaVAu", "tag_name": "v0.17.1", "target_commitish": "master", "name": "pytest-asyncio 0.17.1", "draft": false, "prerelease": false, "created_at": "2022-01-16T20:52:37Z", "published_at": "2022-01-16T21:09:39Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/54137986", "id": 54137986, "node_id": "RA_kwDOAgMU_M4DOhSC", "name": "pytest-asyncio-0.17.1.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 30939, "download_count": 1, "created_at": "2022-01-16T21:09:40Z", "updated_at": "2022-01-16T21:09:41Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.1/pytest-asyncio-0.17.1.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/54137985", "id": 54137985, "node_id": "RA_kwDOAgMU_M4DOhSB", "name": "pytest_asyncio-0.17.1-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 16320, "download_count": 2, "created_at": "2022-01-16T21:09:40Z", "updated_at": "2022-01-16T21:09:40Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.1/pytest_asyncio-0.17.1-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.17.1", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.17.1", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overriden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; plase use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.17.1 (22-01-16)\n-----------------\n\n-   Fixes a bug that prevents async Hypothesis tests from working\n    without explicit `asyncio` marker when `--asyncio-mode=auto` is set.\n    [\\#258](https://github.com/pytest-dev/pytest-asyncio/issues/258)\n-   Fixed a bug that closes the default event loop if the loop doesn\\'t\n    exist\n    [\\#257](https://github.com/pytest-dev/pytest-asyncio/issues/257)\n-   Added type annotations.\n    [\\#198](https://github.com/pytest-dev/pytest-asyncio/issues/198)\n-   Show asyncio mode in pytest report headers.\n    [\\#266](https://github.com/pytest-dev/pytest-asyncio/issues/266)\n-   Relax `asyncio_mode` type definition; it allows to support pytest\n    6.1+.\n    [\\#262](https://github.com/pytest-dev/pytest-asyncio/issues/262)\n\n0.17.0 (22-01-13)\n-----------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n", "reactions": {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57233454/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57003849", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57003849/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/57003849/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.17.0", "id": 57003849, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DZc9J", "tag_name": "v0.17.0", "target_commitish": "master", "name": "pytest-asyncio 0.17.0", "draft": false, "prerelease": false, "created_at": "2022-01-13T10:50:56Z", "published_at": "2022-01-13T11:09:03Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/53870137", "id": 53870137, "node_id": "RA_kwDOAgMU_M4DNf45", "name": "pytest-asyncio-0.17.0.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 29321, "download_count": 4, "created_at": "2022-01-13T11:09:05Z", "updated_at": "2022-01-13T11:09:05Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.0/pytest-asyncio-0.17.0.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/53870136", "id": 53870136, "node_id": "RA_kwDOAgMU_M4DNf44", "name": "pytest_asyncio-0.17.0-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 15059, "download_count": 2, "created_at": "2022-01-13T11:09:04Z", "updated_at": "2022-01-13T11:09:04Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.0/pytest_asyncio-0.17.0-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.17.0", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.17.0", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overriden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; plase use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.17.0 (22-01-13)\n-----------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n"}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57002313", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/57002313/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/57002313/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.17.0a6", "id": 57002313, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DZclJ", "tag_name": "v0.17.0a6", "target_commitish": "master", "name": "pytest-asyncio 0.17.0a6", "draft": false, "prerelease": true, "created_at": "2022-01-13T10:28:58Z", "published_at": "2022-01-13T10:47:25Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/53868741", "id": 53868741, "node_id": "RA_kwDOAgMU_M4DNfjF", "name": "pytest-asyncio-0.17.0a6.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 29387, "download_count": 1, "created_at": "2022-01-13T10:47:27Z", "updated_at": "2022-01-13T10:47:27Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.0a6/pytest-asyncio-0.17.0a6.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/53868740", "id": 53868740, "node_id": "RA_kwDOAgMU_M4DNfjE", "name": "pytest_asyncio-0.17.0a6-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 15093, "download_count": 1, "created_at": "2022-01-13T10:47:26Z", "updated_at": "2022-01-13T10:47:26Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.0a6/pytest_asyncio-0.17.0a6-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.17.0a6", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.17.0a6", "body": "---\ntitle: 'pytest-asyncio: pytest support for asyncio'\n---\n\n[![image](https://img.shields.io/pypi/v/pytest-asyncio.svg)](https://pypi.python.org/pypi/pytest-asyncio)\n\n[![image](https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg)](https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI)\n\n[![image](https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest-asyncio)\n\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pytest-asyncio.svg)](https://github.com/pytest-dev/pytest-asyncio)\n\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\npytest-asyncio is an Apache2 licensed library, written in Python, for\ntesting asyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes\nit slightly more difficult to test using normal testing tools.\npytest-asyncio provides useful fixtures and markers to make testing\neasier.\n\n``` {.sourceCode .python}\n@pytest.mark.asyncio\nasync def test_some_asyncio_code():\n    res = await library.do_something()\n    assert b\"expected result\" == res\n```\n\npytest-asyncio has been strongly influenced by\n[pytest-tornado](https://github.com/eugeniy/pytest-tornado).\n\nFeatures\n========\n\n-   fixtures for creating and injecting versions of the asyncio event\n    loop\n-   fixtures for injecting unused tcp/udp ports\n-   pytest markers for treating tests as asyncio coroutines\n-   easy testing with non-default event loops\n-   support for [async def]{.title-ref} fixtures and async generator\n    fixtures\n-   support *auto* mode to handle all async fixtures and tests\n    automatically by asyncio; provide *strict* mode if a test suite\n    should work with different async frameworks simultaneously, e.g.\n    `asyncio` and `trio`.\n\nInstallation\n============\n\nTo install pytest-asyncio, simply:\n\n``` {.sourceCode .bash}\n$ pip install pytest-asyncio\n```\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n=====\n\nStarting from `pytest-asyncio>=0.17`, three modes are provided: *auto*,\n*strict* and *legacy* (default).\n\nThe mode can be set by `asyncio_mode` configuration option in\n[configuration\nfile](https://docs.pytest.org/en/latest/reference/customize.html):\n\n``` {.sourceCode .ini}\n# pytest.ini\n[pytest]\nasyncio_mode = auto\n```\n\nThe value can be overriden by command-line option for `pytest`\ninvocation:\n\n``` {.sourceCode .bash}\n$ pytest tests --asyncio-mode=strict\n```\n\nAuto mode\n---------\n\nWhen the mode is auto, all discovered *async* tests are considered\n*asyncio-driven* even if they have no `@pytest.mark.asyncio` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they\nare decorated with a regular `@pytest.fixture` decorator instead of\ndedicated `@pytest_asyncio.fixture` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by\n`pytest-asyncio` plugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test\nsuite should execute tests from different async frameworks, e.g.\n`asyncio` and `trio`. In this case, auto-handling can break tests\ndesigned for other framework; plase use *strict* mode instead.\n\nStrict mode\n-----------\n\nStrict mode enforces `@pytest.mark.asyncio` and\n`@pytest_asyncio.fixture` usage. Without these markers, tests and\nfixtures are not considered as *asyncio-driven*, other pytest plugin can\nhandle them.\n\nPlease use this mode if multiple async frameworks should be combined in\nthe same test suite.\n\nLegacy mode\n-----------\n\nThis mode follows rules used by `pytest-asyncio<0.17`: tests are not\nauto-marked but fixtures are.\n\nThis mode is used by default for the sake of backward compatibility,\ndeprecation warnings are emitted with suggestion to either switching to\n`auto` mode or using `strict` mode with `@pytest_asyncio.fixture`\ndecorators.\n\nIn future, the default will be changed.\n\nFixtures\n========\n\n`event_loop`\n------------\n\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the\ndefault fixture scope is `function`).\n\nNote that just using the `event_loop` fixture won\\'t make your test\nfunction a coroutine. You\\'ll need to interact with the event loop\ndirectly, using methods like `event_loop.run_until_complete`. See the\n`pytest.mark.asyncio` marker for treating test functions like\ncoroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in\nany way. Use `pytest.mark.asyncio` for this purpose.\n\n``` {.sourceCode .python}\ndef test_http_client(event_loop):\n    url = \"http://httpbin.org/get\"\n    resp = event_loop.run_until_complete(http_client(url))\n    assert b\"HTTP/1.1 200 OK\" in resp\n```\n\nThis fixture can be easily overridden in any of the standard pytest\nlocations (e.g. directly in the test file, or in `conftest.py`) to use a\nnon-default event loop. This will take effect even if you\\'re using the\n`pytest.mark.asyncio` marker and not the `event_loop` fixture directly.\n\n``` {.sourceCode .python}\n@pytest.fixture\ndef event_loop():\n    loop = MyCustomLoop()\n    yield loop\n    loop.close()\n```\n\nIf the `pytest.mark.asyncio` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop. Fixtures\ndepending on the `event_loop` fixture can expect the policy to be\nproperly modified when they run.\n\n`unused_tcp_port`\n-----------------\n\nFinds and yields a single unused TCP port on the localhost interface.\nUseful for binding temporary test servers.\n\n`unused_tcp_port_factory`\n-------------------------\n\nA callable which returns a different unused TCP port each invocation.\nUseful when several unused TCP ports are required in a test.\n\n``` {.sourceCode .python}\ndef a_test(unused_tcp_port_factory):\n    port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n    ...\n```\n\n`unused_udp_port` and `unused_udp_port_factory`\n-----------------------------------------------\n\nWork just like their TCP counterparts but return unused UDP ports.\n\nAsync fixtures\n--------------\n\nAsynchronous fixtures are defined just like ordinary pytest fixtures,\nexcept they should be decorated with `@pytest_asyncio.fixture`.\n\n``` {.sourceCode .python3}\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def async_gen_fixture():\n    await asyncio.sleep(0.1)\n    yield \"a value\"\n\n\n@pytest_asyncio.fixture(scope=\"module\")\nasync def async_fixture():\n    return await asyncio.sleep(0.1)\n```\n\nAll scopes are supported, but if you use a non-function scope you will\nneed to redefine the `event_loop` fixture to have the same or broader\nscope. Async fixtures need the event loop, and so must have the same or\nnarrower scope than the `event_loop` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared\nwith the standard `@pytest.fixture` decorator to *asyncio-driven*\nversions.\n\nMarkers\n=======\n\n`pytest.mark.asyncio`\n---------------------\n\nMark your test coroutine with this marker and pytest will execute it as\nan asyncio task using the event loop provided by the `event_loop`\nfixture. See the introductory section for an example.\n\nThe event loop used can be overridden by overriding the `event_loop`\nfixture (see above).\n\nIn order to make your test code a little more concise, the pytest\n`pytestmark`\\_ feature can be used to mark entire modules or classes\nwith this marker. Only test coroutines will be affected (by default,\ncoroutines prefixed by `test_`), so, for example, fixtures are safe to\ndefine.\n\n``` {.sourceCode .python}\nimport asyncio\n\nimport pytest\n\n# All test coroutines will be treated as marked.\npytestmark = pytest.mark.asyncio\n\n\nasync def test_example(event_loop):\n    \"\"\"No marker!\"\"\"\n    await asyncio.sleep(0, loop=event_loop)\n```\n\nIn *auto* mode, the `pytest.mark.asyncio` marker can be omitted, the\nmarker is added automatically to *async* test functions.\n\nNote about unittest\n===================\n\nTest classes subclassing the standard\n[unittest](https://docs.python.org/3/library/unittest.html) library are\nnot supported, users are recommended to use\n[unitest.IsolatedAsyncioTestCase](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase)\nor an async framework such as\n[asynctest](https://asynctest.readthedocs.io/en/latest).\n\nChangelog\n=========\n\n0.17.0 (UNRELEASED)\n-------------------\n\n-   [pytest-asyncio]{.title-ref} no longer alters existing event loop\n    policies.\n    [\\#168](https://github.com/pytest-dev/pytest-asyncio/issues/168),\n    [\\#188](https://github.com/pytest-dev/pytest-asyncio/issues/168)\n-   Drop support for Python 3.6\n-   Fixed an issue when pytest-asyncio was used in combination with\n    [flaky]{.title-ref} or inherited asynchronous Hypothesis tests.\n    [\\#178](https://github.com/pytest-dev/pytest-asyncio/issues/178)\n    [\\#231](https://github.com/pytest-dev/pytest-asyncio/issues/231)\n-   Added [flaky](https://pypi.org/project/flaky/) to test dependencies\n-   Added `unused_udp_port` and `unused_udp_port_factory` fixtures\n    (similar to `unused_tcp_port` and `unused_tcp_port_factory`\n    counterparts.\n    [\\#99](https://github.com/pytest-dev/pytest-asyncio/issues/99)\n-   Added the plugin modes: *strict*, *auto*, and *legacy*. See\n    [documentation](https://github.com/pytest-dev/pytest-asyncio#modes)\n    for details.\n    [\\#125](https://github.com/pytest-dev/pytest-asyncio/issues/125)\n-   Correctly process `KeyboardInterrupt` during async fixture setup\n    phase\n    [\\#219](https://github.com/pytest-dev/pytest-asyncio/issues/219)\n\n0.16.0 (2021-10-16)\n-------------------\n\n-   Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n-------------------\n\n-   Hotfix for errors while closing event loops while replacing them.\n    [\\#209](https://github.com/pytest-dev/pytest-asyncio/issues/209)\n    [\\#210](https://github.com/pytest-dev/pytest-asyncio/issues/210)\n\n0.15.0 (2021-04-19)\n-------------------\n\n-   Add support for Python 3.9\n-   Abandon support for Python 3.5. If you still require support for\n    Python 3.5, please use pytest-asyncio v0.14 or earlier.\n-   Set `unused_tcp_port_factory` fixture scope to \\'session\\'.\n    [\\#163](https://github.com/pytest-dev/pytest-asyncio/pull/163)\n-   Properly close event loops when replacing them.\n    [\\#208](https://github.com/pytest-dev/pytest-asyncio/issues/208)\n\n0.14.0 (2020-06-24)\n-------------------\n\n-   Fix\n    [\\#162](https://github.com/pytest-dev/pytest-asyncio/issues/162),\n    and `event_loop` fixture behavior now is coherent on all scopes.\n    [\\#164](https://github.com/pytest-dev/pytest-asyncio/pull/164)\n\n0.12.0 (2020-05-04)\n-------------------\n\n-   Run the event loop fixture as soon as possible. This helps with\n    fixtures that have an implicit dependency on the event loop.\n    [\\#156](https://github.com/pytest-dev/pytest-asyncio/pull/156)\n\n0.11.0 (2020-04-20)\n-------------------\n\n-   Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n    [\\#152](https://github.com/pytest-dev/pytest-asyncio/pull/152)\n-   Use the new Pytest 5.4.0 Function API. We therefore depend on\n    pytest \\>= 5.4.0.\n    [\\#142](https://github.com/pytest-dev/pytest-asyncio/pull/142)\n-   Better `pytest.skip` support.\n    [\\#126](https://github.com/pytest-dev/pytest-asyncio/pull/126)\n\n0.10.0 (2019-01-08)\n-------------------\n\n-   `pytest-asyncio` integrates with\n    [Hypothesis](https://hypothesis.readthedocs.io) to support `@given`\n    on async test functions using `asyncio`.\n    [\\#102](https://github.com/pytest-dev/pytest-asyncio/pull/102)\n-   Pytest 4.1 support.\n    [\\#105](https://github.com/pytest-dev/pytest-asyncio/pull/105)\n\n0.9.0 (2018-07-28)\n------------------\n\n-   Python 3.7 support.\n-   Remove `event_loop_process_pool` fixture and\n    `pytest.mark.asyncio_process_pool` marker (see\n    <https://bugs.python.org/issue34075> for deprecation and removal\n    details)\n\n0.8.0 (2017-09-23)\n------------------\n\n-   Improve integration with other packages (like aiohttp) with more\n    careful event loop handling.\n    [\\#64](https://github.com/pytest-dev/pytest-asyncio/pull/64)\n\n0.7.0 (2017-09-08)\n------------------\n\n-   Python versions pre-3.6 can use the async\\_generator library for\n    async fixtures. [\\#62\n    \\<https://github.com/pytest-dev/pytest-asyncio/pull/62\\>]{.title-ref}\n\n0.6.0 (2017-05-28)\n------------------\n\n-   Support for Python versions pre-3.5 has been dropped.\n-   `pytestmark` now works on both module and class level.\n-   The `forbid_global_loop` parameter has been removed.\n-   Support for async and async gen fixtures has been added.\n    [\\#45](https://github.com/pytest-dev/pytest-asyncio/pull/45)\n-   The deprecation warning regarding `asyncio.async()` has been fixed.\n    [\\#51](https://github.com/pytest-dev/pytest-asyncio/pull/51)\n\n0.5.0 (2016-09-07)\n------------------\n\n-   Introduced a changelog.\n    [\\#31](https://github.com/pytest-dev/pytest-asyncio/issues/31)\n-   The `event_loop` fixture is again responsible for closing itself.\n    This makes the fixture slightly harder to correctly override, but\n    enables other fixtures to depend on it correctly.\n    [\\#30](https://github.com/pytest-dev/pytest-asyncio/issues/30)\n-   Deal with the event loop policy by wrapping a special pytest hook,\n    `pytest_fixture_setup`. This allows setting the policy before\n    fixtures dependent on the `event_loop` fixture run, thus allowing\n    them to take advantage of the `forbid_global_loop` parameter. As a\n    consequence of this, we now depend on pytest 3.0.\n    [\\#29](https://github.com/pytest-dev/pytest-asyncio/issues/29)\n\n0.4.1 (2016-06-01)\n------------------\n\n-   Fix a bug preventing the propagation of exceptions from the plugin.\n    [\\#25](https://github.com/pytest-dev/pytest-asyncio/issues/25)\n\n0.4.0 (2016-05-30)\n------------------\n\n-   Make `event_loop` fixtures simpler to override by closing them in\n    the plugin, instead of directly in the fixture.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n-   Introduce the `forbid_global_loop` parameter.\n    [\\#21](https://github.com/pytest-dev/pytest-asyncio/pull/21)\n\n0.3.0 (2015-12-19)\n------------------\n\n-   Support for Python 3.5 `async`/`await` syntax.\n    [\\#17](https://github.com/pytest-dev/pytest-asyncio/pull/17)\n\n0.2.0 (2015-08-01)\n------------------\n\n-   `unused_tcp_port_factory` fixture.\n    [\\#10](https://github.com/pytest-dev/pytest-asyncio/issues/10)\n\n0.1.1 (2015-04-23)\n------------------\n\nInitial release.\n\nContributing\n============\n\nContributions are very welcome. Tests can be run with `tox`, please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n"}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/56998747", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/56998747/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/56998747/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.17.0a4", "id": 56998747, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DZbtb", "tag_name": "v0.17.0a4", "target_commitish": "master", "name": "pytest-asyncio 0.17.0a4", "draft": false, "prerelease": true, "created_at": "2022-01-13T09:41:24Z", "published_at": "2022-01-13T09:59:20Z", "assets": [{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/53864926", "id": 53864926, "node_id": "RA_kwDOAgMU_M4DNene", "name": "pytest-asyncio-0.17.0a4.tar.gz", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 29298, "download_count": 1, "created_at": "2022-01-13T09:59:21Z", "updated_at": "2022-01-13T09:59:22Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.0a4/pytest-asyncio-0.17.0a4.tar.gz"}, {"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/assets/53864925", "id": 53864925, "node_id": "RA_kwDOAgMU_M4DNend", "name": "pytest_asyncio-0.17.0a4-py3-none-any.whl", "label": "", "uploader": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "content_type": "raw", "state": "uploaded", "size": 15091, "download_count": 1, "created_at": "2022-01-13T09:59:21Z", "updated_at": "2022-01-13T09:59:21Z", "browser_download_url": "https://github.com/pytest-dev/pytest-asyncio/releases/download/v0.17.0a4/pytest_asyncio-0.17.0a4-py3-none-any.whl"}], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.17.0a4", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.17.0a4", "body": "pytest-asyncio: pytest support for asyncio\n==========================================\n\n.. image:: https://img.shields.io/pypi/v/pytest-asyncio.svg\n    :target: https://pypi.python.org/pypi/pytest-asyncio\n.. image:: https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg\n    :target: https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI\n.. image:: https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pytest-asyncio\n.. image:: https://img.shields.io/pypi/pyversions/pytest-asyncio.svg\n    :target: https://github.com/pytest-dev/pytest-asyncio\n    :alt: Supported Python versions\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\npytest-asyncio is an Apache2 licensed library, written in Python, for testing\nasyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes it\nslightly more difficult to test using normal testing tools. pytest-asyncio\nprovides useful fixtures and markers to make testing easier.\n\n.. code-block:: python\n\n    @pytest.mark.asyncio\n    async def test_some_asyncio_code():\n        res = await library.do_something()\n        assert b\"expected result\" == res\n\npytest-asyncio has been strongly influenced by pytest-tornado_.\n\n.. _pytest-tornado: https://github.com/eugeniy/pytest-tornado\n\nFeatures\n--------\n\n- fixtures for creating and injecting versions of the asyncio event loop\n- fixtures for injecting unused tcp/udp ports\n- pytest markers for treating tests as asyncio coroutines\n- easy testing with non-default event loops\n- support for `async def` fixtures and async generator fixtures\n- support *auto* mode to handle all async fixtures and tests automatically by asyncio;\n  provide *strict* mode if a test suite should work with different async frameworks\n  simultaneously, e.g. ``asyncio`` and ``trio``.\n\nInstallation\n------------\n\nTo install pytest-asyncio, simply:\n\n.. code-block:: bash\n\n    $ pip install pytest-asyncio\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n-----\n\nStarting from ``pytest-asyncio>=0.17``, three modes are provided: *auto*, *strict* and\n*legacy* (default).\n\nThe mode can be set by ``asyncio_mode`` configuration option in `configuration file\n<https://docs.pytest.org/en/latest/reference/customize.html>`_:\n\n.. code-block:: ini\n\n   # pytest.ini\n   [pytest]\n   asyncio_mode = auto\n\nThe value can be overriden by command-line option for ``pytest`` invocation:\n\n.. code-block:: bash\n\n   $ pytest tests --asyncio-mode=strict\n\nAuto mode\n~~~~~~~~~\n\nWhen the mode is auto, all discovered *async* tests are considered *asyncio-driven* even\nif they have no ``@pytest.mark.asyncio`` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they are decorated\nwith a regular ``@pytest.fixture`` decorator instead of dedicated\n``@pytest_asyncio.fixture`` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by ``pytest-asyncio``\nplugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test suite should\nexecute tests from different async frameworks, e.g. ``asyncio`` and ``trio``.  In this\ncase, auto-handling can break tests designed for other framework; plase use *strict*\nmode instead.\n\nStrict mode\n~~~~~~~~~~~\n\nStrict mode enforces ``@pytest.mark.asyncio`` and ``@pytest_asyncio.fixture`` usage.\nWithout these markers, tests and fixtures are not considered as *asyncio-driven*, other\npytest plugin can handle them.\n\nPlease use this mode if multiple async frameworks should be combined in the same test\nsuite.\n\n\nLegacy mode\n~~~~~~~~~~~\n\nThis mode follows rules used by ``pytest-asyncio<0.17``: tests are not auto-marked but\nfixtures are.\n\nThis mode is used by default for the sake of backward compatibility, deprecation\nwarnings are emitted with suggestion to either switching to ``auto`` mode or using\n``strict`` mode with ``@pytest_asyncio.fixture`` decorators.\n\nIn future, the default will be changed.\n\n\nFixtures\n--------\n\n``event_loop``\n~~~~~~~~~~~~~~\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the default\nfixture scope is ``function``).\n\nNote that just using the ``event_loop`` fixture won't make your test function\na coroutine. You'll need to interact with the event loop directly, using methods\nlike ``event_loop.run_until_complete``. See the ``pytest.mark.asyncio`` marker\nfor treating test functions like coroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in any way.\nUse ``pytest.mark.asyncio`` for this purpose.\n\n.. code-block:: python\n\n    def test_http_client(event_loop):\n        url = \"http://httpbin.org/get\"\n        resp = event_loop.run_until_complete(http_client(url))\n        assert b\"HTTP/1.1 200 OK\" in resp\n\nThis fixture can be easily overridden in any of the standard pytest locations\n(e.g. directly in the test file, or in ``conftest.py``) to use a non-default\nevent loop. This will take effect even if you're using the\n``pytest.mark.asyncio`` marker and not the ``event_loop`` fixture directly.\n\n.. code-block:: python\n\n    @pytest.fixture\n    def event_loop():\n        loop = MyCustomLoop()\n        yield loop\n        loop.close()\n\nIf the ``pytest.mark.asyncio`` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop.\nFixtures depending on the ``event_loop`` fixture can expect the policy to be properly modified when they run.\n\n``unused_tcp_port``\n~~~~~~~~~~~~~~~~~~~\nFinds and yields a single unused TCP port on the localhost interface. Useful for\nbinding temporary test servers.\n\n``unused_tcp_port_factory``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA callable which returns a different unused TCP port each invocation. Useful\nwhen several unused TCP ports are required in a test.\n\n.. code-block:: python\n\n    def a_test(unused_tcp_port_factory):\n        port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n        ...\n\n``unused_udp_port`` and ``unused_udp_port_factory``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWork just like their TCP counterparts but return unused UDP ports.\n\n\nAsync fixtures\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAsynchronous fixtures are defined just like ordinary pytest fixtures, except they should be decorated with ``@pytest_asyncio.fixture``.\n\n.. code-block:: python3\n\n    import pytest_asyncio\n\n\n    @pytest_asyncio.fixture\n    async def async_gen_fixture():\n        await asyncio.sleep(0.1)\n        yield \"a value\"\n\n\n    @pytest_asyncio.fixture(scope=\"module\")\n    async def async_fixture():\n        return await asyncio.sleep(0.1)\n\nAll scopes are supported, but if you use a non-function scope you will need\nto redefine the ``event_loop`` fixture to have the same or broader scope.\nAsync fixtures need the event loop, and so must have the same or narrower scope\nthan the ``event_loop`` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared with the\nstandard ``@pytest.fixture`` decorator to *asyncio-driven* versions.\n\n\nMarkers\n-------\n\n``pytest.mark.asyncio``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMark your test coroutine with this marker and pytest will execute it as an\nasyncio task using the event loop provided by the ``event_loop`` fixture. See\nthe introductory section for an example.\n\nThe event loop used can be overridden by overriding the ``event_loop`` fixture\n(see above).\n\nIn order to make your test code a little more concise, the pytest |pytestmark|_\nfeature can be used to mark entire modules or classes with this marker.\nOnly test coroutines will be affected (by default, coroutines prefixed by\n``test_``), so, for example, fixtures are safe to define.\n\n.. code-block:: python\n\n    import asyncio\n\n    import pytest\n\n    # All test coroutines will be treated as marked.\n    pytestmark = pytest.mark.asyncio\n\n\n    async def test_example(event_loop):\n        \"\"\"No marker!\"\"\"\n        await asyncio.sleep(0, loop=event_loop)\n\nIn *auto* mode, the ``pytest.mark.asyncio`` marker can be omitted, the marker is added\nautomatically to *async* test functions.\n\n\n.. |pytestmark| replace:: ``pytestmark``\n.. _pytestmark: http://doc.pytest.org/en/latest/example/markers.html#marking-whole-classes-or-modules\n\nNote about unittest\n-------------------\n\nTest classes subclassing the standard `unittest <https://docs.python.org/3/library/unittest.html>`__ library are not supported, users\nare recommended to use `unitest.IsolatedAsyncioTestCase <https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase>`__\nor an async framework such as `asynctest <https://asynctest.readthedocs.io/en/latest>`__.\n\nChangelog\n---------\n0.17.0 (UNRELEASED)\n~~~~~~~~~~~~~~~~~~~\n- `pytest-asyncio` no longer alters existing event loop policies. `#168 <https://github.com/pytest-dev/pytest-asyncio/issues/168>`_, `#188 <https://github.com/pytest-dev/pytest-asyncio/issues/168>`_\n- Drop support for Python 3.6\n- Fixed an issue when pytest-asyncio was used in combination with `flaky` or inherited asynchronous Hypothesis tests. `#178 <https://github.com/pytest-dev/pytest-asyncio/issues/178>`_ `#231 <https://github.com/pytest-dev/pytest-asyncio/issues/231>`_\n- Added `flaky <https://pypi.org/project/flaky/>`_ to test dependencies\n- Added ``unused_udp_port`` and ``unused_udp_port_factory`` fixtures (similar to ``unused_tcp_port`` and ``unused_tcp_port_factory`` counterparts. `#99 <https://github.com/pytest-dev/pytest-asyncio/issues/99>`_\n- Added the plugin modes: *strict*, *auto*, and *legacy*. See `documentation <https://github.com/pytest-dev/pytest-asyncio#modes>`_ for details. `#125 <https://github.com/pytest-dev/pytest-asyncio/issues/125>`_\n- Correctly process ``KeyboardInterrupt`` during async fixture setup phase `#219 <https://github.com/pytest-dev/pytest-asyncio/issues/219>`_\n\n0.16.0 (2021-10-16)\n~~~~~~~~~~~~~~~~~~~\n- Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n~~~~~~~~~~~~~~~~~~~\n- Hotfix for errors while closing event loops while replacing them.\n  `#209 <https://github.com/pytest-dev/pytest-asyncio/issues/209>`_\n  `#210 <https://github.com/pytest-dev/pytest-asyncio/issues/210>`_\n\n0.15.0 (2021-04-19)\n~~~~~~~~~~~~~~~~~~~\n- Add support for Python 3.9\n- Abandon support for Python 3.5. If you still require support for Python 3.5, please use pytest-asyncio v0.14 or earlier.\n- Set ``unused_tcp_port_factory`` fixture scope to 'session'.\n  `#163 <https://github.com/pytest-dev/pytest-asyncio/pull/163>`_\n- Properly close event loops when replacing them.\n  `#208 <https://github.com/pytest-dev/pytest-asyncio/issues/208>`_\n\n0.14.0 (2020-06-24)\n~~~~~~~~~~~~~~~~~~~\n- Fix `#162 <https://github.com/pytest-dev/pytest-asyncio/issues/162>`_, and ``event_loop`` fixture behavior now is coherent on all scopes.\n  `#164 <https://github.com/pytest-dev/pytest-asyncio/pull/164>`_\n\n0.12.0 (2020-05-04)\n~~~~~~~~~~~~~~~~~~~\n- Run the event loop fixture as soon as possible. This helps with fixtures that have an implicit dependency on the event loop.\n  `#156 <https://github.com/pytest-dev/pytest-asyncio/pull/156>`_\n\n0.11.0 (2020-04-20)\n~~~~~~~~~~~~~~~~~~~\n- Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n  `#152 <https://github.com/pytest-dev/pytest-asyncio/pull/152>`_\n- Use the new Pytest 5.4.0 Function API. We therefore depend on pytest >= 5.4.0.\n  `#142 <https://github.com/pytest-dev/pytest-asyncio/pull/142>`_\n- Better ``pytest.skip`` support.\n  `#126 <https://github.com/pytest-dev/pytest-asyncio/pull/126>`_\n\n0.10.0 (2019-01-08)\n~~~~~~~~~~~~~~~~~~~~\n- ``pytest-asyncio`` integrates with `Hypothesis <https://hypothesis.readthedocs.io>`_\n  to support ``@given`` on async test functions using ``asyncio``.\n  `#102 <https://github.com/pytest-dev/pytest-asyncio/pull/102>`_\n- Pytest 4.1 support.\n  `#105 <https://github.com/pytest-dev/pytest-asyncio/pull/105>`_\n\n0.9.0 (2018-07-28)\n~~~~~~~~~~~~~~~~~~\n- Python 3.7 support.\n- Remove ``event_loop_process_pool`` fixture and\n  ``pytest.mark.asyncio_process_pool`` marker (see\n  https://bugs.python.org/issue34075 for deprecation and removal details)\n\n0.8.0 (2017-09-23)\n~~~~~~~~~~~~~~~~~~\n- Improve integration with other packages (like aiohttp) with more careful event loop handling.\n  `#64 <https://github.com/pytest-dev/pytest-asyncio/pull/64>`_\n\n0.7.0 (2017-09-08)\n~~~~~~~~~~~~~~~~~~\n- Python versions pre-3.6 can use the async_generator library for async fixtures.\n  `#62 <https://github.com/pytest-dev/pytest-asyncio/pull/62>`\n\n\n0.6.0 (2017-05-28)\n~~~~~~~~~~~~~~~~~~\n- Support for Python versions pre-3.5 has been dropped.\n- ``pytestmark`` now works on both module and class level.\n- The ``forbid_global_loop`` parameter has been removed.\n- Support for async and async gen fixtures has been added.\n  `#45 <https://github.com/pytest-dev/pytest-asyncio/pull/45>`_\n- The deprecation warning regarding ``asyncio.async()`` has been fixed.\n  `#51 <https://github.com/pytest-dev/pytest-asyncio/pull/51>`_\n\n0.5.0 (2016-09-07)\n~~~~~~~~~~~~~~~~~~\n- Introduced a changelog.\n  `#31 <https://github.com/pytest-dev/pytest-asyncio/issues/31>`_\n- The ``event_loop`` fixture is again responsible for closing itself.\n  This makes the fixture slightly harder to correctly override, but enables\n  other fixtures to depend on it correctly.\n  `#30 <https://github.com/pytest-dev/pytest-asyncio/issues/30>`_\n- Deal with the event loop policy by wrapping a special pytest hook,\n  ``pytest_fixture_setup``. This allows setting the policy before fixtures\n  dependent on the ``event_loop`` fixture run, thus allowing them to take\n  advantage of the ``forbid_global_loop`` parameter. As a consequence of this,\n  we now depend on pytest 3.0.\n  `#29 <https://github.com/pytest-dev/pytest-asyncio/issues/29>`_\n\n\n0.4.1 (2016-06-01)\n~~~~~~~~~~~~~~~~~~\n- Fix a bug preventing the propagation of exceptions from the plugin.\n  `#25 <https://github.com/pytest-dev/pytest-asyncio/issues/25>`_\n\n0.4.0 (2016-05-30)\n~~~~~~~~~~~~~~~~~~\n- Make ``event_loop`` fixtures simpler to override by closing them in the\n  plugin, instead of directly in the fixture.\n  `#21 <https://github.com/pytest-dev/pytest-asyncio/pull/21>`_\n- Introduce the ``forbid_global_loop`` parameter.\n  `#21 <https://github.com/pytest-dev/pytest-asyncio/pull/21>`_\n\n0.3.0 (2015-12-19)\n~~~~~~~~~~~~~~~~~~\n- Support for Python 3.5 ``async``/``await`` syntax.\n  `#17 <https://github.com/pytest-dev/pytest-asyncio/pull/17>`_\n\n0.2.0 (2015-08-01)\n~~~~~~~~~~~~~~~~~~\n- ``unused_tcp_port_factory`` fixture.\n  `#10 <https://github.com/pytest-dev/pytest-asyncio/issues/10>`_\n\n\n0.1.1 (2015-04-23)\n~~~~~~~~~~~~~~~~~~\nInitial release.\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with ``tox``, please ensure\nthe coverage at least stays the same before you submit a pull request.\n"}
{"url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/56996904", "assets_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/releases/56996904/assets", "upload_url": "https://uploads.github.com/repos/pytest-dev/pytest-asyncio/releases/56996904/assets{?name,label}", "html_url": "https://github.com/pytest-dev/pytest-asyncio/releases/tag/v0.17.0a3", "id": 56996904, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAgMU_M4DZbQo", "tag_name": "v0.17.0a3", "target_commitish": "master", "name": "pytest-asyncio 0.17.0a3", "draft": false, "prerelease": true, "created_at": "2022-01-13T09:20:08Z", "published_at": "2022-01-13T09:37:52Z", "assets": [], "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/tarball/v0.17.0a3", "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-asyncio/zipball/v0.17.0a3", "body": "pytest-asyncio: pytest support for asyncio\n==========================================\n\n.. image:: https://img.shields.io/pypi/v/pytest-asyncio.svg\n    :target: https://pypi.python.org/pypi/pytest-asyncio\n.. image:: https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg\n    :target: https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI\n.. image:: https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pytest-asyncio\n.. image:: https://img.shields.io/pypi/pyversions/pytest-asyncio.svg\n    :target: https://github.com/pytest-dev/pytest-asyncio\n    :alt: Supported Python versions\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\npytest-asyncio is an Apache2 licensed library, written in Python, for testing\nasyncio code with pytest.\n\nasyncio code is usually written in the form of coroutines, which makes it\nslightly more difficult to test using normal testing tools. pytest-asyncio\nprovides useful fixtures and markers to make testing easier.\n\n.. code-block:: python\n\n    @pytest.mark.asyncio\n    async def test_some_asyncio_code():\n        res = await library.do_something()\n        assert b\"expected result\" == res\n\npytest-asyncio has been strongly influenced by pytest-tornado_.\n\n.. _pytest-tornado: https://github.com/eugeniy/pytest-tornado\n\nFeatures\n--------\n\n- fixtures for creating and injecting versions of the asyncio event loop\n- fixtures for injecting unused tcp/udp ports\n- pytest markers for treating tests as asyncio coroutines\n- easy testing with non-default event loops\n- support for `async def` fixtures and async generator fixtures\n- support *auto* mode to handle all async fixtures and tests automatically by asyncio;\n  provide *strict* mode if a test suite should work with different async frameworks\n  simultaneously, e.g. ``asyncio`` and ``trio``.\n\nInstallation\n------------\n\nTo install pytest-asyncio, simply:\n\n.. code-block:: bash\n\n    $ pip install pytest-asyncio\n\nThis is enough for pytest to pick up pytest-asyncio.\n\nModes\n-----\n\nStarting from ``pytest-asyncio>=0.17``, three modes are provided: *auto*, *strict* and\n*legacy* (default).\n\nThe mode can be set by ``asyncio_mode`` configuration option in `configuration file\n<https://docs.pytest.org/en/latest/reference/customize.html>`_:\n\n.. code-block:: ini\n\n   # pytest.ini\n   [pytest]\n   asyncio_mode = auto\n\nThe value can be overriden by command-line option for ``pytest`` invocation:\n\n.. code-block:: bash\n\n   $ pytest tests --asyncio-mode=strict\n\nAuto mode\n~~~~~~~~~\n\nWhen the mode is auto, all discovered *async* tests are considered *asyncio-driven* even\nif they have no ``@pytest.mark.asyncio`` marker.\n\nAll async fixtures are considered *asyncio-driven* as well, even if they are decorated\nwith a regular ``@pytest.fixture`` decorator instead of dedicated\n``@pytest_asyncio.fixture`` counterpart.\n\n*asyncio-driven* means that tests and fixtures are executed by ``pytest-asyncio``\nplugin.\n\nThis mode requires the simplest tests and fixtures configuration and is\nrecommended for default usage *unless* the same project and its test suite should\nexecute tests from different async frameworks, e.g. ``asyncio`` and ``trio``.  In this\ncase, auto-handling can break tests designed for other framework; plase use *strict*\nmode instead.\n\nStrict mode\n~~~~~~~~~~~\n\nStrict mode enforces ``@pytest.mark.asyncio`` and ``@pytest_asyncio.fixture`` usage.\nWithout these markers, tests and fixtures are not considered as *asyncio-driven*, other\npytest plugin can handle them.\n\nPlease use this mode if multiple async frameworks should be combined in the same test\nsuite.\n\n\nLegacy mode\n~~~~~~~~~~~\n\nThis mode follows rules used by ``pytest-asyncio<0.17``: tests are not auto-marked but\nfixtures are.\n\nThis mode is used by default for the sake of backward compatibility, deprecation\nwarnings are emitted with suggestion to either switching to ``auto`` mode or using\n``strict`` mode with ``@pytest_asyncio.fixture`` decorators.\n\nIn future, the default will be changed.\n\n\nFixtures\n--------\n\n``event_loop``\n~~~~~~~~~~~~~~\nCreates and injects a new instance of the default asyncio event loop. By\ndefault, the loop will be closed at the end of the test (i.e. the default\nfixture scope is ``function``).\n\nNote that just using the ``event_loop`` fixture won't make your test function\na coroutine. You'll need to interact with the event loop directly, using methods\nlike ``event_loop.run_until_complete``. See the ``pytest.mark.asyncio`` marker\nfor treating test functions like coroutines.\n\nSimply using this fixture will not set the generated event loop as the\ndefault asyncio event loop, or change the asyncio event loop policy in any way.\nUse ``pytest.mark.asyncio`` for this purpose.\n\n.. code-block:: python\n\n    def test_http_client(event_loop):\n        url = \"http://httpbin.org/get\"\n        resp = event_loop.run_until_complete(http_client(url))\n        assert b\"HTTP/1.1 200 OK\" in resp\n\nThis fixture can be easily overridden in any of the standard pytest locations\n(e.g. directly in the test file, or in ``conftest.py``) to use a non-default\nevent loop. This will take effect even if you're using the\n``pytest.mark.asyncio`` marker and not the ``event_loop`` fixture directly.\n\n.. code-block:: python\n\n    @pytest.fixture\n    def event_loop():\n        loop = MyCustomLoop()\n        yield loop\n        loop.close()\n\nIf the ``pytest.mark.asyncio`` marker is applied, a pytest hook will\nensure the produced loop is set as the default global loop.\nFixtures depending on the ``event_loop`` fixture can expect the policy to be properly modified when they run.\n\n``unused_tcp_port``\n~~~~~~~~~~~~~~~~~~~\nFinds and yields a single unused TCP port on the localhost interface. Useful for\nbinding temporary test servers.\n\n``unused_tcp_port_factory``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA callable which returns a different unused TCP port each invocation. Useful\nwhen several unused TCP ports are required in a test.\n\n.. code-block:: python\n\n    def a_test(unused_tcp_port_factory):\n        port1, port2 = unused_tcp_port_factory(), unused_tcp_port_factory()\n        ...\n\n``unused_udp_port`` and ``unused_udp_port_factory``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWork just like their TCP counterparts but return unused UDP ports.\n\n\nAsync fixtures\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nAsynchronous fixtures are defined just like ordinary pytest fixtures, except they should be decorated with ``@pytest_asyncio.fixture``.\n\n.. code-block:: python3\n\n    import pytest_asyncio\n\n\n    @pytest_asyncio.fixture\n    async def async_gen_fixture():\n        await asyncio.sleep(0.1)\n        yield \"a value\"\n\n\n    @pytest_asyncio.fixture(scope=\"module\")\n    async def async_fixture():\n        return await asyncio.sleep(0.1)\n\nAll scopes are supported, but if you use a non-function scope you will need\nto redefine the ``event_loop`` fixture to have the same or broader scope.\nAsync fixtures need the event loop, and so must have the same or narrower scope\nthan the ``event_loop`` fixture.\n\n*auto* and *legacy* mode automatically converts async fixtures declared with the\nstandard ``@pytest.fixture`` decorator to *asyncio-driven* versions.\n\n\nMarkers\n-------\n\n``pytest.mark.asyncio``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nMark your test coroutine with this marker and pytest will execute it as an\nasyncio task using the event loop provided by the ``event_loop`` fixture. See\nthe introductory section for an example.\n\nThe event loop used can be overridden by overriding the ``event_loop`` fixture\n(see above).\n\nIn order to make your test code a little more concise, the pytest |pytestmark|_\nfeature can be used to mark entire modules or classes with this marker.\nOnly test coroutines will be affected (by default, coroutines prefixed by\n``test_``), so, for example, fixtures are safe to define.\n\n.. code-block:: python\n\n    import asyncio\n\n    import pytest\n\n    # All test coroutines will be treated as marked.\n    pytestmark = pytest.mark.asyncio\n\n\n    async def test_example(event_loop):\n        \"\"\"No marker!\"\"\"\n        await asyncio.sleep(0, loop=event_loop)\n\nIn *auto* mode, the ``pytest.mark.asyncio`` marker can be omitted, the marker is added\nautomatically to *async* test functions.\n\n\n.. |pytestmark| replace:: ``pytestmark``\n.. _pytestmark: http://doc.pytest.org/en/latest/example/markers.html#marking-whole-classes-or-modules\n\nNote about unittest\n-------------------\n\nTest classes subclassing the standard `unittest <https://docs.python.org/3/library/unittest.html>`__ library are not supported, users\nare recommended to use `unitest.IsolatedAsyncioTestCase <https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase>`__\nor an async framework such as `asynctest <https://asynctest.readthedocs.io/en/latest>`__.\n\nChangelog\n---------\n0.17.0 (UNRELEASED)\n~~~~~~~~~~~~~~~~~~~\n- `pytest-asyncio` no longer alters existing event loop policies. `#168 <https://github.com/pytest-dev/pytest-asyncio/issues/168>`_, `#188 <https://github.com/pytest-dev/pytest-asyncio/issues/168>`_\n- Drop support for Python 3.6\n- Fixed an issue when pytest-asyncio was used in combination with `flaky` or inherited asynchronous Hypothesis tests. `#178 <https://github.com/pytest-dev/pytest-asyncio/issues/178>`_ `#231 <https://github.com/pytest-dev/pytest-asyncio/issues/231>`_\n- Added `flaky <https://pypi.org/project/flaky/>`_ to test dependencies\n- Added ``unused_udp_port`` and ``unused_udp_port_factory`` fixtures (similar to ``unused_tcp_port`` and ``unused_tcp_port_factory`` counterparts. `#99 <https://github.com/pytest-dev/pytest-asyncio/issues/99>`_\n- Added the plugin modes: *strict*, *auto*, and *legacy*. See `documentation <https://github.com/pytest-dev/pytest-asyncio#modes>`_ for details. `#125 <https://github.com/pytest-dev/pytest-asyncio/issues/125>`_\n- Correctly process ``KeyboardInterrupt`` during async fixture setup phase `#219 <https://github.com/pytest-dev/pytest-asyncio/issues/219>`_\n\n0.16.0 (2021-10-16)\n~~~~~~~~~~~~~~~~~~~\n- Add support for Python 3.10\n\n0.15.1 (2021-04-22)\n~~~~~~~~~~~~~~~~~~~\n- Hotfix for errors while closing event loops while replacing them.\n  `#209 <https://github.com/pytest-dev/pytest-asyncio/issues/209>`_\n  `#210 <https://github.com/pytest-dev/pytest-asyncio/issues/210>`_\n\n0.15.0 (2021-04-19)\n~~~~~~~~~~~~~~~~~~~\n- Add support for Python 3.9\n- Abandon support for Python 3.5. If you still require support for Python 3.5, please use pytest-asyncio v0.14 or earlier.\n- Set ``unused_tcp_port_factory`` fixture scope to 'session'.\n  `#163 <https://github.com/pytest-dev/pytest-asyncio/pull/163>`_\n- Properly close event loops when replacing them.\n  `#208 <https://github.com/pytest-dev/pytest-asyncio/issues/208>`_\n\n0.14.0 (2020-06-24)\n~~~~~~~~~~~~~~~~~~~\n- Fix `#162 <https://github.com/pytest-dev/pytest-asyncio/issues/162>`_, and ``event_loop`` fixture behavior now is coherent on all scopes.\n  `#164 <https://github.com/pytest-dev/pytest-asyncio/pull/164>`_\n\n0.12.0 (2020-05-04)\n~~~~~~~~~~~~~~~~~~~\n- Run the event loop fixture as soon as possible. This helps with fixtures that have an implicit dependency on the event loop.\n  `#156 <https://github.com/pytest-dev/pytest-asyncio/pull/156>`_\n\n0.11.0 (2020-04-20)\n~~~~~~~~~~~~~~~~~~~\n- Test on 3.8, drop 3.3 and 3.4. Stick to 0.10 for these versions.\n  `#152 <https://github.com/pytest-dev/pytest-asyncio/pull/152>`_\n- Use the new Pytest 5.4.0 Function API. We therefore depend on pytest >= 5.4.0.\n  `#142 <https://github.com/pytest-dev/pytest-asyncio/pull/142>`_\n- Better ``pytest.skip`` support.\n  `#126 <https://github.com/pytest-dev/pytest-asyncio/pull/126>`_\n\n0.10.0 (2019-01-08)\n~~~~~~~~~~~~~~~~~~~~\n- ``pytest-asyncio`` integrates with `Hypothesis <https://hypothesis.readthedocs.io>`_\n  to support ``@given`` on async test functions using ``asyncio``.\n  `#102 <https://github.com/pytest-dev/pytest-asyncio/pull/102>`_\n- Pytest 4.1 support.\n  `#105 <https://github.com/pytest-dev/pytest-asyncio/pull/105>`_\n\n0.9.0 (2018-07-28)\n~~~~~~~~~~~~~~~~~~\n- Python 3.7 support.\n- Remove ``event_loop_process_pool`` fixture and\n  ``pytest.mark.asyncio_process_pool`` marker (see\n  https://bugs.python.org/issue34075 for deprecation and removal details)\n\n0.8.0 (2017-09-23)\n~~~~~~~~~~~~~~~~~~\n- Improve integration with other packages (like aiohttp) with more careful event loop handling.\n  `#64 <https://github.com/pytest-dev/pytest-asyncio/pull/64>`_\n\n0.7.0 (2017-09-08)\n~~~~~~~~~~~~~~~~~~\n- Python versions pre-3.6 can use the async_generator library for async fixtures.\n  `#62 <https://github.com/pytest-dev/pytest-asyncio/pull/62>`\n\n\n0.6.0 (2017-05-28)\n~~~~~~~~~~~~~~~~~~\n- Support for Python versions pre-3.5 has been dropped.\n- ``pytestmark`` now works on both module and class level.\n- The ``forbid_global_loop`` parameter has been removed.\n- Support for async and async gen fixtures has been added.\n  `#45 <https://github.com/pytest-dev/pytest-asyncio/pull/45>`_\n- The deprecation warning regarding ``asyncio.async()`` has been fixed.\n  `#51 <https://github.com/pytest-dev/pytest-asyncio/pull/51>`_\n\n0.5.0 (2016-09-07)\n~~~~~~~~~~~~~~~~~~\n- Introduced a changelog.\n  `#31 <https://github.com/pytest-dev/pytest-asyncio/issues/31>`_\n- The ``event_loop`` fixture is again responsible for closing itself.\n  This makes the fixture slightly harder to correctly override, but enables\n  other fixtures to depend on it correctly.\n  `#30 <https://github.com/pytest-dev/pytest-asyncio/issues/30>`_\n- Deal with the event loop policy by wrapping a special pytest hook,\n  ``pytest_fixture_setup``. This allows setting the policy before fixtures\n  dependent on the ``event_loop`` fixture run, thus allowing them to take\n  advantage of the ``forbid_global_loop`` parameter. As a consequence of this,\n  we now depend on pytest 3.0.\n  `#29 <https://github.com/pytest-dev/pytest-asyncio/issues/29>`_\n\n\n0.4.1 (2016-06-01)\n~~~~~~~~~~~~~~~~~~\n- Fix a bug preventing the propagation of exceptions from the plugin.\n  `#25 <https://github.com/pytest-dev/pytest-asyncio/issues/25>`_\n\n0.4.0 (2016-05-30)\n~~~~~~~~~~~~~~~~~~\n- Make ``event_loop`` fixtures simpler to override by closing them in the\n  plugin, instead of directly in the fixture.\n  `#21 <https://github.com/pytest-dev/pytest-asyncio/pull/21>`_\n- Introduce the ``forbid_global_loop`` parameter.\n  `#21 <https://github.com/pytest-dev/pytest-asyncio/pull/21>`_\n\n0.3.0 (2015-12-19)\n~~~~~~~~~~~~~~~~~~\n- Support for Python 3.5 ``async``/``await`` syntax.\n  `#17 <https://github.com/pytest-dev/pytest-asyncio/pull/17>`_\n\n0.2.0 (2015-08-01)\n~~~~~~~~~~~~~~~~~~\n- ``unused_tcp_port_factory`` fixture.\n  `#10 <https://github.com/pytest-dev/pytest-asyncio/issues/10>`_\n\n\n0.1.1 (2015-04-23)\n~~~~~~~~~~~~~~~~~~\nInitial release.\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with ``tox``, please ensure\nthe coverage at least stays the same before you submit a pull request.\n"}
