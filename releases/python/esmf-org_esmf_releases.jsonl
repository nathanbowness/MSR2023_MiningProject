{"url": "https://api.github.com/repos/esmf-org/esmf/releases/81372239", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/81372239/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/81372239/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/v8.4.0", "id": 81372239, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDODi_1784E2aRP", "tag_name": "v8.4.0", "target_commitish": "develop", "name": "ESMF 8.4.0", "draft": false, "prerelease": false, "created_at": "2022-10-24T22:31:53Z", "published_at": "2022-10-28T17:37:45Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/v8.4.0", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/v8.4.0", "body": "## Overview\r\n\r\nThe 8.4.0 release of ESMF implements a number of exciting new features. Some are incremental in nature while others explore new territory. Highlights of the 8.4.0 release are outlined in the following paragraphs. A detailed list of release notes is provided further down.\r\n\r\nESMX, a new layer built on top of the ESMF and NUOPC APIs, is being introduced in this release. ESMX stands for the Earth System Model eXecutable (ESMX) layer. The goals of ESMX are (1) to simplify standing up new NUOPC-based systems, (2) promote hierarchical model component testing, (3) reduce the cost of maintaining NUOPC-based modeling systems, (4) improve alignment and interoperability between different NUOPC-based systems, and (5) provide a fast and coordinated roll-out strategy for new ESMF/NUOPC features.\r\n\r\nExploration and experimentation with ESMX is strongly encouraged. However, please recognize that it is a new development effort that comes with the typical rough edges. For example, no formal reference manual is available yet. A good starting point to learn about the layer is the [ESMX/README.md](https://github.com/esmf-org/esmf/blob/develop/src/addon/ESMX/README.md). We expect development of ESMX to continue throughout the next several release cycles.\r\n\r\nProgress was made in the area of I/O. Multi-tile Arrays and Fields can now be used in Read and Write operations. A common use case is the six-tile representation of the cubed sphere grid. There are a number of restrictions that apply to the multi-tile I/O support made available in this release. Please see the associated release note below for more information. The plan is to relax restrictions in future releases.\r\n\r\nOn the ESMF object level a new concept of \u201cNamed Aliases\u201d was introduced. This concept builds on the existing ESMF alias concept for deep objects (objects explicitly created and destroyed by Create() and Destroy() methods). Named aliases manage their own private name without affecting the name of the aliased object. This allows the same object to be known under different names inside of different components.\r\n\r\nIncremental progress was also made in the areas of XGrid, LocStream, and Grid. Here user feedback identified a number of issues that have been addressed in this release. \r\n\r\nWith the increasing importance of ARM based architectures, such as Apple\u2019s M1, etc., work was done in this release to support the native development environment on Darwin (Mac OS X). The compiler combination GFortran + Clang is now considered fully supported on Darwin. The release has been fully tested on an Apple M1 system with MPIUNI, MPICH, and OpenMPI.\r\n\r\nESMPy users please note that the Python module has been renamed from \"ESMF\" to \"esmpy\" for better alignment with [Python Enhancement Proposal (PEP)](https://peps.python.org/) guidelines. Please check out the respective release note for details and potential impact on user code.\r\n\r\n## Release Notes\r\n\r\n* The public Fortran API in this release is backward compatible with the last release of ESMF 8.3.0 and patch release ESMF 8.3.1. There were a few minor API changes, none of which require user code changes. The list of API changes is summarized in a [table showing interface changes since ESMF 8.3.0](https://earthsystemmodeling.org/docs/release/ESMF_8_4_0/API-830-840.pdf), including the rationale and impact for each change.\r\n* The Python module name for ESMPy was changed in this release from \u201cESMF\u201d to \u201cesmpy\u201d for better alignment with [Python Enhancement Proposal (PEP)](https://peps.python.org/) guidelines. This change will require user code changes! ESMPy users  will have to do a global search and replace on their scripts to adjust to the module name change. Also notice that the internal ESMF source tree directory structure has changed, moving ./src/addon/ESMPy to ./src/addon/esmpy. This might affect anybody keeping an ESMF repository clone, and maintaining scripts that depend on the internal directory naming.\r\n* No bit-for-bit changes were observed for this release compared to release ESMF 8.3.0. This is based on test runs with the Intel compilers using options \u201c-O2 -fp-model precise\u201d.\r\n* No changes were made to the [ESMF regrid weight generation methods and applications](https://earthsystemmodeling.org/docs/release/latest/ESMF_usrdoc/node15.html#glos:RegridWeightGenerationMethodsAndApplications). The ESMF tables summarizing the [ESMF regridding status](https://earthsystemmodeling.org/regrid/#regridstatus-840) are unchanged.\r\n* All of the fixes and improvements released with [patch 8.3.1](https://github.com/esmf-org/esmf/releases/tag/v8.3.1) are also included in release 8.4.0. Of particular note is support for messages above the 2GiB limit by the ESMF VM communication layer.\r\n* The [Earth System Model eXecutable (ESMX)](https://github.com/esmf-org/esmf/tree/develop/src/addon/ESMX) layer was added to ESMF. ESMX removes technical hurdles that impede hierarchical NUOPC model testing. It includes a unified executable capable of driving multiple configurations of model components: single component, one-way forced, and fully dynamic two-way coupled. A simple YAML file is used to list the component build dependencies (CMake based). A standard NUOPC run configuration file is used to specify the processor layout, run sequence, the field dictionary, and model component options. ESMX supports hierarchical testing by allowing decentralized testing at the component level before integration into larger coupling systems, as well as testing on the integration level.\r\n* The concept of [\u201cNamed Aliases\u201d](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node2.html#SECTION02063000000000000000) has been introduced. Regular aliases of deep ESMF objects continue being created using a simple assignment operator. Changing the name of a regular alias affects the object and thus all other aliases. Named aliases are created using the new [ESMF_NamedAlias()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node2.html#SECTION02063100000000000000) function. Named aliases manage their own private name. Changing the name of a named alias does not affect the object or other aliases.\r\n* Using a Mesh that contains one or more elements with greater than 4 sides when creating an XGrid is now supported. Previously doing so would result in an error when data was transferred into or out of the XGrid.\r\n* LocStreams can now be created from a Cartesian Mesh file. Previously the attempt to do so would result in an error.\r\n* Attempting to create a Grid from a GRIDSPEC mosaic file that doesn\u2019t contain variables with standard_name set to \"grid_tile_spec\", \"geographic_latitude\", or \"geographic_longitude\" now triggers clear ERROR log messages before returning with an error. Previously no ERROR messages were logged, making this situation hard to debug.\r\n* Read and Write operations are now permitted for multi-tile Arrays and Fields. A common use case for this is representing a cubed sphere grid as a six-tile grid. This change applies to [ESMF_ArrayRead()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050552700000000000000), [ESMF_ArrayWrite()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050554700000000000000), [ESMF_ArrayBundleRead()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050451600000000000000), [ESMF_ArrayBundleWrite()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050452700000000000000), [ESMF_FieldRead()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050365300000000000000), [ESMF_FieldWrite()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050367500000000000000), [ESMF_FieldBundleRead()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050251900000000000000), and [ESMF_FieldBundleWrite()](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/node5.html#SECTION050253900000000000000). Each of these methods reads or writes to multiple files in the multi-tile case. See the respective API documentation for details of how the tile-specific file names are constructed. \\\r\nCurrent limitations are:\r\n    * For I/O of ArrayBundles and FieldBundles, all Arrays / Fields in the bundle must contain the same number of tiles; \r\n    * I/O is not yet permitted for multi-tile Arrays / Fields with ungridded / undistributed dimensions; \r\n    * I/O is currently only permitted for multi-tile Arrays / Fields with 1 DE per PET.\r\n* ESMF profiles now include a summary of the full application run time for convenience. Previously user instrumentation was required to introduce an end-to-end profiling level.\r\n* The configuration for ESMF_COMPILER=gfortranclang now works on Darwin systems (Mac OS X). Note that on Darwin, the system-level g++ invokes clang++, and unless you ensure that you have a true g++ early in your path (or build the MPI compiler wrappers to ensure that they wrap the true g++), you will end up using clang++ even if you think you are using the GNU C++ compiler. Setting ESMF_COMPILER=gfortranclang is correct for this typical situation. Attempting to use ESMF_COMPILER=gfortran when the C++ compiler is actually clang++ now issues an error message.\r\n\r\n## Known Issues\r\n\r\n* Attempting to write weight files from the ESMPy Regrid object when using [filemode=FileMode.WITHAUX](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_4_0/html/FileMode.html) currently crashes.\r\n\r\n**Platform-specific issues:**\r\n\r\n* The GNU and Intel compilers require GCC>=4.8 for C++11 support (Intel uses the GCC headers). By default, ESMF uses the C++11 standard and cannot be downgraded. If you run into build issues due to the C++11 dependency, you must make sure a GCC>=4.8 is loaded.\r\n* On Darwin, with the GNU gfortran+gcc combination, when building MPICH3 from source, it is important to specify the \"--enable-two-level-namespace\" configure option. By default, i.e. without this option, on Darwin, the produced MPICH compiler wrappers include a linker flag (-flat_namespace) that causes issues with C++ exception handling. Building and linking ESMF applications with MPICH compiler wrappers that specify this linker option leads to \u201cmysterious\u201d application aborts during execution.\r\n* On Darwin, with the Intel Fortran compiler, command line arguments cannot be accessed from ESMF applications when linked against the shared library version of libesmf. There is no issue when linked against the static libesmf.a version. Setting the environment variable ESMF_SHARED_LIB_BUILD=OFF, during the ESMF build, can be used as a work around for this issue.\r\n* There is an issue with intercepting the MPI calls for profiling on some of the supported platforms. This results in a single FAIL reported for ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    * Catania: Darwin+GNU+mpich\r\n    * Green: Darwin+gfortranclang+mpich/openmpi\r\n    * Gaea: Unicos+GNU+cray-mpich\r\n* There is an issue with loading the libesmftrace_preload.so library on some of the supported platforms. This results in a reported CRASH for ESMF_TraceIOUTest.F90 and ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    * Discover: Linux+GNU+intelmpi\r\n    * Gaea: Unicos+Intel+cray-mpich\r\n    * Gaea: Unicos+Intel+mpiuni\r\n\r\n## Documentation\r\n\r\n* [ESMF Reference Manual for Fortran](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_refdoc/)\r\n* [ESMF Reference Manual for C](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMC_crefdoc/)\r\n* [ESMF User Guide](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/ESMF_usrdoc/)\r\n* [NUOPC Layer Reference](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/NUOPC_refdoc/)\r\n* [Building a NUOPC Model](http://earthsystemmodeling.org/docs/release/ESMF_8_4_0/NUOPC_howtodoc/)\r\n* [ESMPy Doc](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_4_0/html/)\r\n\r\n## Tables\r\n\r\n* [Regridding Status Table](https://earthsystemmodeling.org/regrid/#regridstatus-840)\r\n* [Supported Platform Table](https://earthsystemmodeling.org/release/platforms_8_4_0)\r\n* [API Change Table](https://earthsystemmodeling.org/docs/release/ESMF_8_4_0/API-830-840.pdf)"}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/77790242", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/77790242/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/77790242/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/v8.3.1", "id": 77790242, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDODi_1784Eovwi", "tag_name": "v8.3.1", "target_commitish": "develop", "name": "ESMF 8.3.1", "draft": false, "prerelease": false, "created_at": "2022-09-19T21:57:34Z", "published_at": "2022-09-21T22:23:38Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/v8.3.1", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/v8.3.1", "body": "## Overview\r\n\r\nESMF 8.3.1 is a patch release that fixes a number of issues that were noticed after the 8.3.0 release. While most of the issues are minor, they have been reported as problems under specific user applications. The 8.3.1 patch release provides a path for affected applications to upgrade and use an official ESMF release instead of a beta tag in the 8.4.0 series currently in development.\r\n\r\nAs a patch release, 8.3.1 does not introduce new features. Applications that work fine with 8.3.0, or are already on a 8.4.0 beta tag, need not upgrade to the 8.3.1 patch. For these cases an upgrade to 8.4.0, when officially released, is the recommended next step. All of the fixes in the 8.3.1 release are also available in beta tag v8.4.0b11 and newer.\r\n\r\n## Release Notes\r\n\r\n* This patch release is backward compatible with ESMF 8.3.0.\r\n* No bit-for-bit changes are expected for this release compared to ESMF 8.3.0.\r\n* No changes were made to the [ESMF regrid weight generation methods and applications](https://earthsystemmodeling.org/docs/release/latest/ESMF_usrdoc/node15.html#glos:RegridWeightGenerationMethodsAndApplications). The ESMF tables summarizing the [ESMF regridding status](https://earthsystemmodeling.org/regrid/#regridstatus-830-etc) are unchanged.\r\n* The ESMF communication layer now supports single messages that are above the previous 2GiB limit. This applies to the direct usage of ESMF_VM communication calls, but also extends to ESMF_RouteHandle based communication methods: Regrid, Redist, Halo, and SMM. User applications have been observed to push over the previous 32-bit message limit when each PET addresses a substantial amount of memory and calls into the ESMF communication methods. Before this fix, a user could experience application crashes in the MPI layer due to ESMF attempting to send messages that exceed the 32-bit size limit.\r\n* An issue inside ESMF_Info was fixed in which the data type and precision of attributes was not properly set when querying for an attribute through ESMF_InfoGet(). This led to a downstream issue of writing NetCDF attributes with a precision inconsistent with the attribute's precision inside the ESMF_Info object.\r\n* Fixed an issue in which the IO layer was incorrectly querying for the number of compute cores on a node. In some cases, the bug led to application hangs during IO operations (e.g. ArrayWrite) that span multiple nodes.\r\n* An issue was fixed in the IO layer that occurred when reading through PNetCDF into a destination with repeating elements (e.g. halo points). When used to read a Mesh from file, this problem caused bad coordinate values to be set in the created mesh. This in turn led to very poor performance when subsequently using the Mesh in a regrid weight generation operation.\r\n* The IO performance and memory requirement for the Read() operation was significantly improved by eliminating a costly check only relevant for Write() operations.\r\n* An issue observed under Darwin M1 systems with ESMP_Initailize() called by ESMPy was fixed.\r\n* The ESMPy syntax was corrected to allow for calls with property accessor Manager.local_pet.\r\n* The internal MOAB library included with ESMF now builds under old GCC 5.4.x.\r\n\r\n## Known Issues\r\n\r\n* Same as ESMF 8.3.0.\r\n\r\n## Documentation\r\n\r\n* [ESMF Reference Manual for Fortran](http://earthsystemmodeling.org/docs/release/ESMF_8_3_1/ESMF_refdoc/)\r\n* [ESMF Reference Manual for C](http://earthsystemmodeling.org/docs/release/ESMF_8_3_1/ESMC_crefdoc/)\r\n* [ESMF User Guide](http://earthsystemmodeling.org/docs/release/ESMF_8_3_1/ESMF_usrdoc/)\r\n* [NUOPC Layer Reference](http://earthsystemmodeling.org/docs/release/ESMF_8_3_1/NUOPC_refdoc/)\r\n* [Building a NUOPC Model](http://earthsystemmodeling.org/docs/release/ESMF_8_3_1/NUOPC_howtodoc/)\r\n* [ESMPy Doc](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_3_1/html/)\r\n\r\n## Tables\r\n\r\n* [Regridding Status Table](https://earthsystemmodeling.org/regrid/#regridstatus-830-etc)\r\n* [Supported Platform Table](https://earthsystemmodeling.org/release/platforms_8_3_1)"}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/68963211", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/68963211/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/68963211/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/v8.3.0", "id": 68963211, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDODi_1784EHEuL", "tag_name": "v8.3.0", "target_commitish": "develop", "name": "ESMF 8.3.0", "draft": false, "prerelease": false, "created_at": "2022-06-06T17:39:06Z", "published_at": "2022-06-08T18:23:08Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/v8.3.0", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/v8.3.0", "body": "## Overview\r\n\r\nThe 8.3.0 release of ESMF implements a number of incremental improvements and bug fixes across the library. Highlights of the 8.3.0 release are outlined in the following paragraphs. A detailed list of release notes is provided further down.\r\n\r\nOn the code management side, ESMF has aligned its tagging scheme with the standard convention used by many other packages on GitHub. Standard tags now start with the lowercase letter \u201cv\u201d, followed by the version triplet. For example, the tag for release 8.3.0 on the ESMF GitHub repository is \u201cv8.3.0\u201d. Beta snapshots leading to a future release have the same root, followed by the lowercase letter \u201cb\u201d and a two digit snapshot number. E.g. v8.3.0b17 was the last 8.3.0 beta snapshot tag before the official release tag.\r\n\r\nESMF uses a library called [ParallelIO (PIO)](https://github.com/NCAR/ParallelIO) for its internal I/O operations, such as reading in mesh files and writing out fields. During this release, the version of PIO used internally was upgraded from a very outdated 1.x version to version 2.5. A new option was also added to the ESMF build system to allow linking to an external build of the PIO library.\r\n\r\nBuilt on top of the PIO upgrade, the [ESMF_MeshCreate()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050104900000000000000) method that reads a mesh from file was re-implemented. It now reads the mesh coordinate information in a fully distributed way. This reduces the memory footprint dramatically, allowing the creation of much larger meshes from file than before.\r\n\r\nFurther progress was made toward the full adoption of [MOAB](https://sigma.mcs.anl.gov/moab-library/) as the internal mesh representation in ESMF. The internal MOAB library, included with ESMF, was updated to version 5.3, and combinatorial testing was added to the ESMF testing framework to ensure consistency and backward compatibility between the native mesh implementation and the MOAB-based implementation. Several consistency issues were resolved as a result of the new testing. By default, ESMF 8.3.0 still uses the native mesh implementation internally. As in previous releases, users can enable the MOAB-based implementation at run-time by calling [ESMF_MeshSetMOAB()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION0501042000000000000000).\r\n\r\nSupport for dynamically changing grid coordinates (e.g. storm following grids) was added to ESMF.  The [ESMF_GridCreate()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION05086600000000000000) method that creates a new Grid from an existing Grid with new DistGrid was extended to optionally return a RouteHandle object. The RouteHandle allows subsequent calls into the new [ESMF_GridRedist()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050865300000000000000) method to efficiently redistribute the  coordinate values from the original source grid to the new destination grid. NUOPC_Connector support for handling changing grid coordinates is not available in this release but will be added in a future release.\r\n\r\nTwo issues were encountered and addressed in the ESMF_XGrid implementation. First, element areas can now be set in a Field built on an XGrid by using the [ESMF_FieldRegridGetArea()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050366200000000000000) method. Previously, this capability was only supported for a Field built on a Grid or Mesh.  Second, the algorithm used to generate interpolation weights was improved to guarantee that exchange grid cells are exactly overlapping exactly one cell on each side.  Prior to this change, small numerical errors prevented this property from holding and resulted in small remapping errors.\r\n\r\n\r\n## Release Notes\r\n\r\n\r\n\r\n* This release is backward compatible with the last release ESMF 8.2.0, for all the interfaces that are marked as backward compatible in the Reference Manual. There were API changes to a few unmarked methods that may require minor modifications to user code that uses these methods. The entire list of API changes is summarized in a [table showing interface changes since ESMF 8.2.0](https://earthsystemmodeling.org/docs/release/ESMF_8_3_0/API-820-830.pdf), including the rationale and impact for each change.\r\n* No bit-for-bit changes were observed for this release compared to release ESMF v8.2.0 with Intel compilers using \u201c-O2 -fp-model precise\u201d.\r\n* Tables summarizing the [ESMF regridding status](https://earthsystemmodeling.org/regrid/#-status-of-regridding-methods-covers-release-830) have been updated. These include supported grids and capabilities of the offline and integrated regridding.\r\n* A new section was added to the NUOPC Reference Manual describing the use of [NUOPC_AddNestedState()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/NUOPC_refdoc/node3.html#SECTION00034400000000000000) for the coupling of multiple nests or multiple data sets between components.\r\n* The option to profile the execution time of each individual iteration through a NUOPC run sequence has been implemented in the [Driver Component Metadata](https://earthsystemmodeling.org/docs/release/ESMF_8_3_0/NUOPC_refdoc/node3.html#SECTION00033100000000000000) Profiling attribute. Setting the appropriate profiling bit results in a profile where the timing for each individual run sequence iteration is reported in the timing profile under a unique label. This information can be helpful for cases where the cost per iteration changes throughout the execution.\r\n* An issue in the [ESMF_StateReconcile()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node4.html#SECTION040771400000000000000) method used by ESMF and NUOPC to generate a consistent object view across multiple components was fixed. The optimization implemented in v8.1.0 introduced the unintended behavior of switching out geom objects (Grid, Mesh, etc.) for Fields contained in States that are used in multiple ESMF_StateReconcile() operations.  The incorrect association of geom objects with Fields resulted in unexpected results during subsequent operations using those Fields, such as creating a RouteHandle for regridding.\r\n* Progress was made in full adoption of [MOAB](https://sigma.mcs.anl.gov/moab-library/) as the internal mesh representation in ESMF.  This includes updating the internal MOAB library included with ESMF to version 5.3.1 and the addition of combinatorial testing designed to ensure consistency and backward compatibility between the native mesh implementation and the MOAB-based implementation.  Several consistency issues were resolved as a result of the new testing.\r\n* The previous version of [ESMF_MeshCreate()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050104900000000000000) from a file used to read all the node coordinate information on every processor. For large mesh files this global read can lead to high memory consumption and prevent reading in certain large meshes entirely. To reduce the memory footprint, a fully distributed read of mesh coordinate information was implemented. This change allows the creation of much larger meshes from file.\r\n* The `nodeOwners` argument for method [ESMF_MeshCreate()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050104700000000000000) and [ESMF_MeshAddNodes()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050104500000000000000) was made optional. This allows the user to defer specification of node ownership to ESMF in cases where a specific ownership assignment is not needed to match the application data distribution. When this argument is absent, ESMF generates a consistent assignment of node owners.\r\n* The [ESMF_GridCreate()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION05086600000000000000) method that creates a new Grid from an existing Grid with new DistGrid was extended to optionally return a RouteHandle object. The RouteHandle allows subsequent calls into the new [ESMF_GridRedist()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050865300000000000000) method to redistribute the coordinate values from the original source grid to the new destination grid. This feature supports efficient handling of dynamically changing grids between components.\r\n* The implementation of the exchange grid ([ESMF_XGrid](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050110000000000000000)) class that supports efficient conservative regridding between multiple grids on source and destination sides has been improved:\r\n    * Element areas can now be set in a Field built on an XGrid by using the [ESMF_FieldRegridGetArea()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node5.html#SECTION050366200000000000000) method. Previously, this capability was only supported for a Field built on a Grid or Mesh.  \r\n    * The algorithm used to generate interpolation weights was improved to guarantee that exchange grid cells are exactly overlapping exactly one cell on each side.  Prior to this change, small numerical errors prevented this property from holding.\r\n* Added the optional --`checkFlag` argument to [ESMF_RegridWeightGen](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node3.html#SECTION03020000000000000000) application. This flag allows the user to turn on more expensive error checking that may not be appropriate for an operational run. Initially this flag turns on a check for grid self-intersection during conservative regridding.\r\n* The VM Epoch implementation now provides an option to reduce the memory pressure on the sending side PETs. By default, internal send buffers, once allocated, are kept until the VM is destroyed. This can lead to high memory pressure for cases where the same sending PETs participate in communication with multiple sets of receiving PETs. Setting `keepAlloc=.false.` when calling [ESMF_VMEpochEnter()](http://earthsystemmodeling.org/docs/nightly/release/ESMF_8_3_0/ESMF_refdoc/node6.html#SECTION0601261400000000000000), instructs ESMF to immediately deallocate internal send buffers once the data has been transferred. This is in analogy to the handling of internal receive buffers with `keepAlloc=.false.` when calling [ESMF_VMEpochExit()](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node6.html#SECTION0601261500000000000000). The default remains .false. for both sides for efficiency.\r\n* Two internal fixed size buffers that caused issues when precomputing RouteHandles (e.g. via RegridStore()) for high-resolution, high PET count cases (~10,000 and above) were modified. The size of one of the buffers was doubled, while the other fixed size limitation was removed. The symptom of the first buffer size issue (now increased in size) was an error trace in the ESMF Log starting with `\"ESMCI_DELayout.C:9616 ESMCI::XXE::storeBufferInfo() Internal error: Bad condition - bufferInfoList overflow!!!\".` The second buffer size issue (now eliminated) was an error trace starting with `\"ESMCI_DELayout.C:8416 ESMCI::XXE::execReady() Internal error: Bad condition - sendnbCount out of range\"`.\r\n* ESMF uses a library called [ParallelIO (PIO)](https://github.com/NCAR/ParallelIO) for its internal I/O operations, such as reading in mesh files and writing out fields. During this release, the version of PIO used internally was upgraded from a very outdated 1.x version to version 2.5. As a result, the binary output option ESMF_IOFMT_BIN is no longer supported and has been removed. A new option was also added to the ESMF build system to allow linking to an external build of the PIO library, as long as the external build is at least version 2.5.8. The upgrade eliminates the need to pass the compiler flags \"-fallow-argument-mismatch -fallow-invalid-boz\" when building with GNU 10.x or newer compilers. If the internal build of PIO is used, CMake version 2.8.12 or newer must be available in the system path. See the User's Guide for information about the environment variables used to configure PIO build and linking options.\r\n* An extra column was added to the [ESMF profiler summary output](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/node6.html#SECTION060132200000000000000), reporting the number of PEs (CPU cores) associated with the executing PETs. This information is helpful for example when profiling components that run with ESMF-managed threading. In the single-threaded case, each PET is associated with a single PE, and the number of PEs equals that of PETs. However, for the multi-threaded case, where N threads (e.g. OpenMP) are spawned under each PET, the number of PEs will be N times the number of PETs.\r\n* The [ESMF_COMM](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_usrdoc/node10.html#SECTION000105000000000000000) build setting for MPICH has been reworked to better align with the current state of the MPICH project, and other ESMF_COMM settings. ESMF_COMM=mpich now covers the current MPICH versions 3 and 4. ESMF_COMM=mpich3 is still supported for backward compatibility. The old MPICH2 continues to be supported via ESMF_COMM=mpich2.\r\n* A problem with ESMF library installation linking for dylibs under Darwin was fixed. Previously the installed ESMF library remained dependent on files under the src directory of the ESMF build tree.\r\n* The FindESMF.cmake file included with ESMF, which is provided as a convenience to users that use CMake in their projects, has been updated. The module now searches ESMF_ROOT if ESMFMKFILE is not provided by the environment. Option USE_ESMF_STATIC_LIBS has been added to use the static ESMF library when building executables. This module requires CMake v3.12 and above.\r\n\r\n\r\n## Known Issues\r\n\r\n\r\n\r\n* Attempting to write weight files from the ESMPy Regrid object when using [filemode=FileMode.WITHAUX](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_3_0/html/FileMode.html) currently crashes.\r\n\r\n**Platform-specific issues:**\r\n\r\n* The GNU and Intel compilers require GCC>=4.8 for C++11 support (Intel uses the GCC headers). By default, ESMF uses the C++11 standard and cannot be downgraded. If you run into build issues due to the C++11 dependency, you must make sure a GCC>=4.8 is loaded.\r\n* On Darwin, with the GNU gfortran+gcc combination, when building MPICH3 from source, it is important to specify the \"--enable-two-level-namespace\" configure option. By default, i.e. without this option, on Darwin, the produced MPICH compiler wrappers include a linker flag (-flat_namespace) that causes issues with C++ exception handling. Building and linking ESMF applications with MPICH compiler wrappers that specify this linker option leads to \u201cmysterious\u201d application aborts during execution.\r\n* On Darwin, with the Intel Fortran compiler, command line arguments cannot be accessed from ESMF applications when linked against the shared library version of libesmf. There is no issue when linked against the static libesmf.a version. Setting the environment variable ESMF_SHARED_LIB_BUILD=OFF, during the ESMF build, can be used as a work around for this issue.\r\n* There is an issue with intercepting the MPI calls for profiling on some of the supported platforms. This results in a single FAIL reported for ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    * Catania: Darwin+GNU+MPICH3\r\n    * Gaea: Unicos+GNU+cray-mpich\r\n* There is an issue with loading the libesmftrace_preload.so library on some of the supported platforms. This results in a reported CRASH for ESMF_TraceIOUTest.F90 and ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    * Cori: Unicos+Intel+cray-mpich\r\n    * Cori: Unicos+Intel+mpiuni\r\n    * Discover: Linux+GNU+intelmpi\r\n    * Gaea: Unicos+Intel+cray-mpich\r\n    * Gaea: Unicos+Intel+mpiuni\r\n    * Hera: Linux+GNU+intelmpi\r\n    * Orion: Linux+GNU+mpiuni\r\n\r\n\r\n## Documentation\r\n\r\n\r\n\r\n* [ESMF Reference Manual for Fortran](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_refdoc/)\r\n* [ESMF Reference Manual for C](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMC_crefdoc/)\r\n* [ESMF User Guide](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/ESMF_usrdoc/)\r\n* [NUOPC Layer Reference](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/NUOPC_refdoc/)\r\n* [Building a NUOPC Model](http://earthsystemmodeling.org/docs/release/ESMF_8_3_0/NUOPC_howtodoc/)\r\n* [ESMPy Doc](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_3_0/html/)\r\n\r\n\r\n## Tables\r\n\r\n\r\n\r\n* [API Change Table](https://earthsystemmodeling.org/docs/release/ESMF_8_3_0/API-820-830.pdf)\r\n* [Regridding Status Table](https://earthsystemmodeling.org/regrid/#-status-of-regridding-methods-covers-release-830)\r\n* [Supported Platform Table](https://earthsystemmodeling.org/release/platforms_8_3_0)", "reactions": {"url": "https://api.github.com/repos/esmf-org/esmf/releases/68963211/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/52278466", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/52278466/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/52278466/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/ESMF_8_2_0", "id": 52278466, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "RE_kwDODi_1784DHbTC", "tag_name": "ESMF_8_2_0", "target_commitish": "develop", "name": "ESMF 8.2.0", "draft": false, "prerelease": false, "created_at": "2021-10-26T21:39:51Z", "published_at": "2021-10-28T23:30:47Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/ESMF_8_2_0", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/ESMF_8_2_0", "body": "## Overview\r\n\r\nStarting with version 8.2.0, the ESMF team has moved to a more frequent release cadence with new releases anticipated approximately every six months.  This approach helps to ensure that new features, bug fixes, and optimizations are available more frequently in official releases of ESMF. \r\n\r\nHighlights of the 8.2.0 release are outlined below. A detailed list of release notes is also provided below.\r\n\r\nThe NUOPC run sequence feature has proven a viable formalism to capture and express the control- and data-flow among the components of a wide range of coupled applications. Recent application work has demonstrated the need for more succinctly specifying conditional execution of run sequence elements. This release extends the [NUOPC RunSequence syntax](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/NUOPC_refdoc/node4.html#SECTION000411300000000000000) to include Alarm Blocks.  Alarm blocks allow the user to specify if certain run sequence elements should be called less frequently than the parent timestep.\r\n\r\nSeveral groups have started implementing exchange grids in their modeling systems, including within NUOPC Mediators. To facilitate these efforts, the ESMF_XGrid support was extended in this release. It now includes the use of all ESMF regridding methods (bilinear, patch, etc.) and options (extrapolation, regridding status, etc.) when regridding to or from Fields built on exchange grids.\r\n\r\nA number of issues were uncovered during the deployment of the ESMF-managed threading and resource control features. This release addresses these issues, and the NUOPC level support for [resource control and handling of threaded components](https://earthsystemmodeling.org/docs/release/ESMF_8_2_0/NUOPC_refdoc/node3.html#SECTION00037000000000000000) is now more robust and has been demonstrated in several large-scale applications.  This feature allows model components to independently set OpenMP threading levels so that all components in a coupled system are best utilizing available HPC resources, based on their individual scaling profiles.  \r\n\r\nThe VMEpoch feature is an important communication optimization used by the NUOPC_Connector, and by some applications directly. This release fixes a problem that was encountered when using VMEpoch with any of the Redist() methods. The release also addresses an out-of-memory issue that can be triggered when the sending side runs many iterations ahead of the receiving side, by introducing automatic message throttling. Finally, a new reference manual section is available that describes the use of [VMEpoch for asynchronous RouteHandle communications](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node5.html#SECTION050132200000000000000).\r\n\r\nThe process of replacing the native ESMF mesh implementation with the [MOAB](https://sigma.mcs.anl.gov/moab-library/) library, developed by the U.S. Department of Energy, is continuing. This release makes the MOAB mesh backend available to ESMPy users by calling [Manager.set_moab()](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_2_0/html/manager.html). This option allows users to test the impacts of using the MOAB mesh backend instead of the default native mesh through ESMPy.\r\n\r\n## Release Notes\r\n\r\n* This release is backward compatible with the last major release update, ESMF 8.1.0 and patch release ESMF 8.1.1, for all the interfaces that are marked as backward compatible in the Reference Manual. There were API changes to a few unmarked methods that may require minor modifications to user code that uses these methods. The entire list of API changes is summarized in a [table showing interface changes since ESMF_8_1_0](https://earthsystemmodeling.org/docs/release/ESMF_8_2_0/API-810-820.pdf), including the rationale and impact for each change.\r\n* No bit-for-bit changes were observed for this release compared to release ESMF 8.1.0 and patch release ESMF 8.1.1, with Intel compilers using \u201c-O2 -fp-model precise\u201d. However, the release contains code changes to the regridding implementation that have the potential to lead to bit-for-bit changes in regridding weights. Any release item with the potential to introduce a bit-for-bit change is indicated in the respective release note. \r\n* Tables summarizing the [ESMF regridding status](https://earthsystemmodeling.org/regrid/#-status-of-regridding-methods-covers-release-820) have been updated. These include supported grids and capabilities of the offline and integrated regridding.\r\n* The [NUOPC RunSequence syntax](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/NUOPC_refdoc/node4.html#SECTION000411300000000000000) was extended to support Alarm Blocks. An alarm block specifies the time interval at which the elements within the block are executed. This adds additional flexibility to the RunSequence approach, e.g. to write restart files at certain intervals that are multiples of the parent timestep.\r\n* Fields created on XGrids can now be used as either source, destination, or both when calling the general ESMF regrid methods ([ESMF_FieldRegridStore()](https://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node5.html#SECTION050366000000000000000), [ESMF_FieldRegrid()](https://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node5.html#SECTION050365800000000000000), [ESMF_FieldBundleRegridStore()](https://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node5.html#SECTION050252600000000000000), [ESMF_FieldBundleRegrid()](https://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node5.html#SECTION050252400000000000000)). This enables the use of all ESMF regridding methods (bilinear, patch, etc.) and options (extrapolation, regridding status, etc.) when regridding to or from Fields on an XGrid.  Prior to this release, regridding to or from Fields on an XGrid was only supported when going from one of the grids used to originally create the XGrid. Also, only conservative methods were supported.  \r\n* A change in the 3D spherical bilinear weight calculation to handle more complex cells lead to a decrease in performance in releases 8.0.0, 8.1.0, and 8.1.1. The current release restores the performance to the level of ESMF 7.1.0r, and better, while retaining support for the complex cells. (Note that this change has the potential to introduce round off level changes in weights calculated for the 3D spherical bilinear method compared to previous ESMF releases. However, bit-for-bit testing with the Intel compiler using \u201c-O2 -fp-model precise\u201d did not detect any changes.)\r\n* A number of issues that were found with ESMF-managed threading under real application usage, as released with ESMF 8.1.0, have been addressed: (1) PETs that execute a threaded component are no longer instantiated as Pthreads by default but instead execute under the original MPI process. This resolves the issue of not being able to set an unlimited stack size. (2) Issues within the automatic garbage collection of ESMF objects have been resolved, which lead to memory corruption issues during ESMF_Finalize() when Grids or Meshes were transferred between threaded components. (3) Thread affinities and number of OpenMP threads are reset when exiting from a threaded component method, and global resource control can be turned on/off via the optional argument `globalResourceControl` during [ESMF_Initialize()](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node4.html#SECTION04024100000000000000).\r\n* It is now possible to override the defaults of a number of global ESMF settings by specifying an ESMF_Config file during [ESMF_Initialize()](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node4.html#SECTION04024100000000000000). This is particularly useful for adjusting log specific settings, or to turn on/off resource control on the global VM.\r\n* A new section was added to the ESMF Reference Manual that discusses use of [VMEpoch for asynchronous RouteHandle communications](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node5.html#SECTION050132200000000000000).\r\n* The VMEpoch feature allows sending PETs to fill the message queue up to the limit set by the MPI implementation. For message sizes where an MPI implementation chooses to use the EAGER protocol, this can lead to memory exhaustion on the receiving PETs. To prevent this issue, VMEpoch now limits the number of outstanding send cycles to ten by default. This default can be overridden by the user through the optional argument `throttle` to [ESMF_VMEpochEnter()](http://earthsystemmodeling.org/docs/nightly/release/8.2.0/ESMF_refdoc/node6.html#SECTION0601261400000000000000).\r\n* The process of replacing the native ESMF mesh implementation with the [MOAB](https://sigma.mcs.anl.gov/moab-library/) library is continuing. The MOAB mesh backend is now available to ESMPy by calling [Manager.set_moab()](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_2_0/html/manager.html). This allows the user to test ESMPy regridding features with the new MOAB backend in preparation for MOAB becoming the default. Manager.moab returns a boolean value to indicate if the MOAB backend is currently in use. The default is to use the native ESMF mesh backend.\r\n\r\n## Known Bugs\r\n\r\n* The ESMF_XGrid construction can lead to degenerate cells in cases where the source and destination grids have edges that are almost the same. Often these cells don't produce weights and are benign, but when weights are produced, they can lead to low accuracy results when transferring data to/from the XGrid.\r\n* Attempting to write weight files from the ESMPy Regrid object when using [filemode=FileMode.WITHAUX](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_2_0/html/FileMode.html) currently crashes.\r\n\r\n     \\\r\n**Platform-specific bugs:**\r\n\r\n* The GNU and Intel compilers require GCC>=4.8 for C++11 support (Intel uses the GCC headers). By default, ESMF uses the C++11 standard and cannot be downgraded. If you run into build issues due to the C++11 dependency, you must make sure a GCC>=4.8 is loaded.\r\n* For GNU compilers GCC>=10.x, the default Fortran argument mismatch checking has become stricter. This results in build failures in some of the code that comes with ESMF. Setting environment variable ESMF_F90COMPILEOPTS=\"-fallow-argument-mismatch -fallow-invalid-boz\", during the ESMF build, can be used as a work-around for this issue.\r\n* On Darwin, with the GNU gfortran+gcc combination, when building MPICH3 from source, it is important to specify the \"--enable-two-level-namespace\" configure option. By default, i.e. without this option, on Darwin, the produced MPICH compiler wrappers include a linker flag (-flat_namespace) that causes issues with C++ exception handling. Building and linking ESMF applications with MPICH compiler wrappers that specify this linker option leads to \u201cmysterious\u201d application aborts during execution.\r\n* On Darwin, with the Intel Fortran compiler, command line arguments cannot be accessed from ESMF applications when linked against the shared library version of libesmf. There is no issue when linked against the static libesmf.a version. Setting the environment variable ESMF_SHARED_LIB_BUILD=OFF, during the ESMF build, can be used as a work around for this issue.\r\n* The ESMF_ArrayIOUTest unit test fails the binary read test on the S4 test system (Linux+Intel+IntelMPI).\r\n* There is an issue with intercepting the MPI calls for profiling on some of the supported platforms. This results in a single FAIL reported for ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    * Catania: Darwin+GNU+MPICH3\r\n    * Gaea: Unicos+GNU+cray-mpich\r\n* There is an issue with loading the libesmftrace_preload.so library on some of the supported platforms. This results in a reported CRASH for ESMF_TraceIOUTest.F90 and ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    * Cori: Unicos+Intel+cray-mpich\r\n    * Cori: Unicos+Intel+mpiuni\r\n    * Discover: Linux+GNU+intelmpi\r\n    * Gaea: Unicos+Intel+cray-mpich\r\n    * Gaea: Unicos+Intel+mpiuni\r\n    * Hera: Linux+GNU+intelmpi\r\n    * Orion: Linux+GNU+mpiuni\r\n\r\n## Documentation\r\n\r\n* [ESMF Reference Manual for Fortran](http://earthsystemmodeling.org/docs/release/ESMF_8_2_0/ESMF_refdoc/)\r\n* [ESMF Reference Manual for C](http://earthsystemmodeling.org/docs/release/ESMF_8_2_0/ESMC_crefdoc/)\r\n* [ESMF User Guide](http://earthsystemmodeling.org/docs/release/ESMF_8_2_0/ESMF_usrdoc/)\r\n* [NUOPC Layer Reference](http://earthsystemmodeling.org/docs/release/ESMF_8_2_0/NUOPC_refdoc/)\r\n* [Building a NUOPC Model](http://earthsystemmodeling.org/docs/release/ESMF_8_2_0/NUOPC_howtodoc/)\r\n* [ESMPy Doc](http://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_2_0/html/)\r\n\r\n## Tables\r\n\r\n* [API Change Table](https://earthsystemmodeling.org/docs/release/ESMF_8_2_0/API-810-820.pdf)\r\n* [Regridding Status Table](https://earthsystemmodeling.org/regrid/#-status-of-regridding-methods-covers-release-820)\r\n* [Supported Platform Table](https://earthsystemmodeling.org/release/platforms_8_2_0)"}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/41919394", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/41919394/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/41919394/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/ESMF_8_1_1", "id": 41919394, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQxOTE5Mzk0", "tag_name": "ESMF_8_1_1", "target_commitish": "develop", "name": "ESMF 8.1.1", "draft": false, "prerelease": false, "created_at": "2021-04-22T22:21:45Z", "published_at": "2021-04-23T18:23:12Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/ESMF_8_1_1", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/ESMF_8_1_1", "body": "## Overview\r\nThe 8.1.1 is a patch release that fixes a major regression in 8.1.0. The regression is in the area of user level OpenMP thread handling, where we received several reports of reduced performance. Performance in these cases has been restored with ESMF 8.1.1.\r\n\r\n## Release Notes\r\n- This patch release is backward compatible with ESMF 8.1.0.\r\n- No bit-for-bit changes are expected for this release compared to ESMF 8.1.0.\r\n- No changes were made to the ESMF regrid weight generation methods and applications. The ESMF tables summarizing the ESMF regridding status are unchanged.\r\n- This patch release corrects a regression in the handling of user level OpenMP threads. See the Known Bugs section for details.\r\n\r\n## Known Bugs\r\n- Same as ESMF_8_1_0 with the following exceptions:\r\n  - The issue with OpenMP thread count being reset to 1 within all ESMF components has been fixed.\r\n  - The PETs of all ESMF components, and any potentially created OpenMP threads under such PETs, are no longer pinned automatically to any specific PEs.\r\n- Platform-specific bugs:\r\n  - The same as ESMF_8_1_0."}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/40655656", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/40655656/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/40655656/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/ESMF_8_1_0", "id": 40655656, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQwNjU1NjU2", "tag_name": "ESMF_8_1_0", "target_commitish": "develop", "name": "ESMF 8.1.0", "draft": false, "prerelease": false, "created_at": "2021-03-23T21:08:04Z", "published_at": "2021-03-29T19:46:04Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/ESMF_8_1_0", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/ESMF_8_1_0", "body": "--- \r\n**IMPORTANT:** This release of ESMF contains a known issue with OpenMP thread counts reset to 1 and incorrect pinning of OpenMP threads, leading to reduced application performance in threaded regions.  See Known Bugs below for more details.  [ESMF release 8.1.1](https://github.com/esmf-org/esmf/releases/tag/ESMF_8_1_0) addresses this issue.\r\n\r\n---\r\n\r\n## Overview\r\nDuring the 8.1.0 development cycle, a number of exciting new features were added to the ESMF library, ease of use was improved in several areas, and performance was optimized in critical parts of the library. Highlights of the 8.1.0 release are listed below. A detailed list of release notes is also provided further down.\r\n\r\nThe integration of the [MOAB](http://www.mcs.anl.gov/~fathom/moab-docs/html/index.html) mesh library, developed by the U.S. Department of Energy, into ESMF, has reached a milestone that supports application-level testing. All users of ESMF are encouraged to begin testing their applications with the MOAB option turned ON.  Preliminary results indicate that MOAB provides improved performance and scaling, and reduced memory footprint.  Applications seeking to go to very high resolution grids should benefit from this new capability. The MOAB mesh feature is still OFF by default in this release, but can easily be turned ON from the application level, any time during the run. The available regridding features supported by the MOAB based implementation are clearly listed in the detailed release notes.  \r\n\r\nAnother area of the library that received significant attention is the key-value storage. The new [ESMF_Info](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node6.html#SECTION06020000000000000000) class, based on a modern C++ JSON implementation, replaces ESMF_Attribute. Most of the [legacy ESMF_Attribute API](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node9.html#SECTION09040000000000000000) is preserved for backward compatibility, but users are encouraged to migrate their code to using the ESMF_Info API. As a consequence of the new key-value implementation, the NUOPC initialization time has been reduced. This is most pronounced in applications with large Field and PET counts.\r\n\r\nMajor ease of use improvements went into the NUOPC Layer. One is the introduction of [semantic specialization labels](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00034100000000000000) into the NUOPC API. The new approach no longer uses [Initialize Phase Definition (IPD) versions or the IPDvXXpY nomenclature](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node8.html) when registering methods in the SetServices() method. This leads to clearer, more concise NUOPC \u201ccap\u201d implementations. Another improvement is the seamless integration of the NUOPC profiling options into the [ESMF profiling infrastructure](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node6.html#SECTION060130000000000000000). Simply by setting the Profiling attribute on NUOPC Driver, Model, Mediator, or Connector components, it is now possible for the user to generate a detailed NUOPC-level performance profile.\r\n\r\nA number of new features were added in the area of resource control, handling of threaded components, and shared memory access. The NUOPC layer now supports [resource control and handling of threaded components](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00037000000000000000). This mechanism supports hybrid MPI+OpenMP components with different threading levels, allowing each component to fully utilize HPC resources independently. Coupling between threaded components is supported automatically via the standard NUOPC Connectors. Further, data can now be shared by reference between components that run on the same compute nodes even if running with different threading levels. Both [Field-level sharing](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050331000000000000000) and [Array-level sharing](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050521300000000000000) are supported through the ESMF API.\r\n\r\nNew features were also added to the ESMF regridding implementation. It now supports the [\u201cnearest destination\u201d](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node9.html#SECTION090117000000000000000), and [\u201ccreep nearest destination\u201d](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node9.html#SECTION090117000000000000000) extrapolation methods. The \u201ccreep fill\u201d extrapolation method, introduced in 8.0.0, is now available through ESMPy.\r\n\r\nFinally 8.1.0 includes additions to improve the overall user experience with ESMF. In the area of regridding the user has now the option to specify the \u2018checkFlag\u2019 argument to [ESMF_FieldRegridStore()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050366000000000000000). This turns on more comprehensive grid/mesh error checking at the cost of performance. The option should therefore be used during application development and debugging, and not during production runs.  Finally, for users faced with debugging failing ESMF applications, a new section was added to the User\u2019s Guide entitled [\"Debugging of ESMF User Applications\"](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_usrdoc/node8.html) that provides some hints on how to interpret stack traces and errors that appear in the ESMF log files.\r\n\r\n## Release Notes\r\n\r\n\r\n\r\n*   This release is backward compatible with the last major release update, ESMF 8.0.0, for all the interfaces that are marked as backward compatible in the Reference Manual. There were API changes to a few unmarked methods that may require minor modifications to user code that uses these methods. The entire list of API changes is summarized in a [table showing interface changes since ESMF_8_0_0](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/API-800-810.pdf), including the rationale and impact for each change.\r\n*   Some bit-for-bit changes are expected for this release compared to release ESMF 8.0.0 and patch release ESMF 8.0.1. We observe the following impact with Intel compilers using \u201c`-O2 -fp-model precise`\u201d:\r\n    *   Fixed a problem that could result in erroneously unmapped destinations when going from a very fine source grid to a coarse destination grid (e.g. 1/20 degree to 10x15 degree). Expected bit-for-bit changes:\r\n        *   ESMF_REGRIDMETHOD_CONSERVE_2ND: roundoff level changes in weight values because of a change in the order of calculation.\r\n        *   All regrid methods: Missing weights being added for very fine source grid to coarse destination grid regridding cases as this fix comes into play.\r\n    *   Fixed a problem where using the bilinear method between two identical grids doesn't result in an identity matrix for the regridding weights. It also improves the efficiency of the code when using bilinear or patch between identical grids. Expected bit-for-bit changes:\r\n        *   ESMF_REGRIDMETHOD_BILINEAR: small changes in regridding weights when a destination point exactly matches a source point.\r\n        *   ESMF_REGRIDMETHOD_PATCH: small changes in regridding weights when a destination point exactly matches a source point.\r\n    *   Fixed a problem where a set of points with latitudes set at exactly -90.0 are not all mapped to the same point. Expected bit-for-bit changes:\r\n        *   All regrid methods: Small weight changes when a point in the grid lies at exactly -90.0 latitude.\r\n    *   Optimized the creep fill so the memory doesn't increase as quickly for large numbers of creep levels. Expected bit-for-bit changes:\r\n        *   ESMF_EXTRAPMETHOD_CREEP: Small weight changes for the extrapolated destination locations.\r\n    *   Fixed an issue where in some cases creep fill weights can trigger an assertion in the code that redistributes weights to their final decomposition. Expected bit-for-bit changes:\r\n        *   ESMF_EXTRAPMETHOD_CREEP: Small weight changes for the extrapolated destination locations.\r\n*   Tables summarizing the [ESMF regridding status](https://earthsystemmodeling.org/regrid/#-status-of-regridding-methods-covers-releases-810) have been updated. These include  supported grids and capabilities of the offline and integrated regridding, and numerical results of some specific test cases.\r\n*   The [ESMF_Info](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node6.html#SECTION06020000000000000000) class was introduced as a replacement for ESMF_Attribute. ESMF_Info is based on a modern C++ JSON implementation to provide efficient key-value pair storage. Most of the [legacy ESMF_Attribute API](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node9.html#SECTION09040000000000000000) is preserved for backward compatibility.\r\n*   ESMF is in the process of upgrading the internal mesh representation to use the [MOAB](http://www.mcs.anl.gov/~fathom/moab-docs/html/index.html) mesh library developed by the U.S. Department of Energy. In this release, ESMF capabilities using MOAB have been significantly optimized and expanded, allowing for application-level testing of ESMF with MOAB as the underlying mesh representation. MOAB is built into the ESMF library by default, but its use must be enabled at run-time by calling [ESMF_MeshSetMOAB()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION0501042000000000000000). When MOAB is activated, the following new capabilities are supported in this release:\r\n    *   The Mesh creation, conservative regridding, and bilinear regridding algorithms when MOAB is active have been optimized to reduce their memory use and expand the size of Meshes they can be used on.  \r\n    *   Grids can now be explicitly converted to a Mesh when MOAB is active, using the [ESMF_MeshCreate()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050104800000000000000) method.\r\n    *   Grids can be used to do first-order conservative regridding using MOAB.\r\n    *   Grids can be used for bilinear regridding on cell centers or corners using MOAB. \r\n*   The [NUOPC Layer](https://earthsystemmodeling.org/nuopc/) contained in this release has been improved in the following specific technical areas:\r\n    *   The NUOPC API has been simplified through the introduction of [semantic specialization labels](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00034100000000000000). The new approach leads to clearer and more concise NUOPC \u201ccap\u201d implementations that do not require specifying an [Initialize Phase Definition (IPD) version or using the IPDvXXpY nomenclature](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node8.html) when registering methods in the SetServices() method. Existing caps do not have to be re-written or updated, although updating to the new semantic specialization labels is recommended for existing and new NUOPC caps. The older IPD version based approach is supported for backward compatibility. \r\n    *   The NUOPC layer now provides features for [resource control and handling of threaded components](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00037000000000000000). This mechanism supports mixing of hybrid MPI+OpenMP components with different threading levels and mixing with standard MPI components on the same processing elements (PEs), i.e. cores. It allows each component to fully utilize HPC resources independently. Coupling between threaded components is supported automatically via the standard NUOPC Connectors.\r\n    *   The [external NUOPC interface](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00038000000000000000) that supports interaction between an entire NUOPC application and a layer outside of NUOPC (e.g. a Data Assimilation system) was further refined. The associated prototype code ([ExternalDriverAPIProto](https://github.com/esmf-org/nuopc-app-prototypes/tree/main/ExternalDriverAPIProto)) has been updated to reflect the current status.\r\n    *   The NUOPC Profiling attribute, available in the [Driver Metadata](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00033100000000000000), [Model Metadata](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00033200000000000000), [Mediator Metadata](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00033300000000000000), and [Connector Metadata](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00033400000000000000), has been re-implemented. The NUOPC layer profiling features now integrate with the [ESMF profiling infrastructure](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node6.html#SECTION060130000000000000000).\r\n    *   The [NUOPC transfer protocol for geometry objects](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00034600000000000000) (Grid, Mesh, LocStream) has been made more efficient. Geometries used for multiple Fields are only transferred once, reducing the initialization overhead associated with the transfer.\r\n    *   Several optimizations were implemented in the NUOPC layer to reduce overhead.  All applications using NUOPC benefit from these optimizations without requiring code changes.\r\n    *   Added the `creep_nrst_d `value to the <code>extrapMethod </code>[NUOPC connection options](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/NUOPC_refdoc/node3.html#SECTION00034400000000000000). This is equivalent to the ESMF_EXTRAPMETHOD_CREEP_NRST_D option in ESMF_FieldRegridStore() discussed below.\r\n*   Added the [extrapolation option: CREEP_FILL](https://earthsystemmodeling.org/esmpy_doc/release/ESMF_8_1_0/html/ExtrapMethod.html) to ESMPy. This option fills unmapped destination points by repeatedly moving data from mapped locations to neighboring unmapped locations.\r\n*   The implementation of the ESMF_StateReconcile() method was redesigned to improve performance, and scalability. Most users do not interact with this method directly, however, the NUOPC initialization time has been reduced as a consequence, which is most pronounced in applications with large Field and PET counts.\r\n*   Added a new extrapolation method called \"nearest destination\" to the regrid weight generation system. This capability fills destination points that were not filled by an initial regridding by using the nearest regridded destination point. The nearest destination method is accessible by specifying the extrapMethod=[ESMF_EXTRAPMETHOD_NEAREST_D](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node9.html#SECTION090117000000000000000) option in any of the ESMF_*RegridStore() methods or the --extrap_method nearestd option when using the ESMF_RegridWeightGen application).\r\n*   Added a new extrapolation method called \"creep nearest destination\" to the regrid weight generation system. This capability fills destination points that were not filled by an initial regridding by first applying a creep fill extrapolation and then filling the remaining unmapped destination points using nearest destination extrapolation. The creep nearest destination method is accessible by specifying the extrapMethod=[ESMF_EXTRAPMETHOD_CREEP_NRST_D](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node9.html#SECTION090117000000000000000) option in any of the ESMF_*RegridStore() methods or the --extrap_method creepnrstd option when using the ESMF_RegridWeightGen application).\r\n*   The creep fill extrapolation has been optimized so that it uses less memory per level extrapolated. This allows the creep fill method to extrapolate several times further into unmapped parts of the destination Field. \r\n*   Added the optional checkFlag argument to [ESMF_FieldRegridStore()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050366000000000000000). The intention behind this flag is to allow the user to turn on more expensive error checking that may not be appropriate for an operational run. Initially this flag turns on a check for grid self-intersection during conservative regridding.\r\n*   The [ESMF_MeshGet()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION0501041700000000000000) call has been expanded to allow the user to query a full set of information for most Meshes. The exception is 2D Meshes with cells of more than four sides for which the element information (e.g. element connectivity) is not yet available.\r\n*   A new shared memory feature was introduced that allows sharing of decomposition elements (DEs) between PETs that execute on the same single system image (SSI), i.e. node. This feature provides an efficient way to access data by reference between components that are running on the same PEs (cores), but with different threading levels. Both [Field-level DE sharing](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050331000000000000000) and [Array-level DE sharing](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node5.html#SECTION050521300000000000000) are supported.\r\n*   Key-value pair storage was added to the ESMF_Mesh and ESMF_LocStream classes through the overloaded [ESMF_InfoGetFromHost()](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_refdoc/node6.html#SECTION060241600000000000000) method.\r\n*   A section discussing \u201c[Debugging of ESMF User Applications](https://earthsystemmodeling.org/docs/release/ESMF_8_1_0/ESMF_usrdoc/node8.html)\u201d has been added to the User\u2019s Guide. This section is designed to help users interpret error traces and efficiently locate issues in failing ESMF applications.\r\n\r\n## Known Bugs\r\n\r\n\r\n\r\n*   FieldBundles don't currently enforce that every contained Field is built on the same Grid, Mesh, LocStream, or XGrid object, although the documentation says that this should be so.\r\n*   The packed FieldBundle implementation uses a concatenated string to create a base object. When this string has more than 255 characters, e.g. a large number of Fields with long individual names is packed, the base object is not created correctly resulting in incorrect behavior at the FieldBundle level.\r\n*   When the [ESMF regrid weight generation methods and applications](https://earthsystemmodeling.org/docs/release/latest/ESMF_usrdoc/node15.html#glos:RegridWeightGenerationMethodsAndApplications) are used with nearest destination to source interpolation method, the unmapped destination point detection does not work. Even if the option is set to return an error for unmapped destination points (the default) no error will be returned.\r\n*   The [ESMF regrid weight generation methods and applications](https://earthsystemmodeling.org/docs/release/latest/ESMF_usrdoc/node15.html#glos:RegridWeightGenerationMethodsAndApplications) do not currently work for source Fields created on Grids which contain a DE of width less than 2 elements. For conservative regridding the destination Field also has this restriction.\r\n*   The [ESMF regrid weight generation methods and applications](https://earthsystemmodeling.org/docs/release/latest/ESMF_usrdoc/node15.html#glos:RegridWeightGenerationMethodsAndApplications) do not currently work on Fields created on Grids with arbitrary distribution.\r\n* When using the ESMF_RegridWeightGen application to generate conservative weights for a Mesh with > 16 million cells, the weight file produced has some of its factors scrambled in a subtle way. This can lead to higher than usual conservation error (>1.0E-7).\r\n* When pole extrapolation is used during regridding operations and a quadrilateral cell that degenerates into a triangle is in the top or bottom row of the grid, the error \"Condition {etopo->num_nodes == 4} failed...\" is incorrectly returned.\r\n*   The ESMF_GridCreate() interface that allows the user to create a copy of an existing Grid with a new distribution will give incorrect results when used on a Grid with 3 or more dimensions and whose coordinate arrays are less than the full dimension of the Grid (i.e. it contains factorized coordinates).\r\n*   The ESMF_XGrid construction can lead to degenerate cells for cases where the source and destination grids have edges that are almost the same. Often these cells don't produce weights and are benign, but when weights are produced can lead to low accuracy results when transferring data to/from the XGrid.\r\n* When any of the Redist() methods are used inside a VMEpoch, the execution crashes with an MPI error.\r\n*  The OpenMP thread count is being reset to 1 within all ESMF components. This affects user code that leverages OpenMP threading inside of components, and uses the OMP_NUM_THREADS environment variable to set the desired number of OpenMP threads. As a consequence the expected speed up from OpenMP threading in user code will not be present.\r\n*  The PETs of all ESMF components, and any potentially created OpenMP threads under such PETs, are pinned to the PE on the respective shared memory node, corresponding to the PET number. As a consequence, even if a user overcomes the OpenMP thread count reset to 1 bug, e.g. by using omp_set_num_threads() API directly, the performance of OpenMP threaded user code is far below that of the expected speed up.\r\n\r\n    **Platform-specific bugs:**\r\n\r\n*   The GNU and Intel compilers require GCC>=4.8 for C++11 support (Intel uses the GCC headers). By default ESMF now uses the C++11 standard and cannot be downgraded. If you run into build issues due to the C++11 dependency, you must make sure a GCC>=4.8 is loaded.\r\n*   For GNU compilers GCC>=10.x, the default Fortran argument mismatch checking has become stricter. This results in build failures in some of the code that comes with ESMF. Setting environment variable ESMF_F90COMPILEOPTS=\"-fallow-argument-mismatch -fallow-invalid-boz\", during the ESMF build, can be used as a work around for this issue.\r\n*   On Darwin, with the GNU gfortran+gcc combination, when building MPICH3 from source, it is important to specify the \"--enable-two-level-namespace\" configure option. By default, i.e. without this option, on Darwin, the produced MPICH compiler wrappers include a linker flag (-flat_namespace) that causes issues with C++ exception handling. Building and linking ESMF applications with MPICH compiler wrappers that specify this linker option leads to \u201cmysterious\u201d application aborts during execution.\r\n*   On Darwin, with the Intel Fortran compiler, command line arguments cannot be accessed from ESMF applications when linked against the shared library version of libesmf. There is no issue when linked against the static libesmf.a version. Setting environment variable ESMF_SHARED_LIB_BUILD=OFF, during the ESMF build, can be used as a work around for this issue.\r\n*   Currently the ESMPy interface to retrieve regridding weights from Python is only supported under the GNU compiler. On all other compilers the method will flag an error.\r\n*   There is an issue with intercepting the MPI calls for profiling on some of the supported platforms. This results in a single FAIL reported for ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    *   Catania: Darwin+GNU+MPICH3\r\n    *   Gaea: Unicos+GNU+cray-mpich\r\n*   There is an issue with loading the `libesmftrace_preload.so `library on some of the supported platforms. This results in a reported CRASH for ESMF_TraceIOUTest.F90 and ESMF_TraceMPIUTest.F90. The affected platforms are:\r\n    *   Discover: Linux+GNU+intelmpi\r\n    *   Gaea: Unicos+Intel+cray-mpich\r\n    *   Gaea: Unicos+Intel+mpiuni\r\n    *   Orion: Linux+GNU+mpiuni\r\n"}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/27968125", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/27968125/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/27968125/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/ESMF_8_0_1", "id": 27968125, "author": {"login": "theurich", "id": 4564784, "node_id": "MDQ6VXNlcjQ1NjQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4564784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theurich", "html_url": "https://github.com/theurich", "followers_url": "https://api.github.com/users/theurich/followers", "following_url": "https://api.github.com/users/theurich/following{/other_user}", "gists_url": "https://api.github.com/users/theurich/gists{/gist_id}", "starred_url": "https://api.github.com/users/theurich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theurich/subscriptions", "organizations_url": "https://api.github.com/users/theurich/orgs", "repos_url": "https://api.github.com/users/theurich/repos", "events_url": "https://api.github.com/users/theurich/events{/privacy}", "received_events_url": "https://api.github.com/users/theurich/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTI3OTY4MTI1", "tag_name": "ESMF_8_0_1", "target_commitish": "master", "name": "ESMF 8.0.1", "draft": false, "prerelease": false, "created_at": "2020-05-15T19:47:23Z", "published_at": "2020-06-26T17:25:22Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/ESMF_8_0_1", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/ESMF_8_0_1", "body": "## Overview\r\nThe 8.0.1 release fulfills two purposes: to patch a number of bugs discovered in 8.0.0, and to introduce a small selection of critical new performance features. These features were needed by operational centers in an official release that is fully backward compatible with 8.0.0. No bit-for-bit changes from ESMF regridding functions are expected in 8.0.1 relative to release 8.0.0.\r\n \r\nOne of the performance improvements introduced by ESMF 8.0.1 is message aggregation on the ESMF_VM level. This mechanism significantly improves the efficiency of inter-component data exchanges, especially in situations where there is an imbalance between the sending and receiving side. The imbalance can either be in the total number of sending vs receiving PETs, or in the timing, where the receiving PETs arrive at the exchange late, and out of sync with the sending PETs. The feature is automatically leveraged by the NUOPC level when executing the NUOPC_Connector between components on disjoint sets of PETs.\r\n \r\nThe other performance improvement added is on the ESMPy level. ESMPy now supports writing/reading of ESMF RouteHandles to/from file. This allows a user to perform the costly RouteHandle generation once, and re-use it in subsequent runs. This provides a more efficient approach to Regridding in the situation where the number of PETs does not change between runs.\r\n\r\n## Release Notes\r\n\r\n- This release is backward compatible with ESMF 8.0.0. Two new interfaces were added to the Fortran API: ESMF_VMEpochEnter() and ESMF_VMEpochExit().\r\n- No bit-for-bit changes are expected for this release compared to ESMF 8.0.0. This has been verified for a large number of regridding tests with Intel compilers using flags \"-O2 -fp-model precise\".\r\n- No changes were made to the [ESMF regrid weight generation methods and applications](http://earthsystemmodeling.org/docs/release/ESMF_8_0_1/ESMF_usrdoc/node14.html#glos:RegridWeightGenerationMethodsAndApplications). The ESMF tables summarizing the ESMF [regridding status](http://earthsystemmodeling.org/regrid/#regridstatus) are unchanged.\r\n- The ESMF Virtual Machine (ESMF_VM) now supports message aggregation to improve performance for some very common communication patterns. Two new methods, ESMF_VMEpochEnter() and ESMF_VMEpochExit(), allow explicit use of this feature.\r\n- The generic NUOPC_Connector automatically takes advantage of VMEpoch message aggregation when used between components on disjoint petLists.\r\n- The ability to write/read ESMF RouteHandles to/from file was added to the ESMPy layer. This allows a user to perform the costly RouteHandle generation once, and re-use it in subsequent runs. This provides a more efficient approach to Regridding in the situation where the number of PETs does not change between runs.\r\n- The pole_kind parameter was added to allow specification of pole behavior when creating an ESMPy Grid.\r\n\r\n## Known Bugs\r\n\r\n- Same as ESMF_8_0_0 with the following exceptions:\r\n  - The race condition in the ESMF_FileRegrid() method and ESMF_Regrid application has been fixed. Now if the destination grid is a multi-tile grid in GRIDSPEC MOSAIC format and the tile is distributed into multiple PETs, the regridded field is written correctly into the output file.\r\n  - Applying the sparse matrix multiplication to cases where the local data allocation is above the 32-bit limit now works reliably.\r\n  - The ESMF_GridCreate1PeriDim() method can now be used to create a bipole connection on the lower side.\r\n  - The ESMF_ArrayCreate() method now succeeds when called from inside a component, requesting DE sharing.\r\n  - The ESMF_DistGridGet() method now correctly returns \"de\" and \"tile\" information for a \"localDe\".\r\n  - ESMF now correctly links against the Fortran bindings of NetCDF, even when the C and Fortran bindings of NetCDF are provided in different locations.\r\n  - The ESMF install target now reliably works when installing ESMF into a location that is shared with other library installations.\r\n  - The Darwin.intelclang.default build configuration now works correctly.\r\n- Platform-specific bugs:\r\n  - The same as ESMF_8_0_0 with the following exceptions:\r\n    - The GNU and Intel compilers require GCC>=4.8 for C++11 support (Intel uses the GCC headers). By default ESMF now uses the C++11 standard and cannot be downgraded. If you run into build issues due to the C++11 dependency, you must make sure a GCC>=4.8 is loaded.\r\n"}
{"url": "https://api.github.com/repos/esmf-org/esmf/releases/32471798", "assets_url": "https://api.github.com/repos/esmf-org/esmf/releases/32471798/assets", "upload_url": "https://uploads.github.com/repos/esmf-org/esmf/releases/32471798/assets{?name,label}", "html_url": "https://github.com/esmf-org/esmf/releases/tag/ESMF_8_0_0", "id": 32471798, "author": {"login": "rsdunlapiv", "id": 3218838, "node_id": "MDQ6VXNlcjMyMTg4Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/3218838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsdunlapiv", "html_url": "https://github.com/rsdunlapiv", "followers_url": "https://api.github.com/users/rsdunlapiv/followers", "following_url": "https://api.github.com/users/rsdunlapiv/following{/other_user}", "gists_url": "https://api.github.com/users/rsdunlapiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsdunlapiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsdunlapiv/subscriptions", "organizations_url": "https://api.github.com/users/rsdunlapiv/orgs", "repos_url": "https://api.github.com/users/rsdunlapiv/repos", "events_url": "https://api.github.com/users/rsdunlapiv/events{/privacy}", "received_events_url": "https://api.github.com/users/rsdunlapiv/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTMyNDcxNzk4", "tag_name": "ESMF_8_0_0", "target_commitish": "develop", "name": "ESMF 8.0.0", "draft": false, "prerelease": false, "created_at": "2019-10-11T12:50:52Z", "published_at": "2020-10-12T20:57:17Z", "assets": [], "tarball_url": "https://api.github.com/repos/esmf-org/esmf/tarball/ESMF_8_0_0", "zipball_url": "https://api.github.com/repos/esmf-org/esmf/zipball/ESMF_8_0_0", "body": "# Overview\r\n\r\nThe ESMF 8.0.0 release concludes another phase of evolving and improving the library. The number of applications in which the library is used continues to grow. Requirements from these applications shaped and guided the developments included in this release.\r\n \r\nThe four typical ways of using ESMF have not changed: 1) to create high-performance, interoperable component-based modeling systems; 2) as a source of data communication, time management, metadata handling, and other libraries; 3) as a fast, parallel generator of interpolation weights from file for many different grids (see the [ESMF_RegridWeightGen application website](https://www.earthsystemcog.org/projects/regridweightgen/)); and 4) as a Python grid remapping library (see the [ESMPy website](https://www.earthsystemcog.org/projects/esmpy/)).\r\n \r\nHighlights of 8.0.0 include improved component timing profiles and the introduction of a community based NUOPC Field Dictionary. Further extensions to the NUOPC layer include improved performance, and support for driving a NUOPC system from a higher level such as a data assimilation (DA) system. The ESMPy interface now offers in-memory weight access, and the ESMF regridding implementation was extended to include \"creep-fill\" extrapolation. Core ESMF data classes were extended: A C interface was added to ESMF_XGrid, the creation and use of ESMF_Mesh has been simplified, ESMF_FieldBundles can be created for packed data allocations, and a shared memory access capability was added to ESMF_Array.\r\n \r\nMore details of the highlighted items are provided in the following paragraphs for convenience.\r\n \r\nThe tracing capability that was introduced in the previous release now supports a simple mechanism to generate component timing profiles in text files. A single summary timing file can be generated at the end of a run that provides timing statistics across all the PETs. This provides a simple way to understand the relative cost (in terms of wall clock time) of each component in a coupled application.\r\n \r\nManagement of the NUOPC Field Dictionary has been made more flexible. The dictionary can now be loaded from file during run-time. A community version of the NUOPC Field Dictionary resides in a dedicated [public repository](https://github.com/ESCOMP/NUOPCFieldDictionary) and can evolve independently of the NUOPC Layer. \r\n \r\nThe NUOPC layer now supports situations where a NUOPC system is driven by a higher level driver (outside of NUOPC). One application of this feature is the ability to integrate NUOPC-based forecast systems (such as UFS) with DA systems that require their own driver layer (such as JEDI). Further the NUOPC run sequence was extended to support switching between different run sequence sections during execution. For example, this capability allows changing which components are active at different stages during a run. The overall performance of the NUOPC layer was improved by eliminating unnecessary synchronization, allowing greater opportunity for component concurrency.\r\n \r\nThe ESMF regridding system was extended in several areas. The \"creep-fill\" extrapolation method was added to allow the user to spread data from mapped destination points to neighboring unmapped destination points. Regridding weights can now be returned through the ESMPy interface in-memory to eliminating the need to go through netCDF files when accessing weights from Python. The ESMF_Regrid application has been updated to support GRIDSPEC Mosaic files, and regridding on different stagger locations. The ESMF_RegridCheck external demo was added to test the ESMF_Regrid application and the ESMF regridding system with a collection of test grids and data sets.\r\n \r\nThe ESMF_XGrid interface was wrapped with ESMC bindings, providing simplified access to the ESMF exchange grid implementation through native interfaces from model code written in the C programming language. \r\n \r\nThe use of the unstructured mesh class, ESMF_Mesh, has been simplified. ESMF_Mesh objects can now be created directly from a structured ESMF_Grid object, using a simple ESMF_MeshCreate() call. Further, a Mesh object can now be queried for its mask and area information making this information accessible to model code that depends on it.\r\n \r\nThe ESMF_FieldBundle class was extended to cover the case where multiple Fields are packed into a single data allocation. Fields can be interleaved along any dimension of the packed data allocation. The current implementation of the packed feature is limited to cases where the user provides the data allocation to ESMF. Communication calls are supported going from a packed source FieldBundle to a packed destination FieldBundle, however, both sides must provide the same number of Fields, and the order of Fields must be the same on both sides. Further, the NUOPC layer does not currently support exchanging data via FieldBundles, packed or unpacked. Future ESMF releases are planned to address these limitations.\r\n \r\nThe ESMF_Array class now allows sharing of data between PETs that execute on the same single system image (SSI). This feature can be used for shared memory data access between components that run on the same set of compute nodes (i.e. same SSIs), but run with different number of PETs on each node. This situation is typically encountered when components use different number of threads under each PET. Exchanging data by shared memory access is usually more efficient than having to transfer the data between PETs.\r\n \r\nThere are many other features and options added throughout ESMF, detailed in the release notes (see link below). Backward compatibility of the Fortran user interface with the ESMF 5.2.0r release series was preserved for methods that are labeled backward compatible in the Reference Manual; the majority of methods fall into this category.\r\n\r\n# Release Notes\r\n\r\n- This release is backward compatible with the last release, ESMF 7.1.0r, for all the interfaces that are marked as backward compatible in the Reference Manual. There were API changes to a few unmarked methods that may require minor modifications to user code that uses these methods. A number of new interfaces were added. The entire list of API changes is summarized in a table showing interface changes since ESMF_7_1_0r, including the rationale and impact for each change.\r\n- Some bit-for-bit changes are expected for this release compared to the last release, ESMF 7.1.0r. We observe the following impact with Intel compilers using \"-O2 -fp-model precise\":\r\n  - Roundoff level differences in conservative regridding due to an improvement in an area calculation algorithm\r\n  - Roundoff level differences in regridding when used on a Mesh created from a SCRIP format file that contains longitudes <=0 degrees. This change was due to removing a conversion for non-positive longitudes to improve consistency\r\n  - Minor differences in 2nd order conservative regridding for cells that protrude outside their neighbors (e.g. a peninsula made up of a single cell) due to a bug fix in the weight calculation algorithm for that regridding method\r\n- Tables summarizing the ESMF regridding status have been updated. These include supported grids and capabilities of the offline and integrated regridding, and numerical results of some specific test cases.\r\n- Added an option to output component timing profiles in text format by setting the ESMF_RUNTIME_PROFILE environment variable. ESMF and NUOPC component phases are automatically instrumented and user-defined timed regions are also supported. Timing profiles can be written to the end of the ESMF PET log files, to separate per-PET text files, and/or to a single timing summary file. The summary file provides timing statistics across all the PETs. This provides a simple way to understand the relative cost (in terms of wall clock time) of each component in a coupled application.\r\n- The NUOPC Layer contained in this release has been improved in the following specific technical areas:\r\n  - The NUOPC Field Dictionary can now be ingested from a community-based YAML file which resides in a dedicated public repository and can evolve independently of the NUOPC Layer. YAML Ain't Markup Language (YAML) is a human friendly, Unicode-based data serialization language for all programming languages.\r\n  - A NUOPC_Driver can now be called from a higher level driver outside of NUOPC, going through an ESMF API. This is useful for systems that come with their own driver layer, but need to drive a NUOPC system (e.g. Data Assimilation).\r\n  - The NUOPC run sequences now supports the \"*\" wildcard character in the \"@\" timestep syntax. This allows the timestep length to be set in code via driver specialization for run sequences ingested from a text file.\r\n  - NUOPC now allows switching between different run sequence sections during execution. For example, this capability allows changing which components are active at different stages during a run. To enable this, the NUOPC_DriverIngestRunSequence() method now supports specification of a run duration, run sequence concatenation, and component run sequence elements outside loops.\r\n  - ConnectionOptions is now an official NUOPC level Connector attribute. The attribute is read during RunSequence ingestion (for each Connector line), and appended by default to all of the CplList entries of the Connector.\r\n- The NUOPC_DriverAddComp() method now supports adding components with a SetVM() method, allowing the component to configure its own VM, e.g. for PET idling for PE reuse under threaded PETs.\r\n- Fields that are mirrored now arrive on the acceptor side with attributes set to reflect information about the provider side Field (TypeKind, GeomLoc, MinIndex, MaxIndex, ArbDimCount, GridToFieldMap, UngriddedLBound, UngriddedUBound). These attributes can then be used when creating Fields on the acceptor side.\r\n  - The NUOPC Mesh transfer protocol was extended to correctly transfer either the node DistGrid, the element DistGrid, or both if present on the provider Mesh.\r\n  - Completed the implementation of the sharing protocol. Whether to share the GeomObject and/or Field are now independent decisions, and all four possible combinations are supported. Sharing is available through component hierarchies and supports nested states (e.g. to use the Namespace and/or CplSet features of NUOPC).\r\n  - The sharing protocol now checks whether the combination of provider and acceptor VMs allows Fields and/or GeomObjects to be shared between them and properly sets the share status attributes.\r\n  - The generic Connector was optimized to also reuse Redist RouteHandles for Fields built on Meshes and LocStreams. Previously only the Redist for Fields built on Grids was optimized in this manner. Interleaving Redist and Regrid Field pairs is supported as before.\r\n  - Implemented a communication optimized approach to propagating Field timestamps during Connector Run() to remove unnecessary synchronization between PETs. Only real data dependencies remain.\r\n  - The NUOPC timestamp definition has been extended to include the ESMF calendar kind for more accurate timestamp validation between components.\r\n  - Improved, standardized, and documented Verbosity attribute handling across all NUOPC generic component kinds. Preset Verbosity levels are available: \"off\", \"low\", \"high\", and \"max\".\r\n  - The Diagnostic attribute option has been implemented across all NUOPC generic component kinds. This attribute allows the user to specify when Fields contained in the importState and exportState of a component are dumped to file when entering and exiting component methods (Initialize/Run/Finalize).\r\n  - Several new NUOPC prototype (example) codes have been added:\r\n    - AtmOcnCplSetProto demonstrates the use of the CplSet feature to support coupling multiple independent sets of Fields between components (e.g., multi-domain coupling).\r\n    - AtmOcnLogNoneProto demonstrates the option to turn off ESMF PET log files completely.\r\n    - AtmOcnMirrorFieldsProto demonstrates the NUOPC Field mirroring protocol.\r\n    - CustomFieldDictionaryProto demonstrates the use of an external YAML file to populate the NUOPC Field Dictionary.\r\n    - ExternalDriverAPIProto demonstrates how an external layer can drive a NUOPC driver component going through ESMF.\r\n    - SingleModelOpenMPProto demonstrates the use of OpenMP threading inside a NUOPC model component and resource allocation through the generic SetVM method.\r\n- The following capabilities were added to the ESMF Python interface (ESMPy):\r\n  - Added an in-memory weight generation option to the Regrid class, allowing re-use of weight vectors without writing them to netCDF. The weight arrays can be returned as NumPy objects or Python dictionary of weight vectors. This allows retrieval of the weights by source and destination key/value pairs.\r\n- The ESMF_Regrid application now supports additional options, and one option was removed:\r\n  - Added --srcdatafile, --dstdatafile, and --tilefile_path options to support the GRIDSPEC Mosaic file format.\r\n  - Added the --dst_loc option to support regridding on different stagger locations when the destination grid is in UGRID format and the regridding method is non-conservative.\r\n  - Added the --check option to check the regridding results using a synthetic field, generated by an analytic function.\r\n  - Removed the --user_areas option because none of the currently supported file formats provide user areas.\r\n- Added new features to the ESMF_FileRegrid() method and the ESMF_Regrid application:\r\n  - Regridding of multiple variables\r\n  - Multi-tile GRIDSPEC Mosaic file format with data stored in separate files, one per tile\r\n  - 2nd order conservative regridding\r\n  - Regridding to the corner stagger location if the regridding method is non-conservative and the destination file is in UGRID format\r\n- Added new features to the ESMF_RegridWeightGen application:\r\n  - 1D network topology support in UGRID format\r\n  - 2D Cartesian grid in CF Single Tile file format\r\n  - Creep fill added as an extrapolation method\r\n- Added a new extrapolation method called \"creep fill\" to the entire regrid weight generation system. This capability allows the user to spread data from mapped destination points to neighboring unmapped destination points. This action can be repeated for a number of levels where at each level the data is spread from filled to neighboring unfilled points. The creep fill method is accessible by specifying the extrapMethod=ESMF_EXTRAPMETHOD_CREEP option in any of the ESMF_*RegridStore() methods or the --extrap_method creep option when using the ESMF_RegridWeightGen application).\r\n- Additional regridding methods are now supported when ESMF_Mesh is switched to be based on DOE's MOAB mesh library. The new supported regrid methods are: bilinear (when the source Field is not built on Grid), and nearest neighbor. All extrapolation methods, except for \"creep fill\" are supported.\r\n- RouteHandles can now be written to file via ESMF_RouteHandleWrite() and read back into memory (on the same number of PETs) via ESMF_RouteHandleCreate(). This provides an opportunity to lower the initialization cost e.g. for short production runs that repeatedly require regridding between the same grids.\r\n- The ESMF_GridCreateCubedSphere() and ESMF_GridCreateMosaic() methods now support irregular decompositions.\r\n- The ESMF_GridCreateCubedSphere() method can now apply the Schmidt transformation on the coordinates.\r\n- The ESMF_GridCreateMosaic() and the ESMF_GridCreate() method that reads a grid from file now support different coordinate typekinds.\r\n- The ESMF_GridCreate() method now automatically determines the correct file format if it was not explicitly specified as an argument.\r\n- The ESMF_GridCreate() method now supports grid creation from a GRIDSPEC Mosaic supergrid tile file.\r\n- The ESMF_LocStreamCreate() method now supports 1D network topology in UGRID format.\r\n- Added the capability to create an unstructured Mesh object from a structured Grid object. This allows components that internally work with a Mesh (e.g. a generic Mesh based mediator) to construct a Mesh from a transferred Grid.\r\n- The ESMF_MeshGet() method has been extended to allow the user to get mask and area information from an unstructured Mesh object.\r\n- Wrapped the ESMF_XGrid methods with ESMC bindings, to make them easily available to applications implemented in C.\r\n- Added a new ESMF_FieldBundleCreate() method that allows the creation of a packed FieldBundle. This is an initial capability with some limitations that will be addressed in a future release. The method takes a pre-allocated Fortran array pointer containing the memory of a set of interleaved fields. This is often how sets of fields are structured in model code and this capability allows ESMF to reference this memory directly. Interleaving along any dimension is supported. Packed FieldBundles support communication methods including redistribution, sparse matrix multiplication, and regridding. Currently the number of fields on source and destination must be the same, and permutations of fields are not supported. This means that the order of fields on source and destination must agree.\r\n- Implemented the ESMF_DECOMP_SYMMEDGEMAX option for cases where the number of elements is not evenly divisible by the number of decomposition elements. This option assigns the largest number of elements to the two edge DEs. It then progresses by assigning a descending number of elements to DEs as the center of the decomposition is approached from both sides. This produces a decomposition that is identical to the decomposition the FV3 model uses for this situation.\r\n- The ESMF_Array class now allows sharing of DEs between PETs that run on the same single system image (SSI). This feature can be used for shared memory data access between components running on different number of PETs (e.g. for threading) but are located on the same SSI.\r\n- The ESMF_Config class API has been extended. The ESMF_ConfigCreate() method now supports creating a Config object from a subsection of an existing Config object. This feature allows the consolidation of the content of multiple Config objects into a single configuration file.\r\n- The YAML-CPP parser has been included in the ESMF distribution. It is active by default, but can be turned off by setting ESMF_YAMLCPP=OFF.\r\n- Added support for C++11 standard. ESMF builds with the compiler default, but switches to C++11 if ESMF_YAMLCPP is enabled (default). The new ESMF_CXXSTD environment variable can be used to explicitly switch to specific C++ standards.\r\n- Simplified the use of CMake for projects using ESMF by providing a FindESMF.cmake file. This file is located under the new cmake subdirectory. It parses the esmf.mk file of an ESMF installation, exposing ESMF build variables as global variables accessible by other CMake modules.\r\n- The ESMF regression test suite can now be used to validate a pre-installed ESMF installation. This can be done by setting the ESMF_TESTESMFMKFILE environment variable to ON, and pointing ESMFMKFILE to the esmf.mk file of the ESMF installation to be validated.\r\n- Added an external demo ESMF_RegridCheck to test the ESMF_Regrid application with a set of test grid and data sets. In all the test cases, the input variables were constructed using an analytic function and the regridded destination variables were compared with that function to calculate the mean relative errors.\r\n\r\n# Known Bugs\r\n\r\n- FieldBundles don't currently enforce that every contained Field is built on the same Grid, Mesh, LocStream, or XGrid object, although the documentation says that this should be so.\r\n- When the ESMF regrid weight generation methods and applications are used with nearest destination to source interpolation method, the unmapped destination point detection does not work. Even if the option is set to return an error for unmapped destination points (the default) no error will be returned.\r\n- The ESMF regrid weight generation methods and applications do not currently work for source Fields created on Grids which contain a DE of width less than 2 elements. For conservative regridding the destination Field also has this restriction.\r\n- The ESMF regrid weight generation methods and applications do not currently work on Fields created on Grids with arbitrary distribution.\r\n- There is a race condition in the ESMF_FileRegrid() method and the ESMF_Regrid application when the destination grid is of GRIDSPEC Mosaic format and >=12 PETs are used. This issue leads to intermittent failures in the external_demos tests for the GRIDSPEC_1x1_time_to_C48_mosaic_bilinear case when run on the 16 PET configuration.\r\n- Applying the sparse matrix multiplication to cases where the local data allocation is above the 32-bit limit will fail with a memory allocation error. This affects all Regrid(), Redist(), Halo(), and SMM() calls.\r\n- The ESMF_GridCreate() interface that allows the user to create a copy of an existing Grid with a new distribution will give incorrect results when used on a Grid with 3 or more dimensions and whose coordinate arrays are less than the full dimension of the Grid (i.e. it contains factorized coordinates).\r\n- Using the ESMF_GridCreate1PeriDim() method to create a grid with a bipole connection on the lower side (typically referring to the southern hemisphere) resulted in no connection there.\r\n- The ESMF_XGrid construction can lead to degenerate cells for cases where the source and destination grids have edges that are almost the same. Often these cells don't produce weights and are benign, but when weights are produced can lead to low accuracy results when transferring data to/from the XGrid.\r\n- The ESMF_ArrayCreate() crashes when used with pinflag=ESMF_PIN_DE_TO_SSI or pinflag=ESMF_PIN_DE_TO_SSI_CONTIG from within a component. The crash is from inside MPI with \"invalid communicator\". The \"pinflag\" option works correctly from the application level, i.e. in the context of the global VM.\r\n- Querying the ESMF_DistGridGet() method for \"de\" or \"tile\" information for a \"localDe\" will return incorrect results, and/or crash.\r\nESMF_AttributeWrite() has only been verified to work for ESMF standard Attribute packages. Non-standard Attribute packages may trigger a crash inside the ESMF_AttributeWrite() implementation.\r\n- For NetCDF installations that have the C and Fortran bindings installed in different locations, a NetCDF enabled build of ESMF does not correctly include the Fortran NetCDF library during linking.\r\n- When installing ESMF into a location that is shared with other libraries, it can happen that executing the ESMF install target fails with a \"permission denied\" error.\r\n- The Darwin.intelclang.default build configuration is broken.\r\n\r\n**Platform-specific bugs:**\r\n- The GNU and Intel compilers require GCC>=4.8 for C++11 support (Intel uses the GCC headers). By default ESMF now uses the C++11 standard. If you run into build issues due to the C++11 dependency, you can either (1) make sure a GCC>=4.8 is loaded, or (2) set ESMF_YAMLCPP=OFF. In the latter case the YAML-dependent features in ESMF will not be available.\r\n- For GNU compilers GCC>=10.x, the default Fortran argument mismatch checking has become stricter. This will result in build failures. Setting environment variable ESMF_F90COMPILEOPTS=\"-fallow-argument-mismatch -fallow-invalid-boz\", during the ESMF build, can be used as a work around for this issue.\r\n- On some systems with the PGI compiler, there is an issue with shared memory pointers between PETs on the same SSI. We see failures or crashes for Array tests that exercise this feature (ESMF_ArraySharedDeSSISTest.F90, ESMF_ArrayCreateGetUTest.F90) on the following platforms:\r\n  - Hera/PGI-18.10.1\r\n  - Gaea/PGI-16.5.0\r\n  - Electra/PGI-17.1.0\r\n  - Pleiades/PGI-17.1.0\r\n  - Summitdev/PGI-19.7.0\r\nHowever, we do not observe these failures or crashes on:\r\n  - Discover/PGI-14.1.0\r\n  - Discover/PGI-17.7.0\r\n- On Summitdev/PGI-19.7.0 we see ESMF_XGridUTest.F90 unit test failures due to erroneously produce weights for source and destination grids that have edges that are almost the same.\r\n- On Discover/PGI-14.1.0 the ESMF_FieldRegridUTest.F90 and ESMF_FieldBundleCrGetUTest.F90 unit tests are failing.\r\n- Currently the ESMPy interface to retrieve regridding weights from Python is only supported under the GNU compiler. On all other compilers the method will flag an error.\r\n- On Darwin, with the Intel Fortran compiler, command line arguments cannot be accessed from ESMF applications when linked against the shared library version of libesmf. There is no issue when linked against the static libesmf.a version. Setting environment variable ESMF_SHARED_LIB_BUILD=OFF, during the ESMF build, can be used as a work around for this issue.\r\n- On some systems with the Cray compiler (CCE version 8.x), the ESMF library fails to build. The error can be prevented by setting the ESMF build environment variable ESMF_MOAB=OFF."}
