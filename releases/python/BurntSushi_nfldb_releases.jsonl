{"url": "https://api.github.com/repos/BurntSushi/nfldb/releases/445164", "assets_url": "https://api.github.com/repos/BurntSushi/nfldb/releases/445164/assets", "upload_url": "https://uploads.github.com/repos/BurntSushi/nfldb/releases/445164/assets{?name,label}", "html_url": "https://github.com/BurntSushi/nfldb/releases/tag/0.2.0", "id": 445164, "author": {"login": "BurntSushi", "id": 456674, "node_id": "MDQ6VXNlcjQ1NjY3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/456674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BurntSushi", "html_url": "https://github.com/BurntSushi", "followers_url": "https://api.github.com/users/BurntSushi/followers", "following_url": "https://api.github.com/users/BurntSushi/following{/other_user}", "gists_url": "https://api.github.com/users/BurntSushi/gists{/gist_id}", "starred_url": "https://api.github.com/users/BurntSushi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BurntSushi/subscriptions", "organizations_url": "https://api.github.com/users/BurntSushi/orgs", "repos_url": "https://api.github.com/users/BurntSushi/repos", "events_url": "https://api.github.com/users/BurntSushi/events{/privacy}", "received_events_url": "https://api.github.com/users/BurntSushi/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQ0NTE2NA==", "tag_name": "0.2.0", "target_commitish": "master", "name": "Materialized view for `play`. `Query` demolition.", "draft": false, "prerelease": true, "created_at": "2014-07-22T23:21:48Z", "published_at": "2014-07-22T23:42:20Z", "assets": [], "tarball_url": "https://api.github.com/repos/BurntSushi/nfldb/tarball/0.2.0", "zipball_url": "https://api.github.com/repos/BurntSushi/nfldb/zipball/0.2.0", "body": "This is a new release of `nfldb` that brings major changes to the \nimplementation and one small change that could break your code:\n\nATTN: This introduces a breaking change. The `team` field can no longer\nbe used in the `play` method. Instead, you should use the new\n`play_player` method to select individual player statistics belonging to\na specific team.\n\nOnce you update, the next time you connect to `nfldb`, your database will be \nmigrated to include the `agg_play` table. You should see some messages printed \nto your terminal. You should not have to do anything other than wait a few \nmoments while the operation completes.\n\nOtherwise, there are very few public facing changes, but the entire\nguts of `nfldb.Query` have been ripped out and replaced with more\nrobust SQL generation code. Moreover, several idiosyncracies have been\nfixed and some unit tests have finally been added.\n1. Previously, the `Query` class was doing some very clever things to do\n   parts of a JOIN in Python code. The general flow was that filtering\n   was applied to find primary keys---never using any JOINs---and once\n   all criteria had been applied, those ids were used in a simple SELECT\n   to fetch the actual rows.\n   \n   Now all of that cruft has been removed and replaced with intelligent\n   SQL generation that constructs one query with all the proper JOINs.\n   For whatever reason, I thought this was slower when experimenting\n   with it when I first started nfldb. Perhaps my indexes weren't\n   configured properly then. In any case, I can't really see much\n   performance difference.\n2. The SQL generation code is very smart. Although it is not part of\n   nfldb's public API, I imagine it would be very useful if you had some\n   special needs. See the unexported but documented `nfldb.sql` module.\n3. Many idiosyncracies resulting from doing a join in Python are now\n   completely gone. For example, if you tried to apply a `sort` with a\n   `limit` with complex search criteria, you were bound to get wrong\n   answers. For example, if you tried sorting by both a column on the\n   `week` table (like `down`) and a column on `play_player` (like\n   `passing_tds`) and applied a limit to it, the results would be\n   completely wonky because the pure Python join can't cope with it\n   performantly. A regular SQL join? Piece of cake.\n4. I have added a materialized view `agg_play`. This is a fancy word for\n   \"a table that automatically updates itself.\" In essence, whenever a\n   new row is added to `play_player`, aggregate statistics for that play\n   are re-computed. This makes adding data slower (which doesn't happen\n   very frequently), but it makes querying data much faster and easier.\n   For example, plays can be queried for `passing_yds` without ever\n   joining with `play_player`. (Which is wonky because of the\n   one-to-many relationship.)\n   To reflect this clearer separation of concerns, the `Query.play`\n   method will no longer add criteria that hits the `play_player` table.\n   Instead, if you really want the `play_player` table, then you can use\n   the new `play_player` method. The only field that was accepted in the\n   `play` that is no longer allowed is the `team` and `player_id`\n   fields. This is because there is no sensible way to aggregate these\n   values into a single play.\n   \n   To the best of my knowledge, that is the only possible breaking\n   change here.\n"}
