{"url": "https://api.github.com/repos/beeware/rubicon-objc/releases/53310940", "assets_url": "https://api.github.com/repos/beeware/rubicon-objc/releases/53310940/assets", "upload_url": "https://uploads.github.com/repos/beeware/rubicon-objc/releases/53310940/assets{?name,label}", "html_url": "https://github.com/beeware/rubicon-objc/releases/tag/v0.4.2", "id": 53310940, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "RE_kwDOAYKd2s4DLXXc", "tag_name": "v0.4.2", "target_commitish": "29f8b8537e1c7a3c29e434c75cc7a741ddc38eff", "name": "v0.4.2", "draft": false, "prerelease": false, "created_at": "2021-11-13T23:41:52Z", "published_at": "2021-11-13T23:47:59Z", "assets": [], "tarball_url": "https://api.github.com/repos/beeware/rubicon-objc/tarball/v0.4.2", "zipball_url": "https://api.github.com/repos/beeware/rubicon-objc/zipball/v0.4.2", "body": "## Features\r\n\r\n* Added `autoreleasepool` context manager to mimic Objective-C `@autoreleasepool` blocks. (#213)\r\n\r\n* Allow storing Python objects in Objective-C properties declared with `@objc_property`. (#214)\r\n\r\n* Added support for Python 3.10. (#218)\r\n\r\n## Bugfixes\r\n\r\n* Raise `TypeError` when trying to declare a weak property of a non-object type. (#215)\r\n\r\n* Corrected handling of methods when a class overrides a method defined in a grandparent. (#216)\r\n", "reactions": {"url": "https://api.github.com/repos/beeware/rubicon-objc/releases/53310940/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}}
{"url": "https://api.github.com/repos/beeware/rubicon-objc/releases/46723329", "assets_url": "https://api.github.com/repos/beeware/rubicon-objc/releases/46723329/assets", "upload_url": "https://uploads.github.com/repos/beeware/rubicon-objc/releases/46723329/assets{?name,label}", "html_url": "https://github.com/beeware/rubicon-objc/releases/tag/v0.4.1", "id": 46723329, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQ2NzIzMzI5", "tag_name": "v0.4.1", "target_commitish": "d1ff4a7a1310a3fb639cd8acb66c1b9c6f798e01", "name": "v0.4.1", "draft": false, "prerelease": false, "created_at": "2021-07-25T02:16:29Z", "published_at": "2021-07-25T02:24:09Z", "assets": [], "tarball_url": "https://api.github.com/repos/beeware/rubicon-objc/tarball/v0.4.1", "zipball_url": "https://api.github.com/repos/beeware/rubicon-objc/zipball/v0.4.1", "body": "Features\r\n--------\r\n\r\n* Added official support for Python 3.9. (#193)\r\n\r\n* Added official support for macOS 11 (Big Sur). (#195)\r\n\r\n* Autorelease Objective-C instances when the corresponding Python instance is destroyed. (#200)\r\n\r\n* Improved memory management when a Python instance is assigned to a new `ObjCInstance` attribute. (#209)\r\n\r\n* Added support to declare weak properties on custom Objective-C classes. (#210)\r\n\r\nBugfixes\r\n--------\r\n\r\n* Fixed incorrect behavior of `Block` when trying to create a block with no arguments and using explicit types. This previously caused an incorrect exception about missing argument types; now a no-arg block is created as expected. (#153)\r\n\r\n* Fixed handling of type annotations when passing a bound Python method into `Block`. (#153)\r\n\r\n* A cooperative entry point for starting event loop has been added. This corrects a problem seen when using Python 3.8 on iOS. (#182)\r\n\r\n* Improved performance of Objective-C method calls and `ObjCInstance` creation in many cases. (#183)\r\n\r\n* Fix calling of signal handlers added to the asyncio loop with CFRunLoop integration. (#202)\r\n\r\n* Allow restarting a stopped event loop. (#205)\r\n\r\nDeprecations and Removals\r\n-------------------------\r\n\r\n* Removed automatic conversion of Objective-C numbers (`NSNumber` and `NSDecimalNumber`) to Python numbers when received from Objective-C (i.e. returned from an Objective-C method or property or passed into an Objective-C method implemented in Python). This automatic conversion significantly slowed down every Objective-C method call that returns an object, even though the conversion doesn't apply to most method calls. If you have code that receives an Objective-C number and needs to use it as a Python number, please convert it explicitly using `py_from_ns` or an appropriate Objective-C method.\r\n\r\n  As a side effect, `NSNumber` and `NSDecimalNumber` values stored in Objective-C collections (`NSArray`, `NSDictionary`) are also no longer automatically unwrapped when retrieved from the collection, even when using Python syntax to access the collection. For example, if `arr` is a `NSArray` of integer `NSNumber`, `arr[0]` now returns an Objective-C `NSNumber` and not a Python `int` as before. If you need the contents of an Objective-C collection as Python values, you can use `py_from_ns` to convert either single values (e.g. `py_from_ns(arr[0])`) or the entire collection (e.g. `py_from_ns(arr)`). (#183)\r\n\r\n* Removed macOS 10.12 through 10.14 from our automatic test matrix, due to pricing changes in one of our CI services (Travis CI). OS X 10.11 is still included in the test matrix for now, but will probably be removed relatively soon. Automatic tests on macOS 10.15 and 11.0 are unaffected as they run on a different CI service (GitHub Actions).\r\n\r\n  Rubicon will continue to support macOS 10.14 and earlier on a best-effort basis, even though compatibility is no longer tested automatically. If you encounter any bugs or other problems with Rubicon on these older macOS versions, please report them! (#197)\r\n\r\nMisc\r\n----\r\n\r\n* #185, #189, #194, #196, #208\r\n"}
{"url": "https://api.github.com/repos/beeware/rubicon-objc/releases/28214750", "assets_url": "https://api.github.com/repos/beeware/rubicon-objc/releases/28214750/assets", "upload_url": "https://uploads.github.com/repos/beeware/rubicon-objc/releases/28214750/assets{?name,label}", "html_url": "https://github.com/beeware/rubicon-objc/releases/tag/v0.4.0", "id": 28214750, "author": {"login": "github-actions[bot]", "id": 41898282, "node_id": "MDM6Qm90NDE4OTgyODI=", "avatar_url": "https://avatars.githubusercontent.com/in/15368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/github-actions%5Bbot%5D", "html_url": "https://github.com/apps/github-actions", "followers_url": "https://api.github.com/users/github-actions%5Bbot%5D/followers", "following_url": "https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/github-actions%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/github-actions%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/github-actions%5Bbot%5D/repos", "events_url": "https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/github-actions%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTI4MjE0NzUw", "tag_name": "v0.4.0", "target_commitish": "aa8cd0b463189df7a3d0f2bc7fa1b25d0e2aa531", "name": "v0.4.0", "draft": false, "prerelease": false, "created_at": "2020-07-04T03:04:18Z", "published_at": "2020-07-04T03:23:23Z", "assets": [], "tarball_url": "https://api.github.com/repos/beeware/rubicon-objc/tarball/v0.4.0", "zipball_url": "https://api.github.com/repos/beeware/rubicon-objc/zipball/v0.4.0", "body": "## Features\r\n\r\n  - Added macOS 10.15 (Catalina) to the test matrix. #145\r\n  - Added `517` and `518` build system metadata to pyproject.toml. #156\r\n  - Added official support for Python 3.8. #162\r\n  - Added a `varargs` keyword argument to send_message` to allow calling variadic methods more safely. #174\r\n  - Changed `ObjCMethod` to call methods using send_message` instead of calling IMP`s directly. This is mainly an internal change and should not affect most existing code, although it may improve compatibility with Objective-C code that makes heavy use of runtime reflection and method manipulation (such as swizzling). #177\r\n\r\n## Bugfixes\r\n\r\n  - Fixed Objective-C method calls in \"flat\" syntax accepting more arguments than the method has. The extra arguments were previously silently ignored. An exception is now raised if too many arguments are passed. #123\r\n  - Fixed `ObjCInstance.__str__ <rubicon.objc.api.ObjCInstance.__str__>` throwing an exception if the object's Objective-C `description` is `nil`. #125\r\n  - Corrected a slow memory leak caused every time an asyncio timed event handler triggered. #146\r\n  - Fixed various minor issues in the build and packaging metadata. #156\r\n  - Removed unit test that attempted to pass a struct with bit fields into a C function by value. Although this has worked in the past on x86 and x86\\_64, `ctypes` never officially supported this, and started generating an error in Python 3.7.6 and 3.8.1 (see [bpo-39295](https://bugs.python.org/issue39295)). #157\r\n  - Corrected the invocation of `NSApplication.terminate()` when the CocoaLifecycle` is ended. #170\r\n  - Fixed send_message` not accepting SEL` objects for the `selector` parameter. The documentation stated that this is allowed, but actually doing so caused a type error. #177\r\n\r\n### Improved Documentation\r\n\r\n  - Added detailed `reference documentation </reference/index>` for all public APIs of `rubicon.objc`. #118\r\n  - Added a `how-to guide for calling regular C functions </how-to/c-functions>` using `ctypes` and `rubicon.objc`. #147\r\n\r\n### Deprecations and Removals\r\n\r\n  - Removed the i386 architecture from the test matrix. It is still supported on a best-effort basis, but compatibility is not tested automatically. #139\r\n  - Tightened the API of send_message`, removing some previously allowed shortcuts and features that were rarely used, or likely to be used by accident in an unsafe way.      \r\n    In most cases, Rubicon's high-level method call syntax provided by ObjCInstance` can be used instead of send_message`. This syntax is almost always more convenient to use, more readable and less error-prone. send_message` should only be used in cases not supported by the high-level syntax.\r\n  - Disallowed passing class names as `str`/`bytes` as the `receiver` argument of send_message`. If you need to send a message to a class object (i. e. call a class method), use ObjCClass` or get_class` to look up the class, and pass the resulting ObjCClass` or Class` object as the receiver.\r\n  - Disallowed passing `~ctypes.c_void_p` objects as the `receiver` argument of send_message`. The `receiver` argument now has to be of type objc_id`, or one of its subclasses (such as Class`), or one of its high-level equivalents (such as ObjCInstance`). All Objective-C objects returned by Rubicon's high-level and low-level APIs have one of these types. If you need to send a message to an object pointer stored as `~ctypes.c_void_p`, `~ctypes.cast` it to objc_id` first.\r\n  - Removed default values for send_message`'s `restype` and `argtypes` keyword arguments. Every send_message` call now needs to have its return and argument types set explicitly. This ensures that all arguments and the return value are converted correctly between (Objective-)C and Python.\r\n  - Disallowed passing more argument values than there are argument types in `argtypes`. This was previously allowed to support calling variadic methods - any arguments beyond the types set in `argtypes` would be passed as varargs. However, this feature was easy to misuse by accident, as it allowed passing extra arguments to *any* method, even though most Objective-C methods are not variadic. Extra arguments passed this way were silently ignored without causing an error or a crash. To prevent accidentally passing too many arguments like this, the number of arguments now has to exactly match the number of `argtypes`. Variadic methods can still be called, but the varargs now need to be passed as a list into the separate `varargs` keyword arugment. #174\r\n  - Removed the `rubicon.objc.core_foundation` module. This was an internal module with few remaining contents and should not have any external uses. If you need to call Core Foundation functions in your code, please load the framework yourself using `load_library('CoreFoundation')` and define the types and functions that you need. #175\r\n  - Removed the `ObjCMethod` class from the public API, as there was no good way to use it from external code. #177\r\n\r\n## Misc\r\n\r\n  - #143, #145, #155, #158, #159, #164, #173, #178, #179"}
