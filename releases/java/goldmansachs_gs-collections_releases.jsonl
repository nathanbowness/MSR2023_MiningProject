{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/2819888", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/2819888/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/2819888/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/7.0.3", "id": 2819888, "author": {"login": "itohro", "id": 15612969, "node_id": "MDQ6VXNlcjE1NjEyOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/15612969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itohro", "html_url": "https://github.com/itohro", "followers_url": "https://api.github.com/users/itohro/followers", "following_url": "https://api.github.com/users/itohro/following{/other_user}", "gists_url": "https://api.github.com/users/itohro/gists{/gist_id}", "starred_url": "https://api.github.com/users/itohro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itohro/subscriptions", "organizations_url": "https://api.github.com/users/itohro/orgs", "repos_url": "https://api.github.com/users/itohro/repos", "events_url": "https://api.github.com/users/itohro/events{/privacy}", "received_events_url": "https://api.github.com/users/itohro/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTI4MTk4ODg=", "tag_name": "7.0.3", "target_commitish": "master", "name": "7.0.3 (February 2016)", "draft": false, "prerelease": false, "created_at": "2016-02-19T15:56:13Z", "published_at": "2016-03-16T00:59:59Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/7.0.3", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/7.0.3", "body": "## Bug Fixes\n- Fixed memory leak in HashBiMap.\n- Fixed incorrect code path in key collision handling and keyset iterator based remove operation in primitive Maps with Hashing Strategy.\n\n## Acquiring Eclipse Collections\n\n### Maven\n\n``` xml\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-api</artifactId>\n    <version>7.0.3</version>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections</artifactId>\n    <version>7.0.3</version>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-testutils</artifactId>\n    <version>7.0.3</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-forkjoin</artifactId>\n    <version>7.0.3</version>\n</dependency>\n```\n\n### Gradle\n\n``` groovy\ncompile 'com.goldmansachs:gs-collections-api:7.0.3'\ncompile 'com.goldmansachs:gs-collections:7.0.3'\ntestCompile 'com.goldmansachs:gs-collections-testutils:7.0.3'\ncompile 'com.goldmansachs:gs-collections-forkjoin:7.0.3'\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"7.0.3\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"7.0.3\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"7.0.3\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"7.0.3\"/>\n```\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/2819871", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/2819871/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/2819871/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/7.0.1", "id": 2819871, "author": {"login": "itohro", "id": 15612969, "node_id": "MDQ6VXNlcjE1NjEyOTY5", "avatar_url": "https://avatars.githubusercontent.com/u/15612969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itohro", "html_url": "https://github.com/itohro", "followers_url": "https://api.github.com/users/itohro/followers", "following_url": "https://api.github.com/users/itohro/following{/other_user}", "gists_url": "https://api.github.com/users/itohro/gists{/gist_id}", "starred_url": "https://api.github.com/users/itohro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itohro/subscriptions", "organizations_url": "https://api.github.com/users/itohro/orgs", "repos_url": "https://api.github.com/users/itohro/repos", "events_url": "https://api.github.com/users/itohro/events{/privacy}", "received_events_url": "https://api.github.com/users/itohro/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTI4MTk4NzE=", "tag_name": "7.0.1", "target_commitish": "master", "name": "7.0.1 (December 2015)", "draft": false, "prerelease": false, "created_at": "2015-12-16T05:43:35Z", "published_at": "2016-03-16T00:59:04Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/7.0.1", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/7.0.1", "body": "## Bug Fixes\n\nFixed UnifiedSet.ChainedBucket.removeLongChain() method to handle many collisions in one bucket.\n\n## Acquiring Eclipse Collections\n\n### Maven\n\n``` xml\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-api</artifactId>\n    <version>7.0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections</artifactId>\n    <version>7.0.1</version>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-testutils</artifactId>\n    <version>7.0.1</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-forkjoin</artifactId>\n    <version>7.0.1</version>\n</dependency>\n```\n\n### Gradle\n\n``` groovy\ncompile 'com.goldmansachs:gs-collections-api:7.0.1'\ncompile 'com.goldmansachs:gs-collections:7.0.1'\ntestCompile 'com.goldmansachs:gs-collections-testutils:7.0.1'\ncompile 'com.goldmansachs:gs-collections-forkjoin:7.0.1'\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"7.0.1\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"7.0.1\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"7.0.1\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"7.0.1\"/>\n```\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/2073805", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/2073805/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/2073805/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/7.0.0", "id": 2073805, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTIwNzM4MDU=", "tag_name": "7.0.0", "target_commitish": "master", "name": "7.0.0 (October 2015)", "draft": false, "prerelease": false, "created_at": "2015-10-23T16:25:14Z", "published_at": "2015-11-04T22:53:29Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/7.0.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/7.0.0", "body": "## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-api</artifactId>\n    <version>7.0.0</version>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections</artifactId>\n    <version>7.0.0</version>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-testutils</artifactId>\n    <version>7.0.0</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>com.goldmansachs</groupId>\n    <artifactId>gs-collections-forkjoin</artifactId>\n    <version>7.0.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"7.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"7.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"7.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"7.0.0\"/>\n```\n\n# Breaking Changes\n- `MutableCollection.removeIf()` now returns `boolean`.\n- Sorted sets, bags, and maps implement `ReversibleIterable`. Added `OrderedMap` interface to represent a linked hash map.\n- Overrode `BiMap.partition()` to return `PartitionUnsortedSet`.\n- `UnifiedMap` and `UnifiedSet` now throw if constructed with a load factor greater than 1.\n- `toStringOfItemToCount()` in `ImmutableEmptyBag` now consistent with other Bags. \n  Returns `\"{}\"` instead of `\"\"`\n\n# New Functionality\n\n## Primitive Collections\n\n### `<Primitive>List.binarySearch()` Fixes #20\n\n### `ObjectPrimitiveHashMapWithHashingStrategy`\n\nSimilar to `ObjectPrimitiveHashMap` but uses a `HashingStrategy` to hash and compare keys. Analogous to `UnifiedMapWithHashingStrategy`.\n\n### `<Primitive>Iterable.each()`\n\nBehaves exactly same as `<Primitive>Iterable.forEach()`. Added to be in sync with `RichIterable.each(Procedure)` that was introduced in 6.0 to avoid ambiguity conflict with `Iterable.forEach(Consumer)`.\n\n### `Lazy<Primitive>Iterable.collect<Primitive>()`\n\n### `aggregateInPlaceBy()`, `aggregateBy()`, `zip()`, `zipWithIndex()`, `partition()`, `selectInstancesOf()`, `collectIf()`, `groupBy()`, and `groupByEach()` on `MutablePrimitiveObjectMap`\n\n### Use the Kahan summation algorithm on `sum()` and `sumBy()` methods on primitive collections\n\n## Other new Functionality\n\n### `CharAdapter`, `CodePointAdapter` and `CodePointList`\n- `CharAdapter` implements `CharSequence` and `ImmutableCharList`, and it represents String as a collection of char values.\n- `CharPointAdapter` implements `CharSequence` and `ImmutableIntList`. It behaves similarly to `CharAdapter` but it represents String as the unicode codepoint values that are ints.\n- `CharPointList` is similar to `CharPointAdapter` but it calculates and caches the unicode code point values as an ImmutableIntList internally.\n\n``` java\nCharAdapter chars = CharAdapter.adapt(\"This is an example\");\nCodePointAdapter codePoints = CodePointAdapter.adapt(\"Can you read this Kanji \\\"\\uD840\\uDC00\\\"? I cannot.\");\nCodePointList codePointList = CodePointList.from(\"BMP stands for Basic Multilingual Pane. \\\"\\uD840\\uDC00\\\" is a unicode character outside BMP.\");\n\nSystem.out.println(\"Upper case: \" + chars.collectChar(Character::toUpperCase));\nSystem.out.println(\"Unicode character outside Basic Multilingual Pane: \" + codePoints.reject(Character::isBmpCodePoint).distinct());\nSystem.out.println(\"English only: \" + codePointList.reject(Character::isIdeographic));\n```\n\nPrints\n\n```\nUpper case: THIS IS AN EXAMPLE\nUnicode character outside Basic Multilingual Pane: \ud840\udc00\nEnglish only: BMP stands for Basic Multilingual Pane. \"\" is a unicode character outside BMP.\n```\n\n### `ImmutableSortedBag`\n\n### `ListIterable.distinct(HashingStrategy)`\n\nReturns a new `ListIterable` containing the distinct elements in this list. Conceptually similar to `new UnifiedSetWithHashingStrategy(hashingStrategy, listIterable).toList()` but retains the original order.\n\n### `MutableBagMultimap.putOccurrences(K key, V value, int occurrences)`\n\nAdds `occurrences` of `value` to the `MutableBag` at `key` in the multimap.\n\n### `MutableList.shuffleThis(): MutableList`\n\nShuffles this list and returns this list. Overload optionally takes a `Random`.\n\n### `Predicates.cast()` and `Functions.cast()`\n\nAllows a Java 8 lambda or method reference to be used in a method taking a predicate or a function without requiring a cast. The methods can be used in places where two or more method overloads could apply when used with a lambda or method reference.\n\n``` java\nLists.mutable.of(1, 2, null).removeIf(each -> each == null);\n```\n\nThis code fails to compile with the following error.\n\n``` java\nError: java: reference to removeIf is ambiguous\nboth method removeIf(java.util.function.Predicate<? super E>) in java.util.Collection and method removeIf(com.gs.collections.api.block.predicate.Predicate<? super T>) in com.gs.collections.api.collection.MutableCollection match\n```\n\nYou can work around the problem by using a cast or the method `Predicates.cast()`.\n\n``` java\nLists.mutable.of(1, 2, null).removeIf(Predicates.cast(each -> each == null));\n```\n\n### Add factory method for creating mutable sets and maps of a given initial capacity.\n\nFor example: `Sets.mutable.withInitialCapacity(100)`\n\n# Optimizations and Performance Tests\n- Optimize `FastList.addAll()` and `UnifiedSet.addAll()` for `RandomAccess` lists.\n- Optimize `UnifiedMap`'s short-circuit methods to not delegate to an iterator.\n- Refactor `ImmutableSortedBag.newWith()` and `newWithout()` to take O(n) time.\n- Add JDK 8 Streams based JMH tests for `FastList`.\n- Add JMH Tests for `HashMap<Integer, Integer>`\n\n# Bug Fixes\n- Fix bug in `CollectIterable.toArray()` where it returns `T[]` instead of `Object[]`.\n- Fix iterator's `remove()` method in `ObjectPrimitiveHashMap` so that it doesn't rehash.\n- Fix code point iteration in `StringIterate` and provide `CharAdapter` and `CodePointList` as OO alternatives for string iteration.\n\n# Documentation and Deprecation\n- Add information about required Java versions to `README.md`. Fixes #18.\n- Enhance Javadoc of `Iterate`.\n- Update Javadoc in `InternalIterable` and `RichIterable` to include Java 8 lambda examples.\n- Deprecate `ArrayIterate.sort()` and recommend direct calls to `Arrays.sort()`.\n- Deprecate overloaded methods in `StringIterate` and add specialization alternatives that work better with Java 8 lambdas.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/1395673", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/1395673/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/1395673/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/6.2.0", "id": 1395673, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTEzOTU2NzM=", "tag_name": "6.2.0", "target_commitish": "master", "name": "6.2.0 (June 2015)", "draft": false, "prerelease": false, "created_at": "2015-06-09T13:26:47Z", "published_at": "2015-06-09T20:16:53Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/6.2.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/6.2.0", "body": "## Binaries\n\n[gs-collections-6.2.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-6.2.0.zip)\n\n## Javadoc\n\n[6.2.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/6.2.0/index.html)\n\n## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>6.2.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>6.2.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>6.2.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>6.2.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"6.2.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"6.2.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"6.2.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"6.2.0\"/>\n```\n\n### Optimizations\n- Improve primitive map performance.\n- Optimize addAll/removeAll on HashBag when a Bag is passed as the parameter.\n\n### Bug Fixes\n- Fix bug in remove() in <Primitive>HashBag's iterator.\n- Fix bug in remove() in HashBag and TreeBag's iterators.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/1090480", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/1090480/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/1090480/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/6.1.0", "id": 1090480, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTEwOTA0ODA=", "tag_name": "6.1.0", "target_commitish": "master", "name": "6.1.0 (March 2015)", "draft": false, "prerelease": false, "created_at": "2015-03-13T17:11:01Z", "published_at": "2015-03-25T18:10:42Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/6.1.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/6.1.0", "body": "## Binaries\n\n[gs-collections-6.1.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-6.1.0.zip)\n\n## Javadoc\n\n[6.1.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/index.html)\n\n## JDiff\n\n[Differences between 6.0.0 and 6.1.0](http://www.goldmansachs.com/gs-collections/jdiff/6.1.0/changes.html)\n\n## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>6.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>6.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>6.1.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>6.1.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"6.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"6.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"6.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"6.1.0\"/>\n```\n\n## New Functionality\n\n#### Travis CI build\n\nA continuous build runs at [travis-ci](https://travis-ci.org/goldmansachs/gs-collections) and its status is reflected in the [README badge](README.md).\n\n#### Allow <Primitive>ArrayList to have subclasses.\n\nFixes #19.\n\n#### ParallelIterable.flatCollect()\n\n### Optimizations\n- Optimize <Primitive>ArrayList.addAll(PrimitiveIterable) to avoid an array copy when the parameter is also a <Primitive>ArrayList. Fixes #19.\n- Optimize primitive maps/sets probing method.\n\n### Bug Fixes\n- Fix size() on the views of ConcurrentHashMap.\n- Fix the iteration order of several iteration patterns.\n\n### Performance and memory tests\n\nMany new performance and memory tests supporting the material in the presentation \"Scala Collections Performance\" at Scala Days San Francisco 2015. There are new JMH tests for several lists, sorted sets, and maps as well as new memory tests for several sets and maps.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/934901", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/934901/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/934901/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/6.0.0", "id": 934901, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTkzNDkwMQ==", "tag_name": "6.0.0", "target_commitish": "master", "name": "6.0.0 (February 2015)", "draft": false, "prerelease": false, "created_at": "2015-02-04T18:53:43Z", "published_at": "2015-02-09T21:24:31Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/6.0.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/6.0.0", "body": "## Binaries\n\n[gs-collections-6.0.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-6.0.0.zip)\n\n## Javadoc\n\n[6.0.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/6.0.0/index.html)\n\n## JDiff\n\n[Differences between 5.1.0 and 6.0.0](http://www.goldmansachs.com/gs-collections/jdiff/6.0.0/changes.html)\n\n## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>6.0.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>6.0.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>6.0.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>6.0.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"6.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"6.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"6.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"6.0.0\"/>\n```\n\n# New Functionality\n\n## RichIterable API\n\n### RichIterable.each(Procedure)\n\nJava 8 introduced `Iterable.forEach(Consumer)` which can cause problems for users of `RichIterable.forEach(Procedure)`. `Consumer` and `Procedure` have the same shape, so passing in a lambda is ambiguous.\n\n``` java\nFastList.newListWith(1, 2, 3).forEach(System.out::println);\n```\n\nThis code fails with the following compiler error.\n\n``` java\nError: reference to forEach is ambiguous\n        both method forEach(java.util.function.Consumer<? super T>) in java.lang.Iterable\n        and method forEach(com.gs.collections.api.block.procedure.Procedure<? super T>) in com.gs.collections.impl.list.mutable.FastList match\n```\n\nYou can work around this problem by using a cast, `Procedures.cast()`, or by using `RichIterable.each(Procedure)` which behaves exactly like `InternalIterable.forEach(Procedure)`.\n\n``` java\nFastList.newListWith(1, 2, 3).forEach((Procedure<? super Integer>) System.out::println);\nFastList.newListWith(1, 2, 3).forEach(Procedures.cast(System.out::println));\nFastList.newListWith(1, 2, 3).each(System.out::println);\n```\n\n### RichIterable.tap(Procedure): RichIterable\n\nExecutes the `Procedure` for each element in the iterable and returns the `RichIterable`. Similar to `RichIterable.forEach(Procedure)` and `RichIterable.each(Procedure)` but returns `this`.\n\n### LazyIterable.tap(Procedure): LazyIterable\n\n`LazyIterable.tap(Procedure)` overrides `RichIterable.tap(Procedure)` and executes lazily. It is useful to \"tap into\" a method chain, executing a `Procedure` on every element of the `LazyIterable` without ending the chain or forcing evaluation.\n\n``` java\nRichIterable<String> list = Lists.mutable.of(\"One\", \"Two\", \"Three\", \"Four\");\n\nlist.asLazy()\n    .tap(each -> System.out.println(each + \" --(Each element prints this)\"))\n    .select(StringPredicates.contains(\"o\"))\n    .tap(selected -> System.out.println(selected + \" --(Only selected element prints this)\"))\n    .collect(String::toUpperCase)\n    .tap(collected -> System.out.println(collected + \" --(Collected element prints this)\"))\n    .each(a -> {}); // force evaluation\n```\n\nPrints\n\n``` java\nOne --(Each element prints this)\nTwo --(Each element prints this)\nTwo --(Only selected element prints this)\nTWO --(Collected element prints this)\nThree --(Each element prints this)\nFour --(Each element prints this)\nFour --(Only selected element prints this)\nFOUR --(Collected element prints this)\n```\n\n### RichIterable.toSortedBag(), RichIterable.toSortedBag(Comparator), and RichIterable toSortedBagBy(Function)\n\n`RichIterable.toSortedBag()` converts the collection to a `MutableSortedBag` implementation and sorts it using the natural order of the elements. `RichIterable.toSortedBag(Comparator)` sorts using the `Comparator` parameter. `RichIterable.toSortedBagBy(Function)` sorts based on the natural order of the attribute returned by the `Function` parameter.\n\n### RichIterable.groupByUniqueKey(Function): MapIterable.\n\nSimilar to `RichIterable.groupBy(Function)`. The keys returned by the `Function` must be unique, otherwise an exception is thrown. Since the keys are unique, `groupByUniqueKey()` returns a `MapIterable` instead of a `Multimap`.\n\n### RichIterable.sumBy(Int|Long|Float|Double)\n- `RichIterable.sumByInt(Function<T, V> groupBy, IntFunction<? super T> function): ObjectLongMap<V>`\n- `RichIterable.sumByLong(Function<T, V> groupBy, LongFunction<? super T> function): ObjectLongMap<V>`\n- `RichIterable.sumByFloat(Function<T, V> groupBy, FloatFunction<? super T> function): ObjectDoubleMap<V>`\n- `RichIterable.sumByDouble(Function<T, V> groupBy, DoubleFunction<? super T> function): ObjectDoubleMap<V>`\n\nGroups the elements in the `RichIterable` by the groupBy `Function`. Each group is converted to numbers using the primitive function and then summed. `sumByInt()` and `sumByLong()` return `ObjectLongMap`. `sumByFloat()` and `sumByDouble()` return `ObjectDoubleMap`.\n\n## OrderedIterable API\n\n### OrderedIterable interface for order dependent functionality.\n\nAn `OrderedIterable` is a `RichIterable` with some meaningful order, such as insertion order, access order, or sorted order. `ReversibleIterable` and `SortedIterable` now extend `OrderedIterable`.\n\nSeveral methods were pulled up to `OrderedIterable`.\n- `indexOf(Object)`\n- `takeWhile(Predicate)`, `dropWhile(Predicate)`, and `partitionWhile(Predicate)`\n- `distinct()`\n- `toStack()`\n\nOther methods on `InternalIterable` and `RichIterable` are now deprecated because they imply a meaningful order which not all containers have. These methods are overridden on `OrderedIterable` so that the deprecation warning will not appear on ordered collections.\n- `getFirst()` and `getLast()`\n- `forEach(startIndex, endIndex, procedure)`\n- `forEachWithIndex(ObjectIntProcedure)`\n- `forEachWithIndex(fromIndex, toIndex, objectIntProcedure)`\n\n### OrderedIterable.corresponds(OrderedIterable, Predicate2).\n\nReturns true if both `OrderedIterable`s have the same length and the predicate returns `true` for all elements e1 of the current `OrderedIterable` and e2 of the other `OrderedIterable`.\n\nThe predicate is evaluated for pairs of elements at the same position in both `OrderedIterable`s. The `corresponds()` method short circuits as soon as it finds a pair of elements which do not correspond.\n\n``` java\nMutableList<Integer> integers1 = FastList.newListWith(1, 2, 2, 3, 3, 3, 4, 4, 4, 4);\nMutableList<Integer> integers2 = FastList.newListWith(2, 3, 3, 4, 4, 4, 5, 5, 5, 5);\nAssert.assertTrue(integers1.corresponds(integers3, Predicates2.lessThan()));\n```\n\n### OrderedIterable.detectIndex(Predicate).\n\nReturns the index of the first element which satisfies the `Predicate` or `-1` if no elements do. The `detectIndex()` method short circuits as soon as it finds an element which satisfies the `Predicate`.\n\n``` java\nListIterable<Integer> list = FastList.newListWith(1, 1, 2, 2, 3, 3);\nAssert.assertEquals(2, list.detectIndex(integer -> integer == 2));\nAssert.assertEquals(-1, list.detectIndex(integer -> integer == 4));\n```\n\n## ReversibleIterable API\n\n### ReversibleIterable.detectLastIndex(Predicate).\n\nReturns the index of the last element which satisfies the `Predicate` or `-1` if no elements do. The `detectLastIndex()` method iterates in reverse order and short circuits as soon as it finds an element which satisfies the `Predicate`.\n\n``` java\nListIterable<Integer> list = FastList.newListWith(1, 1, 2, 2, 3, 3);\nAssert.assertEquals(3, list.detectLastIndex(integer -> integer == 2));\nAssert.assertEquals(-1, list.detectLastIndex(integer -> integer == 4));\n```\n\n### Reversible<Primitive>Iterable.distinct().\n\nSame as `ReversibleIterable.distinct()` for primitive collections.\n\n### ReversibleIterable.take(int n) and ReversibleIterable.drop(int n).\n\n#### take()\n\nReturns the first `n` elements of the iterable or all the elements in the iterable if `n` is greater than the length of the iterable.\n\n``` java\nMutableList<Integer> list = FastList.newListWith(1, 2, 3, 4, 5);\nAssert.assertEquals(FastList.newList(), list.take(0));\nAssert.assertEquals(FastList.newListWith(1, 2, 3), list.take(3));\nAssert.assertEquals(FastList.newListWith(1, 2, 3, 4, 5), list.take(6));\n```\n\n#### drop()\n\nReturns an iterable after skipping the first `n` elements or an empty iterable if `n` is greater than the length of the iterable.\n\n``` java\nMutableList<Integer> list = FastList.newListWith(1, 2, 3, 4, 5);\nAssert.assertEquals(FastList.newListWith(1, 2, 3, 4, 5), list.drop(0));\nAssert.assertEquals(FastList.newListWith(4, 5), list.drop(3));\nAssert.assertEquals(FastList.newListWith(), list.drop(6));\n```\n\n## ParallelIterable API\n\n### ListIterable.asParallel(), SetIterable.asParallel(), and SortedSetIterable.asParallel().\n\nIn 5.0, `asParallel()` was added to `FastList` and `UnifiedSet`. Now it's on the interfaces ListIterable, SetIterable and SortedSetIterable as well.\n\n``` java\nListIterable<Person> people = ...;\nExecutorService threadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\nint batchSize = 10_000;\nParallelListIterable<Person> peopleParallel = people.asParallel(threadPool, batchSize);\n```\n\n### min(), max(), minBy(), and maxBy() on ParallelIterable.\n\nSimilar to the same methods on `RichIterable`. These methods force evaluation.\n\n``` java\nParallelListIterable<Person> peopleParallel = people.asParallel(threadPool, batchSize);\nInteger youngestAge = peopleParallel.collect(Person::getAge).min();\nInteger oldestAge = peopleParallel.collect(Person::getAge).max();\nPerson youngestPerson = peopleParallel.minBy(Person::getAge);\nPerson oldestPerson = peopleParallel.maxBy(Person::getAge);\n```\n\n### sumOfInt(), sumOfFloat(), sumOfLong(), sumOfDouble() on ParallelIterable.\n\nSimilar to the same methods on `RichIterable`. These methods force evaluation.\n\n``` java\nParallelListIterable<Person> peopleParallel = people.asParallel(threadPool, batchSize);\nlong sum1 = peopleParallel.sumOfInt(Person::getIntAttribute);\nlong sum2 = peopleParallel.sumOfLong(Person::getLongAttribute);\ndouble sum3 = peopleParallel.sumOfFloat(Person::getFloatAttribute);\ndouble sum4 = peopleParallel.sumOfDouble(Person::getDoubleAttribute);\n```\n\n## Multimap API\n\n### Constructors for Multimaps that take Iterable<Pair<K, V>>.\n\n``` java\nListIterable<Pair<Integer, String>> pairs = ...;\nMultimap<Integer, String> actual = FastListMultimap.newMultimap(pairs);\n```\n\n### MutableMultimap.add(Pair).\n\nSimilar to `MutableMultimap.put(K, V)` but takes `Pair<K, V>` instead.\n\n### Multimap.forEachKeyMultiValues(Procedure2<K, ? super Iterable<V>>)\n\nSimilar to `forEachKeyValue(Procedure2<K, V>)` but the `Procedure2` gets invoked on each group of values instead of each individual value.\n\n### Multimap.selectKeysValues(Predicate2<? super K, ? super V>) and Multimap.rejectKeysValues(Predicate2<? super K, ? super V>).\n\nSimilar to `RichIterable.select()` and `RichIterable.reject()` but the `Predicate2` is evaluated against each key/value pair. The implementation of the `Predicate2` is free to ignore either the key or the value.\n\n### Multimap.selectKeysMultiValues(Predicate2<? super K, ? super Iterable<V>>) and Multimap.rejectKeysMultiValues(Predicate2<? super K, ? super Iterable<V>>).\n\nSimilar to `Multimap.selectKeysValues()` and `Multimap.rejectKeysValues()` but the `Predicate2` takes (K, Iterable<V>) pairs instead of (K, V) pairs.\n\n### Multimap.collectKeysValues(Function2<? super K, ? super V, Pair<K2, V2>>).\n\nSimilar to `RichIterable.collect()` but the `Function2` is applied to each key/value pair.\n\n### Multimap.collectValues(Function<? super V, ? extends V2>)\n\nSimilar to `Multimap.collectKeysValues()` but only transforms keys. It is more efficient than using `Multimap.collectKeysValues()` and passing through the keys unchanged.\n\n### Multimap<K, V>.flip(): Multimap<V, K>.\n\nReturns a new `Multimap` where the positions of the keys and values are swapped.\n\n## Other new API\n\n### Unify the map interface hierarchy through new interfaces MutableMapIterable and ImmutableMapIterable.\n\n`MutableMap`, `MutableSortedMap`, and `MutableBiMap` now extend a common interface `MutableMapIterable`. `ImmutableMap`, `ImmutableSortedMap`, and `ImmutableBiMap` now extend a common interface `ImmutableMapIterable`. The `SetIterable` and `Bag` hierarchy had similar changes.\n\n### Mutable<Primitive>Iterator.remove()\n\n`Mutable<Primitive>Iterator` is a new subclass of `<Primitive>Iterator` that adds the `remove()` method. It behaves similarly to `Iterator.remove()`, but does not appear on immutable primitive containers and thus doesn't throw `UnsupportedOperationException`. Immutable containers continue to return the read-only `<Primitive>Iterator`.\n\n### Bag.topOccurrences() and Bag.bottomOccurrences().\n\n`Bag.topOccurrences()` returns the most frequently occurring item. `Bag.bottomOccurrences()` returns the least frequently occurring item. In the event of a tie, all tied items are returned.\n\n### ImmutableList.subList(fromIndex, toIndex): ImmutableList.\n\nSimilar to `List.subList()` but returns an `ImmutableList`.\n\n### Primitive forms of MutableList.sortThisBy().\n\nSimilar to `sortThisBy(Function)` but taking primitive functions. For example,\n\n``` java\nMutableList<T> sortThisByInt(IntFunction<? super T> function);\nMutableList<T> sortThisByFloat(FloatFunction<? super T> function);\n...\n```\n\n### Pair.swap().\n\nReturns a new `Pair` with the two elements transposed.\n\n### Functions.swappedPair().\n\nReturns a `Function` which swaps the two elements in a `Pair`. Similar to Pair::swap but doesn't rely on Java 8.\n\n### StringIterate.chunk(int).\n\nBreaks up a String into fixed size chunks. Similar to `RichIterable.chunk()`, but for `Strings` rather than collections.\n\n## New Containers\n\n### ImmutableBiMap\n\n`ImmutableBiMap`s can be created by using the `BiMaps` factory or by calling `MutableBiMap.toImmutable()`.\n\n``` java\nMutableBiMap<Integer, Character> biMap = ...;\nImmutableBiMap<Integer, Character> characters = biMap.toImmutable();\n```\n\n### MultiReaderFastListMultimap, MultiReaderUnifiedSetMultimap, and MultiReaderHashBagMultimap.\n\nThread-safe `Multimaps` backed by `ConcurrentMutableMap`s of multi-reader collections.\n\n## Tests\n\n### JUnit Runner for interfaces containing concrete tests. New test suite leveraging virtual extension methods.\n\nA new JUnit `Runner` named `Java8Runner` that extends the standard test runner by looking for tests in interfaces in addition to classes. Tests in interfaces are default methods annotated with `@Test`. For example:\n\n``` java\n@Test\ndefault void MutableList_sortThis()\n{\n    MutableList<Integer> mutableList = this.newWith(5, 1, 4, 2, 3);\n    MutableList<Integer> sortedList = mutableList.sortThis();\n    assertSame(mutableList, sortedList);\n    assertEquals(Lists.immutable.with(1, 2, 3, 4, 5), sortedList);\n}\n```\n\nThis allows for a form of multiple inheritance in tests. For example, a `MutableList` is both a `MutableCollection` and a `ListIterable`. Any assertions about `MutableCollection`s and `ListIterable`s should be true for `MutableList`s as well. Thus, the test interface `MutableListTestCase` extends both `MutableCollectionTestCase` and `ListIterableTestCase`.\n\n`unit-tests-java8` is a new test suite containing over 50 new test classes and 60 new test interfaces.\n\n### Additional JMH Tests\n\nPerformance tests covering `min`, `max`, `minBy`, `maxBy`, `sumOf`, and `sumBy`.\n\n## Optimizations\n\n### Optimize primitive hash maps with keys and values of the same primitive type.\n\nPrimitive hash maps with keys and values of the same primitive type (`IntIntHashMap`, `DoubleDoubleHashMap`, etc.), keys and values are now stored in a single array of double the length.\n\nThis yields a small memory savings and a speed increase in larger maps. The corresponding JMH performance tests are `IntIntMapTest` and `LongIntMapTest`.\n\n### Optimize code paths that unnecessarily use iterator by delegating to IterableIterate by delegating to forEach() instead.\n\n## Bug Fixes\n- Make ArrayListAdapterSerializationTest more robust for future versions of Java. Fixes #12.\n- Fix array index bug in <Primitive>ArrayList.sortThis(). Fixes #16.\n- Fix <Primitive>ObjectHashMap.injectInto() to include sentinels values.\n- Fix ImmutableSortedMap.entrySet() to return entries sorted by key.\n- Fix CountSetTest to delegate to CountSetScalaTest. Fixes #15.\n- Fix concurrency issue in the aggregateBy tests.\n- Fix the iteration order of several iteration patterns.\n- Use the Kahan summation algorithm to handle double and float precision in sumOf().\n- Fix looping logic in SortedSetIterable.forEach() and SortedSetIterable.forEachWithIndex() with fromIndex and toIndex.\n- Fix CompositeFastList.size() to execute in constant time.\n- Fix ListAdapter.reverseThis() to run in linear time.\n- Fix ListIterate.toArray(list, target, startIndex, sourceSize) and ListIterate.getLast() to run in linear time.\n- Fix UnifiedSet.getLast() and UnifiedSetWithHashingStrategy.getLast() to return the last instead of the first element.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/353034", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/353034/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/353034/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/5.1.0", "id": 353034, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTM1MzAzNA==", "tag_name": "5.1.0", "target_commitish": "master", "name": "5.1.0 (June 2014)", "draft": false, "prerelease": false, "created_at": "2014-06-02T20:02:20Z", "published_at": "2014-06-02T21:25:26Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/5.1.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/5.1.0", "body": "## Binaries\n\n[gs-collections-5.1.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-5.1.0.zip)\n\n## Javadoc\n\n[5.1.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/5.1.0/index.html)\n\n## JDiff\n\n[Differences between 5.0.0 and 5.1.0](http://www.goldmansachs.com/gs-collections/jdiff/5.1.0/changes.html)\n\n## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>5.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>5.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>5.1.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>5.1.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"5.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"5.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"5.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"5.1.0\"/>\n```\n\n## Improvements\n\n### Java Microbenchmark Harness performance test suite\n\nThere are two new modules named [`jmh-scala-tests`](https://github.com/goldmansachs/gs-collections/tree/master/jmh-scala-tests/src/main/scala/com/gs/collections/impl/jmh) and [`jmh-tests`](https://github.com/goldmansachs/gs-collections/tree/master/jmh-tests/src/main/java/com/gs/collections/impl/jmh) which include new performance tests leveraging Java Microbenchmark Harness. They supplement the existing [`performance-tests`](https://github.com/goldmansachs/gs-collections/tree/master/performance-tests/src/test/java/com/gs/collections/impl) module. The focus of these tests is to compare the performance of various iteration patterns across several libraries, including GS Collections, Java 8 Streams, Scala collections, and Guava. Each iteration pattern is tested in serial and in parallel. Where the API is available, they are also tested eagerly and lazily.\n\nAs an example, here is the test of the GS Collections implementation of `count()`, using serial eager evaluation.\n\n``` java\n@GenerateMicroBenchmark\npublic void serial_eager_gsc()\n{\n    int evens = this.integersGSC.count(each -> each % 2 == 0);\n    Assert.assertEquals(SIZE / 2, evens);\n}\n```\n\n### Use of lambdas in the test suites\n\nThe GS Collections library is compiled with Java 5 to ensure its backwards compatibility. However, the test modules are free to use any version of Java. Most of the test modules now use Java 8. We've replaced all of the anonymous inner classes with lambdas or method references. We've also replaced many usages of code block factories with the equivalent lambda or method reference. For example, instead of using `Functions.getToString()`, we use `String::valueOf` in most tests.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/235281", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/235281/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/235281/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/5.0.0", "id": 235281, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTIzNTI4MQ==", "tag_name": "5.0.0", "target_commitish": "master", "name": "5.0.0 (March 2014)", "draft": false, "prerelease": false, "created_at": "2014-03-21T19:25:35Z", "published_at": "2014-03-21T21:58:25Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/5.0.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/5.0.0", "body": "## Binaries\n\n[gs-collections-5.0.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-5.0.0.zip)\n\n## Javadoc\n\n[5.0.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/5.0.0/index.html)\n\n## JDiff\n\n[API differences between 4.0.0 and 5.0.0](http://www.goldmansachs.com/gs-collections/jdiff/5.0.0/changes.html)\n\n## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>5.0.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>5.0.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>5.0.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>5.0.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"5.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"5.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"5.0.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"5.0.0\"/>\n```\n\n## New Functionality\n\n### Parallel-Lazy Iteration\n\nPrevious versions of GS Collections included parallel evaluation and lazy evaluation as separate features. Parallel-eager utility has been available through the `ParallelIterate` utility class. Serial-lazy evaluation has been available through `LazyIterable`, the view returned by `RichIterable.asLazy()`. GS Collections 5.0 adds parallel-lazy evaluation through `ParallelIterable`, the view returned by `asParallel(ExecutorService, int batchSize)`. The method `asParallel` is not on interfaces like `RichIterable` yet, but rather on a few supported collections, including `FastList` and `UnifiedSet`.\n\n``` java\nFastList<Integer> integers = FastList.newListWith(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\nExecutorService threadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\nint batchSize = 2;\nParallelListIterable<Integer> parallelListIterable = integers.asParallel(threadPool, batchSize);\nParallelListIterable<Integer> evenNumbers = parallelListIterable.select(each -> each % 2 == 0); // deferred evaluation\nParallelListIterable<String> evenStrings = evenNumbers.collect(Object::toString); // deferred evaluation\nMutableList<String> strings = evenStrings.toList(); // forced evaluation\nthreadPool.shutdown();\nAssert.assertEquals(FastList.newListWith(\"2\", \"4\", \"6\", \"8\"), strings);\n```\n\nThe calls to `select` and `collect` are lazy, indicated by the fact that they return subclasses of `ParallelIterable`. The call to `toList()` forces evaluation.\n\nThe two parameters to `asParallel` are used to configure parallelism. The code example above sets up a thread pool with one thread per core, which is appropriate for CPU bound tasks. It's possible to configure the thread pool for IO bound tasks, and to share thread pools between multiple calls to `asParallel.` The batch size determines the number of elements from the backing collection that get processed by each task submitted to the thread pool. The appropriate batch size for CPU-bound tasks will be much larger, usually 10,000 to 100,000. The right batch size should be determined through thorough performance testing.\n\n**NOTE: The new parallel-lazy API is experimental and is tagged as `@Beta`. Until we remove the `@Beta` annotation, we reserve the right to make incompatible changes to the parallel-lazy API even in minor versions of GS Collections.**\n\n### API\n\n#### `anySatisfyWith`, `allSatisfyWith`, `noneSatisfyWith`, `countWith`, `partitionWith`, `detectWith`, and `detectWithIfNone` on `RichIterable`\n\nThese are the two-argument forms of `anySatisfy`, `allSatisfy`, `noneSatisfy`, `count`, `partition`, `detect` and `detectIfNone`. They take a `Predicate2` instead of a `Predicate`, and a second argument, which is passed as the second argument to the `Predicate2`. The two argument forms allow reusing some code blocks that would otherwise have one differing parameter, resulting in less garbage creation. Some of these methods already existed on `MutableCollection` and were pulled up to `RichIterable`. Here is a comparison between `anySatisfy` and `anySatisfyWith`.\n\n``` java\nAssert.assertTrue(this.newWith(1, 2, 3).anySatisfyWith(Predicates2.equal(), 2));\nAssert.assertTrue(this.newWith(1, 2, 3).anySatisfy(Predicates.equal(2)));\n```\n\n#### `RichIterable.collect<Primitive>(<Primitive>Function, Mutable<Primitive>Collection target)`\n\nThe new overload `RichIterable.collect<Primitive>(<Primitive>Function, Mutable<Primitive>Collection target)` is similar to `collect<Primitive>(<Primitive>Function)`, except that the results are gathered into the specified target collection.\n\n#### `ListIterable.toImmutable()`, `SortedSetIterable.toImmutable()`, `UnsortedSetIterable.toImmutable()`, `SortedMapIterable.toImmutable()`, `UnsortedMapIterable.toImmutable()`, `StackIterable.toImmutable()`\n\nPreviously, `toImmutable()` only existed on `MutableCollection`s. It's now available on the read-only interfaces as well. When called on an immutable collection, it returns the same instance.\n\n``` java\nMutableStack<Integer> mutableStack = Stacks.mutable.with(1, 2, 3);\nVerify.assertInstanceOf(ImmutableStack.class, mutableStack.toImmutable());\nAssert.assertNotSame(mutableStack, mutableStack.toImmutable());\n\nStackIterable<Integer> immutableStack = Stacks.immutable.with(1, 2, 3);\nAssert.assertSame(immutableStack, immutableStack.toImmutable());\n```\n\n#### `ListIterable.binarySearch(T)` and `ListIterable.binarySearch(T, Comparator)`\n\nSimilar to `java.util.Collections.binarySearch`, but available from the object-oriented API.\n\n#### `LazyIterable.distinct()` and `LazyIterate.distinct(Iterable)`\n\nSimilar to `toSet(),` but returns a `LazyIterable` (does not force evaluation).\n\n#### `MapIterable.flip()`\n\nReturns a new associative array where the position of the keys and values have been flipped. Since the values in the `MapIterable` are not necessarily unique, `flip()` returns a `Multimap` instead of a `MapIterable`. Since the keys in the `MapIterable` _are_ unique, `flip()` returns a `SetMultimap` instead of the more general `Multimap` interface. In summary, `MapIterable<K, V>.flip()` returns `SetMultimap<V, K>`.\n\n``` java\nMutableSetMultimap<String, String> expected = UnifiedSetMultimap.newMultimap();\nexpected.put(\"odd\", \"One\");\nexpected.put(\"even\", \"Two\");\nexpected.put(\"odd\", \"Three\");\nexpected.put(\"even\", \"Four\");\n\nAssert.assertEquals(expected, UnifiedMap.newWithKeysValues(\"One\", \"odd\", \"Two\", \"even\", \"Three\", \"odd\", \"Four\", \"even\").flip());\n```\n\n#### `MapIterable.flipUniqueValues()`\n\nSimilar to `MapIterable.flip()` but asserts that the values in the `MapIterable` are unique and thus returns `MapIterable` instead of `Multimap`. Throws `IllegalArgumentException` if the `MapIterable` contains duplicate values.\n\n``` java\nMapIterable<Integer, String> map = this.newMapWithKeysValues(1, \"1\", 2, \"2\", 3, \"3\");\nMapIterable<String, Integer> flip = map.flipUniqueValues();\nAssert.assertEquals(UnifiedMap.newWithKeysValues(\"1\", 1, \"2\", 2, \"3\", 3), flip);\n```\n\n#### `MutableMap.getIfAbsentPut(K key, V value)`\n\nGets and returns the value in the map at the specified key. If the map does not contain the key, `getIfAbsentPut()` puts the value in the map and returns it. Similar to `getIfAbsentPut(K key, Function0<? extends V> function)`, but takes in a value directly instead of a value factory (`Function0`).\n\n``` java\nMutableMap<Integer, String> map = UnifiedMap.newWithKeysValues(1, \"1\", 2, \"2\", 3, \"3\");\n\nAssert.assertEquals(\"4\", map.getIfAbsentPut(4, \"4\")); // mutates\nAssert.assertEquals(\"3\", map.getIfAbsentPut(3, \"5\")); // does not mutate\nVerify.assertContainsKeyValue(3, \"3\", map);\nVerify.assertContainsKeyValue(4, \"4\", map);\n```\n\n#### `MutableMap.add(Pair<K, V>)`\n\nAdds the key-value pair to the map. It's a convenience method for working with `Pair`s, similar to `put(K, V)`.\n\n``` java\nMutableMap<String, Integer> map = this.newMapWithKeyValue(\"A\", 1);\nAssert.assertEquals(Integer.valueOf(1), map.add(Tuples.pair(\"A\", 3)));\n\nAssert.assertNull(map.add(Tuples.pair(\"B\", 2)));\nVerify.assertMapsEqual(UnifiedMap.newWithKeysValues(\"A\", 3, \"B\", 2), map);\n```\n\n#### `MutableBag.setOccurrences(T item, int occurrences)`\n\nMutates the bag to contain the given number of occurrences of the item. Returns `true` if the bag has been modified as a result of the call to `setOccurrences()`.\n\n``` java\nMutableBag<String> bag = HashBag.newBag();\nMutableBag<String> expected = this.newWith(\"betamax-tape\", \"betamax-tape\");\n\nAssert.assertTrue(bag.setOccurrences(\"betamax-tape\", 2));\nAssert.assertEquals(expected, bag);\n```\n\n#### `ListIterate.reverseForEachWithIndex(List, ObjectIntProcedure)`\n\nIterates over the list in reverse order executing the `ObjectIntProcedure` for each element. The index passed into the `ObjectIntProcedure` is the actual index of the range.\n\n### Primitive API\n\n#### `Mutable<Primitive>Collection.retainAll`\n\nLike `Collection.retainAll`, but for primitive collections. There are two variants, one that takes a `<Primitive>Iterable`, and another that takes varargs.\n\n``` java\nAssert.assertTrue(collection.retainAll(IntArrayList.newListWith(1, 2, 5)));\nAssert.assertEquals(this.newMutableCollectionWith(1, 2), collection);\nMutableIntCollection collection = this.newMutableCollectionWith(1, 2, 3);\nAssert.assertFalse(collection.retainAll(1, 2, 3));\nAssert.assertEquals(this.newMutableCollectionWith(1, 2, 3), collection);\n```\n\n#### `keysView()` and `keyValuesView()` on primitive maps\n\nReturns a lazy view of keys or key/value pairs respectively.\n\n#### `keySet()` and `values()` on synchronized, unmodifiable, and immutable primitive maps\n\nThese methods already existed on the API but threw `UnsupportedOperationException`s in places. They are fully supported now.\n\n#### `addToValue(key, amount)` on mutable primitive maps\n\nAdds the given amount to the value at the given key and returns the updated value. This method exists only for maps where the values are numeric types (not `boolean` or `Object`).\n\n``` java\nMutableByteIntMap map = new ByteIntHashMap();\nAssert.assertEquals(1, map.addToValue((byte) 0, 1));\nAssert.assertEquals(ByteIntHashMap.newWithKeysValues((byte) 0, 1), map);\n\nAssert.assertEquals(11, map.addToValue((byte) 0, 10));\nAssert.assertEquals(ByteIntHashMap.newWithKeysValues((byte) 0, 11), map);\n```\n\n#### `Mutable<Primitive>ObjectMap.putAll(<Primitive>ObjectMap)`\n\n`putAll()` was already implemented on `MutableObject<Primitive>Map` and `<Primitive><Primitive>Map`. This rounds out the API.\n\n#### `Reversible<Primitive>Iterable.asReversed()`\n\nReturns a reversed view of the primitive iterable. Like `ReversibleIterable.asReversed()`, but for the primitive API.\n\n#### `Reversible<Primitive>Iterable.toReversed()`\n\nReturns a reversed copy of the primitive iterable. Like `asReversed()` but executes eagerly.\n\n#### `<Primitive>Iterable.injectInto`\n\n`injectInto` was already implemented on primitive collections and has now been pulled up to the `<Primitive>Iterable` interfaces.\n\n``` java\nIntIterable arrayList = IntArrayList.newListWith(1, 2, 3);\nMutableInteger sum = arrayList.injectInto(new MutableInteger(0), new ObjectIntToObjectFunction<MutableInteger, MutableInteger>()\n{\n    public MutableInteger valueOf(MutableInteger object, int value)\n    {\n        return object.add(value);\n    }\n});\nAssert.assertEquals(new MutableInteger(6), sum);\n```\n\n### Code Block Factory Methods\n\n#### `Functions.nullSafe(Function)`\n\nReturns a null-safe wrapper around the given `Function`. The wrapper delegates to the `valueOf()` method of the delegate `Function` only if the parameter is not `null`, otherwise it returns `null` or the provided `null` replacement value.\n\n``` java\nMutableList<Integer> squares = FastList.newListWith(1, 2, null, 3).collect(Functions.nullSafe(Functions.squaredInteger()));\nAssert.assertEquals(FastList.newListWith(1, 4, null, 9), squares);\n\nMutableList<Integer> squaresWithNullValue =\n  FastList.newListWith(1, 2, null, 3).collect(Functions.nullSafe(Functions.squaredInteger(), 0));\nAssert.assertEquals(FastList.newListWith(1, 4, 0, 9), squaresWithNullValue);\n```\n\n#### `Functions2.integerAddition()`\n\nCreates a `Function2` that takes in two `Integer`s as parameters and returns their sum.\n\n#### `HashingStrategies.chain(HashingStrategy...)`\n\nTakes a vararg number of hashing strategies and returns a wrapper `HashingStrategy` that considers objects as equal if all the delegate strategies consider them equal. The hashcode is computed using a strategy similar to code-generated `hashCode()` methods. It start with the first delegate strategy's computed hashcode, and then repeatedly multiplies the accumulated hashcode by `31` and adds the next computed hashcode for each remaining delegate strategy.\n\n#### `HashingStrategies.identityStrategy()`\n\nReturns a `HashingStrategy` that considers objects as equal only if they are the same object. It uses reference equality in the implementation of `equals`, and `System.identityHashCode` in the implementation of `computeHashCode`.\n\n#### `HashingStrategies.fromFunctions(Function, Function)` and `HashingStrategies.fromFunctions(Function, Function, Function)`\n\nCreates a `HashingStrategy` from each `Function`, chains them, and returns the chain.\n\n#### `HashingStrategies.from<Primitive>Function`\n\nSimilar to `HashingStrategies.fromFunction(Function)` but optimized for primitives. Implemented in a way that calls to `equals` and `computeHashCode` do not create any garbage.\n\n### `ReversibleIterable` and `SortedIterable` Interfaces\n\nTwo new interfaces have been introduced in the GS Collections Hierarchy. `ReversibleIterable` is an ordered iterable which can be traversed efficiently forwards or backwards. `ReversibleIterable` has extra API for iterating from the end like `asReversed()` and `reverseForEach()`. Lists are the most common `ReversibleIterable`s, and `ListIterable` extends `ReversibleIterable`.\n\n![ReversibleIterable Inheritance Hierarchy](https://raw.github.com/wiki/goldmansachs/gs-collections/reversible-iterable-hierarchy.png)\n\n`SortedIterable`, is an ordered iterable where the elements are stored in sorted order. Its method `comparator()` returns the `Comparator` used to sort the elements, or `null` if they are sorted in natural order. `SortedSetIterable` and `SortedBag` extend `SortedIterable`.\n\n### Changes in the `Bag` Interface Hierarchy\n\nThe inheritance hierarchy of `Bag`s is now more consistent with `Set`s. We introduced a new interface `UnsortedBag`, as a sibling of `SortedBag`. `Bag` no longer overrides `collect`, so it returns `RichIterable` instead of `Bag`. `SortedBag.collect` returns `ListIterable` instead of `Bag`. `UnsortedBag.collect` returns `UnsortedBag`, which means the implementations of `UnsortedBag.collect` are unchanged. The new interface structure is as follows:\n\n![Bag Inheritance Hierarchy](https://raw.github.com/wiki/goldmansachs/gs-collections/bag-inheritance-hierarchy.png)\n\nThe change to the interface hierarchy changed the serialized forms of `TreeBag` and `UnmodifiableSortedBag`.\n\n### Changes to serialized forms\n\n#### Serialized form of synchronized and unmodifiable collections\n\nThe hierarchy of synchronized and unmodifiable collections has been changed slightly. `AbstractSynchronizedMutableCollection` has been extracted from `SynchronizedMutableCollection`, and all the classes that used to extend `SynchronizedMutableCollection` like `SynchronizedMutableList` and `SynchronizedMutableSet` now extend `AbstractSynchronizedMutableCollection` directly. Similar changes have been made to the unmodifiable collections.\n\n#### Serialized form of immutable collections\n\nThe serialized forms of `ImmutableSet`, `ImmutableBag` and `ImmutableMap` implementations have been changed.\n\nThe `ImmutableSet` implementations now use a proxy class for serialization.\n\nThe implementations of `ImmutableMap` and `ImmutableBag` already used proxy classes for serialization. These proxy classes were inner classes inside `AbstractImmutableMap` and `AbstractImmutableBag` respectively. These proxy classes were moved to top level, package private classes.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/78486", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/78486/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/78486/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/4.2.0", "id": 78486, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTc4NDg2", "tag_name": "4.2.0", "target_commitish": "master", "name": "4.2.0 (October 2013)", "draft": false, "prerelease": false, "created_at": "2013-10-28T22:00:11Z", "published_at": "2013-10-28T22:25:29Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/4.2.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/4.2.0", "body": "## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>4.2.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>4.2.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>4.2.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>4.2.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"4.2.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"4.2.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"4.2.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"4.2.0\"/>\n```\n\n## New Functionality\n\n### SortedBag\n\n`SortedBag` has all of the same properties as a `Bag`, and additionally maintains order by a `Comparator` or by the elements' natural order.\n\nThe main implementation is `TreeBag` which delegates to a `TreeSortedMap` to store its data.\n\n``` java\nMutableSortedBag<Integer> emptySortedBag = TreeBag.newBag();\nMutableSortedBag<Integer> emptySortedBagWithComparator =\n  TreeBag.newBag(Collections.reverseOrder());\nMutableSortedBag<Integer> naturalOrder =\n  TreeBag.newBagWith(1, 2, 3);\nMutableSortedBag<Integer> reversedOrder =\n  TreeBag.newBagWith(Collections.reverseOrder(), 4, 3, 3, 2, 2, 1);\nMutableSortedBag<Integer> sortedBagFromFastList =\n  TreeBag.newBag(FastList.newListWith(1, 2, 3));\nMutableSortedBag<Integer> sortedBagFromFastListWithComparator =\n\nTreeBag.newBag(Collections.reverseOrder(), FastList.newListWith(1, 2, 3));\n```\n\n### BiMap\n\n`BiMap` is a map that allows users to perform lookups from both directions. Both the keys and the values in a BiMap are unique.\n\nThe main implementation is `HashBiMap`.\n\n#### inverse()\n\n`BiMap.inverse()` returns a view where the position of the key type and value type are swapped.\n\n``` java\nMutableBiMap<Integer, String> biMap =\n  HashBiMap.newWithKeysValues(1, \"1\", 2, \"2\", 3, \"3\");\nMutableBiMap<String, Integer> inverse = biMap.inverse();\nAssert.assertEquals(\"1\", biMap.get(1));\nAssert.assertEquals(Integer.valueOf(1), inverse.get(\"1\"));\nAssert.assertTrue(inverse.containsKey(\"3\"));\nAssert.assertEquals(Integer.valueOf(2), inverse.put(\"2\", 4));\n```\n\n#### put()\n\n`MutableBiMap.put()` behaves like `Map.put()` on a regular map, except it throws when a duplicate value is added.\n\n``` java\nMutableBiMap<Integer, String> biMap = HashBiMap.newMap();\nbiMap.put(1, \"1\"); // behaves like a regular put()\nbiMap.put(1, \"1\"); // no effect\nbiMap.put(2, \"1\"); // throws IllegalArgumentException\n```\n\n#### forcePut()\n\nThis behaves like `MutableBiMap.put()`, but it silently removes the map entry with the same value before putting the key-value pair in the map.\n\n``` java\nMutableBiMap<Integer, String> biMap = HashBiMap.newMap();\nbiMap.forcePut(1, \"1\"); // behaves like a regular put()\nbiMap.forcePut(1, \"1\"); // no effect\nbiMap.put(1, \"2\"); // replaces the [1,\"1\"] pair with [1, \"2\"]\nbiMap.forcePut(2, \"2\"); // removes the [1, \"2\"] pair before putting\nAssert.assertFalse(biMap.containsKey(1));\nAssert.assertEquals(HashBiMap.newWithKeysValues(2, \"2\"), biMap);\n```\n\n### Optimize HashBag by delegating to ObjectIntHashMap\n\n`HashBag` now delegates to `ObjectIntHashMap<K>` instead of a `MutableMap<K, Counter>`. This saves memory by eliminating the `Counter` wrapper objects.\n\n### Functions.chain<primitive>()\n\nThe `Functions.chain<primitive>()` methods are similar to `Functions.chain()`, but they take a primitive function as the second argument. There are variants for all eight primitives:\n- chainBoolean()\n- chainByte()\n- chainChar()\n- chainDouble()\n- chainInt()\n- chainFloat()\n- chainLong()\n- chainShort()\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/54103", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/54103/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/54103/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/4.1.0", "id": 54103, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTU0MTAz", "tag_name": "4.1.0", "target_commitish": "master", "name": "4.1.0 (September 2013)", "draft": false, "prerelease": false, "created_at": "2013-09-27T14:18:36Z", "published_at": "2013-09-27T19:14:09Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/4.1.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/4.1.0", "body": "## Acquiring GS Collections\n\n### Maven\n\n``` xml\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-api</artifactId>\n  <version>4.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections</artifactId>\n  <version>4.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-testutils</artifactId>\n  <version>4.1.0</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>com.goldmansachs</groupId>\n  <artifactId>gs-collections-forkjoin</artifactId>\n  <version>4.1.0</version>\n</dependency>\n```\n\n### Ivy\n\n``` xml\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-api\" rev=\"4.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections\" rev=\"4.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-testutils\" rev=\"4.1.0\" />\n<dependency org=\"com.goldmansachs\" name=\"gs-collections-forkjoin\" rev=\"4.1.0\"/>\n```\n\n## New Functionality\n\nVersion 4.1 has been released to support deployment to Maven Central. Most of the changes are build related. There is only one piece of new functionality.\n\n### Comparators.by<primitive>Function\n\nThe `Comparators.by<primitive>Function()` methods are just like `Comparators.byFunction()`, but specialized for primitive types. They allow you to sort or compare elements by some primitive attribute without doing any autoboxing.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42782", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42782/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/42782/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/4.0.0", "id": 42782, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQyNzgy", "tag_name": "4.0.0", "target_commitish": "master", "name": "4.0.0 (September 2013)", "draft": false, "prerelease": false, "created_at": "2013-09-05T14:18:23Z", "published_at": "2013-09-11T17:58:00Z", "assets": [{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17750", "id": 17750, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzUw", "name": "gs-collections-4.0.0-sources.jar", "label": "gs-collections-4.0.0-sources.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 3139914, "download_count": 16, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-4.0.0-sources.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17749", "id": 17749, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzQ5", "name": "gs-collections-4.0.0.jar", "label": "gs-collections-4.0.0.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 7462795, "download_count": 24, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-4.0.0.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17748", "id": 17748, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzQ4", "name": "gs-collections-api-4.0.0-sources.jar", "label": "gs-collections-api-4.0.0-sources.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 830241, "download_count": 13, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-api-4.0.0-sources.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17751", "id": 17751, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzUx", "name": "gs-collections-api-4.0.0.jar", "label": "gs-collections-api-4.0.0.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 490677, "download_count": 13, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-api-4.0.0.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17753", "id": 17753, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzUz", "name": "gs-collections-forkjoin-4.0.0-sources.jar", "label": "gs-collections-forkjoin-4.0.0-sources.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 14984, "download_count": 11, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-forkjoin-4.0.0-sources.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17755", "id": 17755, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzU1", "name": "gs-collections-forkjoin-4.0.0.jar", "label": "gs-collections-forkjoin-4.0.0.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 25684, "download_count": 10, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-forkjoin-4.0.0.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17752", "id": 17752, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzUy", "name": "gs-collections-testutils-4.0.0-sources.jar", "label": "gs-collections-testutils-4.0.0-sources.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 13483, "download_count": 12, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-testutils-4.0.0-sources.jar"}, {"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/assets/17754", "id": 17754, "node_id": "MDEyOlJlbGVhc2VBc3NldDE3NzU0", "name": "gs-collections-testutils-4.0.0.jar", "label": "gs-collections-testutils-4.0.0.jar", "uploader": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "content_type": "application/java-archive", "state": "uploaded", "size": 21699, "download_count": 14, "created_at": "2013-09-11T18:07:10Z", "updated_at": "2013-09-11T18:07:24Z", "browser_download_url": "https://github.com/goldmansachs/gs-collections/releases/download/4.0.0/gs-collections-testutils-4.0.0.jar"}], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/4.0.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/4.0.0", "body": "## Binaries\n\n[gs-collections-4.0.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-4.0.0.zip)\n\n## Javadoc\n\n[4.0.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/4.0.0/index.html)\n\n## JDiff\n\n[API differences between 3.0.0 and 4.0.0](http://www.goldmansachs.com/gs-collections/jdiff/4.0.0/changes.html)\n\n## New Functionality\n\nVersion 4.0 completes the immutable primitive collections work started in 3.2.0. All the primitive collections now have immutable counterparts.\n\n### Immutable Primitive Collections\n\n4.0 has immutable primitive sets, stacks, bags and maps. They can each be created using either the `toImmutable()` method or the primitive collection factories.\n\n``` java\nMutableIntSet set = IntHashSet.newSetWith(1, 2, 3);\nImmutableIntSet immutableSet = set.toImmutable();\n\nImmutableIntSet immutableSet2 = IntSets.immutable.of(1, 2, 3);\n```\n\n``` java\nMutableIntStack stack = IntArrayStack.newStackWith(1, 2, 3);\nImmutableIntStack immutableStack = stack.toImmutable();\n\nImmutableIntStack immutableStack2 = IntStacks.immutable.of(1, 2, 3);\n```\n\n``` java\nMutableIntBag bag = IntHashBag.newBagWith(1, 2, 3);\nImmutableIntBag immutableBag = bag.toImmutable();\n\nImmutableIntBag immutableBag2 = IntBags.immutable.of(1, 2, 3);\n```\n\n``` java\nMutableIntCharMap map = IntCharHashMap.newWithKeysValues(1, 'a', 2, 'b', 3, 'c');\nImmutableIntCharMap immutableMap = map.toImmutable();\n\nImmutableIntCharMap immutableMap2 = IntCharMaps.immutable.ofAll(map);\n```\n\n### collect<primitive>() Methods on RichIterable\n\nThe collect<primitive>() methods on RichIterable are similar to collect(), but they take a primitive function and return a primitive collection. There are variants for all eight primitives.\n- collectBoolean()\n- collectByte()\n- collectChar()\n- collectShort()\n- collectInt()\n- collectFloat()\n- collectLong()\n- collectDouble()\n\n### More API on Primitive Maps\n\nPrimitive maps now include additional API from the non-primitive variants.\n\n#### putAll()\n\nCopies all of the mappings from the map parameter to this map.\n\n#### keySet()\n\nReturns a set view of the keys contained in the map. Changes to the map are reflected in the set, and vice versa. The set supports removal, which removes the corresponding mapping from the map. It does not support add() or addAll().\n\n#### values()\n\nReturns a collection view of the values contained in the map. Changes to the map are reflected in the collection, and vice versa. The collection supports removal, which removes the corresponding mapping from the map. It does not support add() or addAll().\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42802", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42802/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/42802/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/3.2.0", "id": 42802, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQyODAy", "tag_name": "3.2.0", "target_commitish": "master", "name": "3.2.0 (June 2013)", "draft": false, "prerelease": false, "created_at": "2013-06-21T11:50:08Z", "published_at": "2013-09-11T18:20:22Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/3.2.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/3.2.0", "body": "## Binaries\n\n[gs-collections-3.2.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-3.2.0.zip)\n\n## Javadoc\n\n[3.2.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/3.2.0/index.html)\n\n## New Functionality\n\n### Immutable Primitive Containers\n\nVersion 3.2 adds initial support for immutable primitive containers, starting with lists. They can be created using the `toImmutable()` method or using the primitive list factories.\n\n``` java\nMutableIntList mutableIntList = IntArrayList.newListWith(1, 2, 3);\nImmutableIntList immutableIntList = mutableIntList.toImmutable();\n```\n\n``` java\nImmutableIntList immutableIntList = IntLists.immutable.of(1, 2, 3);\n```\n\n### injectInto() on primitive collections\n\nPrimitive containers now support `injectInto()`. It works like `RichIterable.injectInto()`, but it takes an `Object<Primitive>ToObjectFunction`, where the primitive type matches the container type. The accumulator can be any type.\n\n``` java\nIntArrayList arrayList = IntArrayList.newListWith(1, 2, 3);\nMutableInteger sum = arrayList.injectInto(new MutableInteger(0), new ObjectIntToObjectFunction<MutableInteger, MutableInteger>()\n    {\n        public MutableInteger valueOf(MutableInteger object, int value)\n        {\n            return object.add(value);\n        }\n    });\nAssert.assertEquals(new MutableInteger(6), sum);\n```\n\n### injectIntoWithIndex() on primitive lists\n\n`injectIntoWithIndex()` is similar to `injectInto()`, except the function takes a third parameter: the index of the current element. It's only available on lists since sets and bags don't have indexed positions.\n\n``` java\nIntArrayList list1 = IntArrayList.newListWith(1, 2, 3);\nfinal IntArrayList list2 = IntArrayList.newListWith(1, 2, 3);\nMutableInteger dotProduct = list1.injectIntoWithIndex(new MutableInteger(0), new ObjectIntIntToObjectFunction<MutableInteger, MutableInteger>()\n    {\n        public MutableInteger valueOf(MutableInteger object, int value, int index)\n        {\n            return object.add(value * list2.get(index));\n        }\n    });\nAssert.assertEquals(new MutableInteger(14), dotProduct);\n```\n\n### dotProduct() on primitive lists\n\nThe primitive lists that hold numeric types now support `dotProduct()`. It takes a second list, multiplies the pairs of elements appearing at the same index, and sums the products.\n\n``` java\n@Test\npublic void dotProduct()\n{\n   IntArrayList list1 = IntArrayList.newListWith(1, 2);\n   IntArrayList list2 = IntArrayList.newListWith(3, 4);\n   Assert.assertEquals(1 * 3 + 2 * 4, list1.dotProduct(list2));\n}\n```\n\n### forEachWithIndex() on primitive lists\n\nEvaluates the `<Primitive>IntProcedure` for each element in the list passing in the element and its index.\n\n``` java\nfinal StringBuilder string = new StringBuilder();\nCharArrayList.newListWith('a', 'b', 'c').forEachWithIndex(new CharIntProcedure()\n    {\n        public void value(char each, int index)\n        {\n            string.append(each).append('-').append(index);\n        }\n    });\nAssert.assertEquals(\"a-1b-2c-3\", string.toString());\n```\n\n### Unmodifiable wrappers for primitive maps\n\nVersion 3.2 adds unmodifiable wrappers for primitive-to-Object maps and Object-to-primitive maps. With this addition, all primitive collections support `asUnmodifiable()`.\n\n``` java\n@Test(expected = UnsupportedOperationException.class)\npublic void put_throws()\n{\n   MutableIntObjectMap<String> map = IntObjectHashMap.newWithKeysValues(0, \"zero\", 31, \"thirtyOne\", 32, \"thirtyTwo\");\n   MutableIntObjectMap<String> unmodifiableMap = map.asUnmodifiable();\n   unmodifiableMap.put(0, \"one\");\n}\n```\n\n### No API changes in this release\n\nThis release preserves binary, source, and serialization compatibility with 3.0.\n- The method toImmutable() already existed on primitive collections in GS Collections 3.0, but it threw UnsupportedOperationException.\n- injectInto(), injectIntoWithIndex() and forEachWithIndex() only have been added to the implementations. They will be added to the primitive iterable interfaces in the next major release.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42804", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42804/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/42804/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/3.1.0", "id": 42804, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQyODA0", "tag_name": "3.1.0", "target_commitish": "master", "name": "3.1.0 (May 2013)", "draft": false, "prerelease": false, "created_at": "2013-05-08T12:58:09Z", "published_at": "2013-09-11T18:21:10Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/3.1.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/3.1.0", "body": "## Binaries\n\n[gs-collections-3.1.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-3.1.0.zip)\n\n## Javadoc\n\n[3.1.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/3.1.0/index.html)\n\n## New Functionality\n\n### Synchronized and Unmodifiable Wrappers for Primitive Collections\n\nThe wrappers for primitive collections are similar to the wrappers for generic collections.\n\n`asUnmodifiable()` returns a wrapper which throws on mutating methods. All other methods pass through to the wrapped collection.\n\nFor example:\n\n``` java\n@Test(expected = UnsupportedOperationException.class)\npublic void add_throws()\n{\n    IntArrayList list = IntArrayList.newListWith(1, 2, 3);\n    MutableIntList unmodifiableList = list.asUnmodifiable();\n    unmodifiableList.add(4);\n}\n```\n\n`asSynchronized()` returns a wrapper which synchronizes on a lock before delegating to the wrapped collection. The iterator is still not synchronized, so the warning on [java.util.Collections.synchronizedCollection()](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#synchronizedCollection(java.util.Collection\\)) applies to this API as well.\n\nBy default, the lock is the wrapper itself. Use the wrapper's constructor instead of the asSynchronized() method if you need to customize the lock.\n\n### Fork Join Functionality\n\nThis release includes a new module, `gs-collections-forkjoin-3.1.0.jar`. Its main utility is the `FJIterate` class. It's conceptually similar to `ParallelIterate`, but it's based on Java 7's `ForkJoinPool`s. All other modules continue to be backward compatible with Java 5.\n\n### Improved memory benchmarks and performance tests\n\nThis release includes additional performance test for `UnifiedSet` and `ImmutableArrayList`. Existing performance tests are now more fair. The memory tests record more data points.\n\n### No API changes in this release\n\nThe methods `asUnmodifiable()` and `asSynchronized()` already existed on primitive collections in GS Collections 3.0, but they threw `UnsupportedOperationException`. There are no API changes in this release. It preserves binary, source, and serialization compatibility with 3.0.\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42810", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42810/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/42810/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/3.0.1", "id": 42810, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQyODEw", "tag_name": "3.0.1", "target_commitish": "master", "name": "3.0.1 (March 2013)", "draft": false, "prerelease": false, "created_at": "2013-03-07T02:22:58Z", "published_at": "2013-09-11T18:28:43Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/3.0.1", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/3.0.1", "body": "## Binaries\n\n[gs-collections-3.0.1.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-3.0.1.zip)\n\n## Javadoc\n\n[3.0.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/3.0.0/index.html)\n\n## JDiff\n\n[API differences between 2.0.0 and 3.0.0](http://www.goldmansachs.com/gs-collections/jdiff/3.0.0/changes.html)\n\n## New Functionality\n\n### Primitive Collections\n\nGS Collections 3.0 has memory optimized collections for primitive types. The collections include lists, sets, stacks, maps and bags. The interface hierarchy is very similar to the hierarchy of object collections.\n\nSome examples:\n\n<table>\n  <tr><th>Interface</th><th>Analogous to</th></tr>\n  <tr><td>IntIterable</td><td>RichIterable</td></tr>\n  <tr><td>MutableIntCollection </td><td>MutableCollection </td></tr>\n  <tr><td>IntList </td><td>ListIterable </td></tr>\n  <tr><td>MutableIntList</td><td>MutableList</td></tr>\n</table>\n\nThe hierarchy is similar for the other primitive types.\n\n#### Primitive Lists\n\nPrimitive lists are backed by an array (like FastList), but it's a primitive array instead of Object[]. They are named IntArrayList, FloatArrayList, etc.\n\nBooleanArrayList is a special case. Current JVMs use one byte per boolean in a boolean[], instead of one bit per boolean. BooleanArrayLists are backed by a java.util.BitSet as an optimization.\n\nTo create an IntArrayList, use one of the following:\n\n``` java\nIntArrayList emptyList = new IntArrayList();\nIntArrayList intList = IntArrayList.newListWith(1, 2, 3);\nIntArrayList listFromIntIterable = IntArrayList.newListWith(IntHashSet.newSetWith(1, 2, 3));\n```\n\n##### IntInterval\n\nIntInterval is Similar to Interval, but implements the IntList interface instead of List<Integer>. It represents a range of ints and a step value.\n\n``` java\nAssert.assertEquals(IntArrayList.newListWith(1, 2, 3), IntInterval.oneTo(3));\nAssert.assertEquals(IntArrayList.newListWith(1, 3, 5), IntInterval.oneToBy(5, 2));\n```\n\n#### Primitive Sets\n\nThe primitive set implementations are backed by hashtables. The hashtables are implemented using open addressing and quadratic probing. They are named IntHashSet, FloatHashSet, etc. BooleanHashSet is implemented using a single integer to keep track of the four states [], [F], [T], or [T, F].\n\n#### Primitive Stacks\n\nPrimitive stacks are similar to ArrayStack but backed by primitive lists instead of FastList.\n\n#### Primitive Bags\n\nPrimitive bags are similar to HashBag, but both item and count are primitives.\n\n#### Primitive Maps\n\nThere are three types of primitive maps:\n1. Object to Primitive (ObjectIntHashMap, ObjectFloatHashMap, etc.)\n2. Primitive to Object (IntObjectHashMap, FloatObjectHashMap, etc.)\n3. Primitive to Primitive (IntIntHashMap, IntLongHashMap, etc.)\n\nThere are no maps with boolean keys. All the maps are implemented as hashtables using open addressing and quadratic probing.\n\n##### get()\n\nSince there is no concept of null when working with primitives, maps with primitive values return an EMPTY_VALUE sentinel from get() if the key is not present in the map. EMPTY_VALUE is false for boolean and 0 for all other primitives.\n\n``` java\nIntIntHashMap map = IntIntHashMap.newWithKeysValues(1, 1, 2, 2, 3, 3);\nAssert.assertEquals(1, map.get(1));\nAssert.assertEquals(2, map.get(2));\nAssert.assertEquals(3, map.get(3));\nAssert.assertEquals(0, this.map.get(4));\n\nAssert.assertFalse(new IntBooleanHashMap().get(1));\n```\n\n##### getOrThrow()\n\nIf the key is present in the map, getOrThrow() returns the corresponding value, otherwise it throws IllegalStateException.\n\n``` java\nfinal IntIntHashMap map = IntIntHashMap.newWithKeysValues(1, 1, 2, 2, 3, 3);\nAssert.assertEquals(1, map.getOrThrow(1));\nAssert.assertEquals(2, map.getOrThrow(2));\nAssert.assertEquals(3, map.getOrThrow(3));\n\nVerify.assertThrows(IllegalStateException.class, new Runnable()\n{\n    public void run()\n    {\n        map.getOrThrow(4);\n    }\n});\n```\n\n#### Primitive Code Blocks and Code Block Factories\n\nIntPredicates, LongPredicates, etc. can be used to create common instances of IntPredicate, LongPredicate, etc.\n\n### More API\n\n#### RichIterable.aggregateBy()\n\nGroups the elements in the RichIterable by the function named groupBy. Then all the values that map to the same key are aggregated together using the Function2 named aggregator. aggregateBy is conceptually similar to a groupBy into a Multimap followed by injectInto on each collection of values, finally yielding a MapIterable. The third parameter, a Function0 named factory, creates the initial value for each aggregation (the accumulator used by injectInto).\n\nAggregate values are allowed to be immutable since they are replaced in the map.\n\n``` java\nFunction0<Integer> factory = new Function0<Integer>()\n{\n    public Integer value()\n    {\n        return Integer.valueOf(0);\n    }\n};\nFunction2<Integer, Integer, Integer> sumAggregator = new Function2<Integer, Integer, Integer>()\n{\n    public Integer value(Integer aggregate, Integer value)\n    {\n        return aggregate + value;\n    }\n};\n\nFunction<Integer, Integer> groupBy = new Function<Integer, Integer>()\n{\n    public Integer valueOf(Integer integer)\n    {\n        return integer % 2;\n    }\n};\nFastList<Integer> integers = FastList.newListWith(1, 1, 1, 2, 2, 3);\nMutableMap<Integer, Integer> aggregation = integers.aggregateBy(groupBy, factory, sumAggregator);\nAssert.assertEquals(4, aggregation.get(0).intValue());\nAssert.assertEquals(6, aggregation.get(1).intValue());\n```\n\n#### RichIterable.aggregateInPlaceBy()\n\nConceptually similar to aggregateBy, but aggregateInPlaceBy mutates values in the result map instead of replacing them. The aggregator parameter is a Procedure2 instead of a Function2.\n\n``` java\nFunction0<AtomicInteger> factory = new Function0<AtomicInteger>()\n{\n    public AtomicInteger value()\n    {\n        return new AtomicInteger(0);\n    }\n};\nProcedure2<AtomicInteger, Integer> sumAggregator = new Procedure2<AtomicInteger, Integer>()\n{\n    public void value(AtomicInteger aggregate, Integer value)\n    {\n        aggregate.addAndGet(value);\n    }\n};\n\nFunction<Integer, Integer> groupBy = new Function<Integer, Integer>()\n{\n    public Integer valueOf(Integer integer)\n    {\n        return integer % 2;\n    }\n};\nFastList<Integer> integers = FastList.newListWith(1, 1, 1, 2, 2, 3);\nMutableMap<Integer, AtomicInteger> aggregation = integers.aggregateInPlaceBy(groupBy, factory, sumAggregator);\nAssert.assertEquals(4, aggregation.get(0).intValue());\nAssert.assertEquals(6, aggregation.get(1).intValue());\n```\n\n#### RichIterable.noneSatisfy()\n\nReturns true if the predicate evaluates to false for every element of the iterable or if the iterable is empty, otherwise it returns false. It's conceptually similar to RichIterable.allSatisfy(Predicates.not(predicate)).\n\n``` java\nAssert.assertFalse(IntArrayList.newListWith(1, 2, 3).noneSatisfy(IntPredicates.greaterThan(0)));\nAssert.assertTrue(IntArrayList.newListWith(1, 2, 3).noneSatisfy(IntPredicates.greaterThan(3)));\n```\n\n#### ListIterable.distinct()\n\nReturns a new ListIterable containing the distinct elements in the list. It's conceptually similar to toSet().toList() but it retains the original order. If an element appears multiple times in the list, only the first one will be copied into the result.\n\n``` java\nVerify.assertListsEqual(Lists.mutable.of(5, 2, 3, 4), Lists.mutable.of(5, 2, 3, 5, 4, 2).distinct());\n```\n\n#### FastList.newWithNValues()\n\nReturns a new FastList containing N values generated by calling the Function0 N times.\n\n``` java\nAssert.assertEquals(FastList.newListWith(1, 1, 1, 1, 1), FastList.newWithNValues(5, Functions0.value(1)))\n```\n\n#### Bag.selectByOccurrences()\n\nReturns all elements of the bag that have a number of occurrences that satisfy the predicate.\n\n``` java\nMutableBag<Integer> integers = Bags.mutable.of(1, 1, 1, 1, 2, 2, 2, 3, 3, 4);\nAssert.assertEquals(Bags.mutable.of(1, 1, 1, 1, 3, 3), integers.selectByOccurrences(IntPredicates.isEven()));\n```\n\n#### Bag.toStringOfItemToCount()\n\nReturns a string representation of the bag. It's conceptually the same as Bag.toMapOfItemToCount().toString() but without creating the intermediate map.\n\n``` java\nAssert.assertEquals(\"{}\", Bags.mutable.of().toStringOfItemToCount());\nAssert.assertEquals(\"{1=3}\", Bags.mutable.of(1, 1, 1).toStringOfItemToCount());\n```\n\n#### MutableMap.updateValue() and MutableMap.updateValueWith()\n\nLooks up the value associated with the given key, applies the Function to it, and replaces the value. If there is no value associated with the key, starts it off with a value supplied by the factory Function0.\nupdateValueWith() is the same as updateValue() with a Function2 and an extra parameter which is passed as a second argument to the function.\n\n``` java\nMutableMap<String, Integer> integers = UnifiedMap.newWithKeysValues(\"two\", 2, \"three\", 3);\nintegers.updateValue(\"two\", Functions0.value(1), Functions.squaredInteger());\nAssert.assertEquals(UnifiedMap.newWithKeysValues(\"two\", 4, \"three\", 3), integers);\nintegers.updateValue(\"four\", Functions0.value(4), Functions.squaredInteger());\nAssert.assertEquals(UnifiedMap.newWithKeysValues(\"two\", 4, \"three\", 3, \"four\", 16), integers);\n```\n"}
{"url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42812", "assets_url": "https://api.github.com/repos/goldmansachs/gs-collections/releases/42812/assets", "upload_url": "https://uploads.github.com/repos/goldmansachs/gs-collections/releases/42812/assets{?name,label}", "html_url": "https://github.com/goldmansachs/gs-collections/releases/tag/2.0.0", "id": 42812, "author": {"login": "goldmansachs", "id": 1268489, "node_id": "MDEyOk9yZ2FuaXphdGlvbjEyNjg0ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1268489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldmansachs", "html_url": "https://github.com/goldmansachs", "followers_url": "https://api.github.com/users/goldmansachs/followers", "following_url": "https://api.github.com/users/goldmansachs/following{/other_user}", "gists_url": "https://api.github.com/users/goldmansachs/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldmansachs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldmansachs/subscriptions", "organizations_url": "https://api.github.com/users/goldmansachs/orgs", "repos_url": "https://api.github.com/users/goldmansachs/repos", "events_url": "https://api.github.com/users/goldmansachs/events{/privacy}", "received_events_url": "https://api.github.com/users/goldmansachs/received_events", "type": "Organization", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTQyODEy", "tag_name": "2.0.0", "target_commitish": "master", "name": "2.0.0 (August 2012)", "draft": false, "prerelease": false, "created_at": "2012-08-23T19:59:00Z", "published_at": "2013-09-11T18:29:15Z", "assets": [], "tarball_url": "https://api.github.com/repos/goldmansachs/gs-collections/tarball/2.0.0", "zipball_url": "https://api.github.com/repos/goldmansachs/gs-collections/zipball/2.0.0", "body": "## Binaries\n\n[gs-collections-2.0.0.zip](http://www.goldmansachs.com/gs-collections/binaries/gs-collections-2.0.0.zip)\n\n## Javadoc\n\n[2.0.0 Javadoc](http://www.goldmansachs.com/gs-collections/javadoc/2.0.0/index.html)\n\n## JDiff\n\n[API differences between 1.2.0 and 2.0.0](http://www.goldmansachs.com/gs-collections/jdiff/2.0.0/changes.html)\n\n## New Functionality\n\n### Stack Container\n\nA stack is a collection enforcing a last-in, first-out order; its methods iterate over elements beginning with the most-recently added element.\n\nThe **StackIterable** interface extends **RichIterable** and its methods such as forEach and toString process elements in reverse order of their addition to the stack. MutableStack extends StackIterable and adds mutating methods like push, pop, and clear.\n\nThe concrete type is **ArrayStack**. The current implementation delegates to a FastList and thus has similar runtime complexity. For example, ArrayStack's push method takes amortized constant time, like FastList's add method. In GS Collections, stacks are not lists. This is a deliberate difference from java.util.[Stack](http://docs.oracle.com/javase/7/docs/api/java/util/Stack.html) which extends [Vector](http://docs.oracle.com/javase/7/docs/api/java/util/Vector.html).\n\n<table>\n  <tr>\n    <td>push</td>\n    <td>Adds a new element to the top of the stack.</td>\n  </tr>\n  <tr>\n    <td>pop</td>\n    <td>Returns the top (most recently-added) element and removes it from the collection</td>\n  </tr>\n  <tr>\n    <td>pop(int count)</td>\n    <td>Returns a ListIterable of the number of elements specified by the count, beginning with the top of the stack.</td>\n  </tr>\n  <tr>\n    <td>peek</td>\n    <td>Returns but does not remove the top element. Note that, on a stack, getFirst likewise returns the top element, and that getLast throws an exception.</td>\n  </tr>\n  <tr>\n    <td>peek(int count)</td>\n    <td>Returns a ListIterable of the number of elements specified by the count, beginning with the top of the stack; does not remove the elements from the stack.</td>\n  </tr>\n  <tr>\n    <td>peekAt(int index)</td>\n    <td>Returns the element at index.</td>\n  </tr>\n</table>\n\nTo create a MutableStack, use one of the following static factory methods:\n\n``` java\nMutableStack<Integer> emptyStack = ArrayStack.newStack();\nMutableStack<Integer> mutableStack = ArrayStack.newStackWith(1, 2, 3);\nMutableStack<Integer> stackFromFastList = ArrayStack.newStack(FastList.newListWith(1, 2, 3));\nMutableStack<Integer> stackFromTopToBottom = ArrayStack.newStackFromTopToBottom(3, 2, 1);\nMutableStack<Integer> stackUsingStacksFactory = Stacks.mutable.of(1, 2, 3);\n```\n\n### ConcurrentHashMap\n\nGS Collections 2.0 includes a new concurrent hashmap implementation, com.gs.collections.impl.map.mutable.ConcurrentHashMap.\n\n### Primitive Iterables and their Lazy Implementations\n\nThe primitive iterable interfaces are memory-optimized for primitives.\n\n<table>\n  <tr>\n    <td>int</td>\n    <td>IntIterable</td>\n  </tr>\n  <tr>\n    <td>long</td>\n    <td>LongIterable</td>\n  </tr>\n  <tr>\n    <td>float</td>\n    <td>FloatIterable</td>\n  </tr>\n  <tr>\n    <td>double</td>\n    <td>DoubleIterable</td>\n  </tr>\n</table>\n\nThey are inspired by the **RichIterable** interface, and contain a subset of the iteration pattern methods from RichIterable like collect. They add some primitive specific API like sum, average, etc. They also include Iterators specialized for each primitive type. They do not extend Iterator, to prevent accidental auto-boxing.\n\nThe current implementations use lazy evaluation. Here's an example which calculates the average of a collection of ints.\n\n``` java\ndouble average = Interval.oneTo(4).collectInt(PrimitiveFunctions.unboxIntegerToInt()).average();\n```\n\nHere, conllectInt() returns an instance of **CollectIntIterable**, an implementation of IntIterable. CollectIntIterable transforms a source iterable using an **IntFunction** as it iterates.\n\nThe **PrimitiveFunctions** class has a number of common unboxing functions. For example PrimitiveFunctions.unboxIntegerToInt() returns an IntFunction.\n\n## More RichIterable API\n\n#### selectInstancesOf()\n\nReturns all elements of the source collection that are instances of the Class parameter.\n\n``` java\nMutableList<Number> numbers = FastList.newListWith(1.0, 2, 3.0, 4, 5.0);\nMutableList<Integer> integers = numbers.selectInstancesOf(Integer.class);\n```\n\nIt is meant to address this problem with select and an \u201cinstanceOf\u201d Predicate.\n\n``` java\nMutableList<Number> numbers = FastList.newListWith(1.0, 2, 3.0, 4, 5.0);\nMutableList<Number> integers = numbers.select(Predicates.instanceOf(Integer.class));\n```\n\nThe result is a collection of Number instead of Integer. If we try to add a simple cast, we get a compiler error.\n\n``` java\nMutableList<Integer> integers = (MutableList<Integer>) numbers.select(Predicates.instanceOf(Integer.class));\n```\n\nThe error message tells us we\u2019re trying to cast to an inconvertible type. We can use raw types, or do a double cast, but neither is intuitive.\n\n``` java\nMutableList<Integer> integers = (MutableList<Integer>) (MutableList<?>) numbers.select(Predicates.instanceOf(Integer.class));\n```\n\nThe new method selectInstancesOf() addresses these problems with types, plus and it\u2019s concise and communicates what you\u2019re doing.\n\n#### sumOf() Methods - sumOfInt(), sumOfLong(), sumOfFloat(), sumOfDouble()\n\nThe sumOf methods return the final primitive result of evaluating function for each element of the iterable and adding elements together. For example, sumOfInt() takes an IntFunction and returns the int sum without auto-boxing.\n"}
