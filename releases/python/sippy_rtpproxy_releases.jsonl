{"url": "https://api.github.com/repos/sippy/rtpproxy/releases/32241759", "assets_url": "https://api.github.com/repos/sippy/rtpproxy/releases/32241759/assets", "upload_url": "https://uploads.github.com/repos/sippy/rtpproxy/releases/32241759/assets{?name,label}", "html_url": "https://github.com/sippy/rtpproxy/releases/tag/v2.1.1", "id": 32241759, "author": {"login": "sobomax", "id": 218662, "node_id": "MDQ6VXNlcjIxODY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/218662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobomax", "html_url": "https://github.com/sobomax", "followers_url": "https://api.github.com/users/sobomax/followers", "following_url": "https://api.github.com/users/sobomax/following{/other_user}", "gists_url": "https://api.github.com/users/sobomax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobomax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobomax/subscriptions", "organizations_url": "https://api.github.com/users/sobomax/orgs", "repos_url": "https://api.github.com/users/sobomax/repos", "events_url": "https://api.github.com/users/sobomax/events{/privacy}", "received_events_url": "https://api.github.com/users/sobomax/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTMyMjQxNzU5", "tag_name": "v2.1.1", "target_commitish": "rtpp_2_1", "name": "v2.1.1", "draft": false, "prerelease": false, "created_at": "2020-08-14T22:51:29Z", "published_at": "2020-10-06T22:23:08Z", "assets": [], "tarball_url": "https://api.github.com/repos/sippy/rtpproxy/tarball/v2.1.1", "zipball_url": "https://api.github.com/repos/sippy/rtpproxy/zipball/v2.1.1", "body": "# RTPProxy v2.1.1 Release Notes\r\n\r\n## September 2020\r\n\r\nVarious bugfixes and small improvements made into our LTS release branch rtpp_2_1."}
{"url": "https://api.github.com/repos/sippy/rtpproxy/releases/32240466", "assets_url": "https://api.github.com/repos/sippy/rtpproxy/releases/32240466/assets", "upload_url": "https://uploads.github.com/repos/sippy/rtpproxy/releases/32240466/assets{?name,label}", "html_url": "https://github.com/sippy/rtpproxy/releases/tag/v2.2.0", "id": 32240466, "author": {"login": "sobomax", "id": 218662, "node_id": "MDQ6VXNlcjIxODY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/218662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobomax", "html_url": "https://github.com/sobomax", "followers_url": "https://api.github.com/users/sobomax/followers", "following_url": "https://api.github.com/users/sobomax/following{/other_user}", "gists_url": "https://api.github.com/users/sobomax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobomax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobomax/subscriptions", "organizations_url": "https://api.github.com/users/sobomax/orgs", "repos_url": "https://api.github.com/users/sobomax/repos", "events_url": "https://api.github.com/users/sobomax/events{/privacy}", "received_events_url": "https://api.github.com/users/sobomax/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTMyMjQwNDY2", "tag_name": "v2.2.0", "target_commitish": "rtpp_2_2", "name": "v2.2.0", "draft": false, "prerelease": false, "created_at": "2020-08-12T17:49:05Z", "published_at": "2020-10-06T21:40:53Z", "assets": [], "tarball_url": "https://api.github.com/repos/sippy/rtpproxy/tarball/v2.2.0", "zipball_url": "https://api.github.com/repos/sippy/rtpproxy/zipball/v2.2.0", "body": "# RTPProxy v2.2.0 Release Notes\r\n\r\n## September, 2020\r\n\r\n## Notable Changes\r\n\r\n### HEP Integration Module\r\n\r\nNew `acct_rtcp_help` loadable module has been implemented allowing to report RTCP packets to the HEP (Homer) server.\r\n\r\n### RFC2833 Capture Module\r\n\r\nNew `catch_dtmf` module has been added in collaboration with the OpenSIPS project. The module allows the RTPProxy notify a call controller (i.e. SIP Proxy or B2BUA) when so instructed of any DTMF-style events that are present in the real-time stream. The notification can be enabled on per-stream basis and is done via the same mechanism as \"no-audio timeout\" notifications to simplify integration.\r\n\r\n### Support for Link-Time Optimization (LTO)\r\n\r\nOptional support for the LTO has been added into the build system allowing utilizing latest enhancements to the compiler technology (`--enable-lto` when running configure script).\r\n\r\n### Numerous Performance Improvements\r\n\r\nNumber of performance-critical components have been refactored to reduce \r\n\r\n### Automatic Test Coverage Report Integration\r\n\r\nCoveralls.io has been integrated to provide Test Coverage tracking for all actively developed branches.\r\n\r\n### Test Coverage Improvements\r\n\r\nTest coverage has been vastly improved from 52% to 91%."}
{"url": "https://api.github.com/repos/sippy/rtpproxy/releases/2123635", "assets_url": "https://api.github.com/repos/sippy/rtpproxy/releases/2123635/assets", "upload_url": "https://uploads.github.com/repos/sippy/rtpproxy/releases/2123635/assets{?name,label}", "html_url": "https://github.com/sippy/rtpproxy/releases/tag/v2.1.0", "id": 2123635, "author": {"login": "jevonearth", "id": 1114943, "node_id": "MDQ6VXNlcjExMTQ5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1114943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jevonearth", "html_url": "https://github.com/jevonearth", "followers_url": "https://api.github.com/users/jevonearth/followers", "following_url": "https://api.github.com/users/jevonearth/following{/other_user}", "gists_url": "https://api.github.com/users/jevonearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/jevonearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jevonearth/subscriptions", "organizations_url": "https://api.github.com/users/jevonearth/orgs", "repos_url": "https://api.github.com/users/jevonearth/repos", "events_url": "https://api.github.com/users/jevonearth/events{/privacy}", "received_events_url": "https://api.github.com/users/jevonearth/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTIxMjM2MzU=", "tag_name": "v2.1.0", "target_commitish": "rtpp_2_1", "name": "v2.1.0", "draft": false, "prerelease": false, "created_at": "2017-09-18T18:41:44Z", "published_at": "2019-06-09T17:56:16Z", "assets": [], "tarball_url": "https://api.github.com/repos/sippy/rtpproxy/tarball/v2.1.0", "zipball_url": "https://api.github.com/repos/sippy/rtpproxy/zipball/v2.1.0", "body": "# RTPProxy v2.1.0 Release Notes\r\n\r\n## June 2019\r\n\r\nVersion 2.1.0 of the RTPProxy brings 3+ years of improvements and fixes into our 2.0 version. The goal of this release has been to stabilize the new code and subsystems added in 2.0.\r\n\r\nWe heavily focused on developing test framework that is based on high-level functional testing and fixed the issues as we go. Basic testing is done in the RTPProxy repository itself.\r\n\r\nFor more advanced test scenarios that use external components, an additional repository has been created, [Sippy/VoIPTests](https://github.com/sippy/voiptests). The code in that repository is building on our python SIP stack and brings together many-many different versions of Kamailio, OpenSIPS, RTPProxy, Sipppy B2BUA (Python) and our recent addition Sippy B2BUA (Go) to tests that they can perform basic functions that an user might want them to perform. So if we (god forbid!) break our ability to work with any of those software by making any changes to our code we are instantly notified. And in reverse, if any of those nice folks break (never happens!:) whatever we think of a basic level of the support for the RTPProxy, we are aware of it and do our best to bring the issue to the light.\r\n\r\n## Notable Changes\r\n\r\n### Improved session latching\r\n\r\nMake session latching more intelligent. Instead of disallowing\r\nanother latch within certain interval after previous one\r\n(`UPDATE_WINDOW`), allow another update any time if new packet\r\nmeets criteria:\r\n1. It's valid RTP packet (as far as `rtp_packet_parse()` can tell);\r\n2. It has the same SSRC value that has been saved during the\r\n   previous latching;\r\n3. Its sequence number is greater than the sequence number that\r\n   we saved while doing the previous latching.\r\n\r\nIf any of (1)-(3) fails, then we revert to the old way with\r\ndisallowing new update within `UPDATE_WINDOW` after the previous\r\none.\r\n\r\nThis fixes the issue when endpoint generates 3 packets from\r\nthe proper IP, but then switches to completely different port\r\nand sticks with that for the rest of the session. Right now,\r\nthe rtpproxy would latch to the first packet out of those 3 and\r\ndiscard the rest considering those a garbage. We are not 100%\r\nsure if it's endpoint's fault or just some NAT stupidity.\r\n\r\nPrinting of SSRC and initial sequence number is done while latching. It\r\nis helpful to identify session in the log and could also be useful in some\r\nother cases.\r\n\r\nfb594fb7c2ef28407e4450913bf8cf348198f7b7\r\n\r\n### Count ignored packets\r\n\r\nrtpproxy now counts the number of ignored packets per session. This counter\r\nrepresents the number of packets that were coming from unrecognized IP/Ports.\r\n\r\n0020e458313cf4b6d58eb123571ecd42e0723662\r\n\r\n### New U/L command modifier `n` to allocate in RTP/RTCP ports\r\n\r\nThe new `n` option to the RTPP U/L commands that force a new pair of RTP/RTCP\r\nports to be allocated and the old ones released. This is useful when a call\r\nroute-advances or fails over to a new destination, where the failed route may\r\nstill be sending superfluous traffic to the previous ports. \r\n\r\n8066e5128962d129690bcdffbb7d9e0f068e15d6\r\n\r\n### RTPP `Q` command takes arguments of what counters to return\r\n\r\nExtend the `Q` (session stats query) command to take optional list of specific\r\ncounters to pull. This allows fetching only those stats that are relevant and\r\nmakes `Q` quite usable for the test suite runs. \r\n\r\nExample: `Q call-id from_tag to_tag rtpa_nsent rtpa_nrcvd rtpa_ndups rtpa_nlost`\r\n\r\n273292bbf1166f0ee80684ae40b3bc68bc4772af\r\n\r\n### New stats counters to track overall packet loss\r\n\r\n`rtpa_nsent` `rtpa_nrcvd` and `rtpa_ndups` counters allow to monitor overall\r\npacket loss in all streams going to the rtpproxy as function of time. \r\n\r\n4f58b4a7061479d6977f9c3a12e6551936cc1c2c\r\n\r\n### SSRC packet tracking\r\n\r\nSee commit for WIP: b1ac79e5c650a640f26badd3cc434d5b9f6ef019\r\n\r\n### Python rtpp client\r\n\r\n`python/rtpp_query.py` is a simple client that allows the user interactive rtpp\r\nsession. Also useful for injecting commands via stdin or by files.\r\n\r\n48a603ecb670d64bceb656ae0ac38e01c7b3f909\r\n\r\n### Notification socket wildcard\r\n\r\nA notification wild card `%%CC_SELF%%` can be used to automatically register\r\nnotifications sockets for callers of the `U` and `L` commands.\r\n\r\n83b09c91053216215811c380cb093a4067c9f6b9\r\n\r\n### The `SIGHUP` signal causes rtpproxy to shutdown gracefully\r\n\r\nUse `SIGHUP` instead of `SIGTERM` to shut down the proxy. The difference is that\r\n`SIGTERM` tries to tear down everything from the signal handler, while `SIGHUP`\r\nactually makes `main()` to exit gracefully so that there is no racing condition\r\nbetween `main()` posting event into the `rtpp_proc` queue and the `rtpp_proc`\r\nactually exiting.\r\n\r\n55438f1093beebadb1b003981b07268f0d0ac063\r\n\r\n### Improved test coverage\r\n\r\nThe rtpproxy test suite has grown, and covers all common use cases.\r\n- repacketization\r\n\r\n### New `pertools/udp_contention` tool to simulate UDP traffic.\r\n\r\n3025a331790ddea80d7e4506aa95e6e4f328625c\r\n\r\n### `U` and `L` command option `z` to set ptime\r\n\r\nSave `ptime` value if provided by the `z` options for the `U`/`L` command into\r\nsession parameters and use it to request specific packet size when `P` (playback)\r\ncommand is received with \"session\" as a codec type. Extend playback\r\n(`rtp_server`) API to be able generating frames with `ptime` other than absolute\r\nminimum supported by a codec.\r\n\r\n644072c21e2f6290e6e230a970a75731caffa495\r\n\r\n### `rtpp_streamdb` module\r\n\r\nAdd `rtpp_streamdb`, a new module to serve as a central in-memory DB for the\r\nRTP/RTCP streams. Instead of using call-id as an indexing/lookup parameter or\r\npassing around a pointer to the structure, assign unique (within\r\n`rtpp_streamdb` instance) 64-bit integer for each session and provide a way to\r\nuse that integer to quickly pull the session in question. Also integrate\r\nref-counting and require it in order to protect a session from being released\r\nwhile it's being used by some part of the code. This allows us to untangle some\r\nglobal locking between command and RTP forwarding threads.\r\n\r\nThe 64-bit id will be used as a \"weak reference\" in critical path of the code,\r\ni.e. mapping from the file descriptor into the session structure while doing\r\nI/O, so that some performance assessment has been done to make sure lookup\r\nperformance is adequate for the task. Quick assessment shows that we can do\r\nsome 6,000,000 lookups/sec on a single thread on E3-1220 V2 @ 3.10GHz on set of\r\n4,000 sessions with initial code. This should be enough for the current\r\narchitecture and there are several relatively easy ways to reduce the overhead\r\nat least 2-3 times further by increasing the size of the hash table and/or\r\nin-lining/optimizing hashing code. We expect current code doing some 70-100k\r\nlookups/second at 1.5-2k sessions top.\r\n\r\n34c291144ca35b229e997aba2ed1512c9b5028f8\r\n\r\n### Re-factor session handling (internal changes)\r\n\r\nRefactor mostly related with the fact that struct `rtpp_session` is now struct\r\n`rtpp_session_obj` and that the `sp->stream[N]` is a pointer, not\r\na sub-structure. Also deals with some API changes in the `weakref`  code and\r\nelsewhere.\r\n\r\n29bb9e15af3cb557eb0c2c20d5d2c4d9bc46654f\r\n\r\n### Jitter Tracking\r\n\r\nRTPProxy now tracks jitter metrics as per Appendix A.8 of `rfc3550`\r\n\r\ne545b08bc637c47a83e4821ccc900a66f9604302\r\n\r\n### Dynamic Loadable Modules\r\n\r\nInfrastructure to support dynamic loadable modules has been implemented, and it\r\nis used for the new Accounting CSV module.\r\n\r\n630500071533431a60fe63358ce907b48f01c3aa\r\n\r\n### Accounting CSV Module\r\n\r\nAn accounting module that will output stats for each ended call to a csv file.\r\nThe Accounting CSV module will output a CSV string of user specified (at start\r\ntime) metrics. At the end of each session, this module will append a new live\r\nto the CSV file. Operators typically will configure a log collection agent to\r\nfurther process the metrics.\r\n\r\nTODO: Provide flag examples\r\n\r\ncd5afbfd41bfc6caf65b608bbae22ddaf7a254cc\r\n\r\n### IPv6 Improvements and fixes\r\n\r\nFixes and improvements plus integration tests added to our test suite. \r\n\r\nTODO: MAX, can you flesh this paragraph out a bit more?\r\n\r\nMAX: Yes, sure, fixed lot of bugs and made overall improvement and code unification.\r\n\r\n3e13d18ee46ae029e1fb3a9e3b4f755a9872dbb4\r\n\r\nThank you to our contributors!\r\n- @sobomax \r\n"}
{"url": "https://api.github.com/repos/sippy/rtpproxy/releases/923176", "assets_url": "https://api.github.com/repos/sippy/rtpproxy/releases/923176/assets", "upload_url": "https://uploads.github.com/repos/sippy/rtpproxy/releases/923176/assets{?name,label}", "html_url": "https://github.com/sippy/rtpproxy/releases/tag/v2.0.0", "id": 923176, "author": {"login": "jevonearth", "id": 1114943, "node_id": "MDQ6VXNlcjExMTQ5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1114943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jevonearth", "html_url": "https://github.com/jevonearth", "followers_url": "https://api.github.com/users/jevonearth/followers", "following_url": "https://api.github.com/users/jevonearth/following{/other_user}", "gists_url": "https://api.github.com/users/jevonearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/jevonearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jevonearth/subscriptions", "organizations_url": "https://api.github.com/users/jevonearth/orgs", "repos_url": "https://api.github.com/users/jevonearth/repos", "events_url": "https://api.github.com/users/jevonearth/events{/privacy}", "received_events_url": "https://api.github.com/users/jevonearth/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTkyMzE3Ng==", "tag_name": "v2.0.0", "target_commitish": "rtpp_2_0", "name": "rtpproxy v2.0.0", "draft": false, "prerelease": false, "created_at": "2015-03-09T17:40:27Z", "published_at": "2015-03-05T19:45:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/sippy/rtpproxy/tarball/v2.0.0", "zipball_url": "https://api.github.com/repos/sippy/rtpproxy/zipball/v2.0.0", "body": "# rtpproxy v2.0.0 Release Notes\n\nThis is the first official release since version 1.2 in March 2009. v2.0 release brings 5-years worth of extensive improvements in performance, quality, and test coverage. This release has been heavily tested in production environments, and has had significant contributions from the open-source community.\n\nThis is the first release since we moved the project to github, and travis-ci for automated test coverage.\n\nrtpproxy is a [Sippy Software, Inc](http://www.sippysoft.com/) open source project. The rtpproxy is part of Sippy's commercial soft switch product, and Sippy's clustered media gateway project. rtpproxy is also widely used in other VoIP service provider networks.\nrptproxy supports [Opensips](http://www.opensips.org/), [Kamailio](http://www.kamailio.org), and Sippy's own open source [b2bua](https://github.com/sippy/b2bua)\n\n## Notable Changes\n\n### Performance / Quality\n\nReduction in CPU usage by 40% to 60% has been observed on production deployments.\nJitter (measured using wire shark) characteristics have improved significantly.\n\nThese quality and performance improvements come mostly from improvements in the following areas:\n- send receive threads are now asynchronous\n- poll() is called more intelligently thanks to a PLL timing loop, resulting in much better jitter characteristics\n- poll() is called less frequently for `RTCP` than for `RTP`\n- command processing I/O happens on separate background thread\n- Overall reduction in poll() overhead\n\n## New stats counters\n\nThe rtp command protocol (rtpp) has a new command `G` that gives access to the following counters:\n- `nsess_created` Number of RTP sessions created\n- `nsess_destroyed` Number of RTP sessions destroyed\n- `nsess_timeout` Number of RTP sessions ended due to media timeout\n- `nsess_complete` Number of RTP sessions fully setup\n- `nsess_timeout` Number of sessions ended due to media timeout\n- `nsess_nortp` Number of sessions that had no RTP neither in nor out\n- `nsess_owrtp` Number of sessions that had one-way RTP only\n- `nsess_nortcp` Number of sessions that had no RTCP neither in nor out\n- `nsess_owrtcp` Number of sessions that had one-way RTCP only\n- `nplrs_created` Number of RTP players created\n- `nplrs_destroyed` Number of RTP players destroyed\n- `npkts_rcvd` Total number of RTP/RTPC packets received\n- `npkts_played` Total number of RTP packets locally generated (played out)\n- `npkts_relayed` Total number of RTP/RTPC packets relayed\n- `npkts_resizer_in` Total number of RTP packets going into re-sizer (re-packetizer)\n- `npkts_resizer_out` Total number of RTP packets coming out of re-sizer (re-packetizer)\n- `npkts_resizer_discard` Number of RTP packets discarded by the re-sizer (re-packetizer)\n- `npkts_discard` Total number of RTP/RTPC packets discarded\n- `total_duration` Cumulative duration of all sessions\n- `ncmds_rcvd` Total number of control commands received\n- `ncmds_succd` Total number of control commands successfully processed\n- `ncmds_errs` Total number of control commands ended up with an error\n- `ncmds_repld` Total number of control commands that had a reply generated\n\n## Re-packetization support to resize rtp packet sizes.\n\nRe-packetization allows providers to resize the rtp frame size between a caller and a callee. This is useful for saving bandwidth between pops, or for interoperability with vendors who require a non-standard ptime. For example, the standard ptime for g.729 is 20 msec, but a vendor may require that ptime be 60msec. Re-packetization allows this resizing to happen on the fly. See also the monitoring counters `npkts_resizer_in`, `npkts_resizer_out` and `npkts_resizer_discard` that relates to this feature.\n\n## SIGHUP for graceful shutdown\n\nThe SIGHUP signal will initiate a slow shut down. In this mode any new rtpp requests for a new session will be rejected with a E99 code. The rtpproxy will exit only after all active sessions have ended. This feature simplifies planned maintenance.\n\n## Updated `makeann` utility\n\nThe `makeann` utility takes 16-bit signed linear encoded audio and produces a file for each supported codec.\n\n`makeann` codecs are supported:\n- G.711u\n- G.711a\n- G.722 (new in 2.0)\n- G.729 (new in 2.0)\n- GSM (new in 2.0)\n\n## New `extractaudio` Utility\n\nThe `extractaudio` utility extracts audio streams and writes the recording to disk in wav format.  The utility existed before 2.0, but it was not connected to the autoconf/automake build and as such required manual intervention to compile. The test suite uses this utility to verify that audio is transmitted correctly. The utility can be used for recording purposes also.\n\n`extractaudio` supported codecs:\n- G.711u\n- G.711a\n- G.722 (new in 2.0)\n- G.729 (new in 2.0)\n- GSM (new in 2.0)\n\nThe new flag `-n` has been added in 2.0 to avoid inserting blank audio periods to keep streams synchronized to real time. Mostly intended for CI use to provide predictable output.\n\n## Logging\n- Call-ID is now recorded in log files\n\n## RTPP Command Channel Improvements\n- Improved stream-based communication support to accept more than one command in the batch, don't expect sender to pause and wait for the reply after issuing a command.\n- the rtpprroxy improved performance by using a hash table for look ups \n- new `G` command to retrieve stat counters;\n- new `s` modifier for the `R` command to record both streams into a single file (requires PCAP recording mode to be enabled via `-P` command-line option).\n- simple commands are now executed without holding global lock, which should increase total throughput in terms of maximum numbers of commands that can be processed per unit of time and reduce interference between command and rtp processing threads. Those commands are `V',`VF' and `G'.\n\n## New Types of Control Channels\n\nIn 2.0, we've added the following 3 new control channels `cunix`, `stdio` and `systemd`, in addition to `unix` and `udp` as supported since v1.2:\n- `cunix`, similar to `unix` except the server (e.g. rtpproxy) is not closing session after processing a command, so more commands can be posted and processed in sequence, thereby reducing overhead and complexity of the client code. Intended to become the default channel for local IPC;\n- `stdio`, commands are read from stdin, replies are posted to stdout. Primarily designed to be used for CI. Example: `rtpproxy -s stdio: -f < some.commands`;\n- `systemd`, get command from / post replies to the file descriptor provided by the `systemd` daemon. Only supported on Linux;\n\nThe control channel system has been overhauled to enable more than one channel to be used simultaneously.\n\n## New and updated command line flags\n\n`-s` now accepts `stdio`, `cunix:` and `systemd:` as an argument. rtpproxy can accept -s multiple times, which will cause it to listen on multiple control sockets. More than one control channels can be used independently. \n`-V` Show command protocol version.\n`-L` Adjust the number of simultaneous open connections. Note that each RTP media stream requires four open connections. A SIP call can open more than one RTP media stream depending on the client's setup.\n`-A address` Sets the advertised IP address.  `-A addr1/addr2` can also be used for bridging mode\n`-W setup_ttl` Implements \"Call Establishment Phase Timeout\" as originally implemented in [this](https://github.com/OpenSIPS/opensips/blob/master/modules/rtpproxy/patches/rtpproxy_timeout_notification.fix_patch) opensips patch\n`-w` Set access mode for the controlling UNIX-socket (if used). Only applies if rtpproxy runs under a different GID using `-u` option.\n`-b` Don't randomize allocated ports, primarily aimed for debugging to provide more predictable behaviour\n\n## New Continuous Integration (CI) / Testing suite\n\nAutomated tests are now run using [travis-ci](http://www.travis-ci.com)\nThere are two groups of tests, tests bundled with the rtpproxy distribution, that can be run using the `make check` target, and a suit of integration tests (opensips, kamailio, sippy b2bua).\n\n### See [github.com/sippy/voiptests](https://github.com/sippy/voiptests) for the integration test suite.\n\n### Summary of tests that run from the `make check` target\n- `makeann` tests for all supported codecs\n- Forwarding tests that verifies media from sender to receiver & the reverse\n- Recording tests that verifies recording capability of the rtpproxy in both AdHoc and PCAP formats\n- Simple command parser tests\n- Playback tests that streams sample payload, captures packets from network, decodes and verifies the captured payload against the source payload.\n- memdeb is an opt-in memory allocation tracker useful for detecting memory leaks\n- session_timeout tests both types of session timeouts for both call establishment phase and session timeouts\n- Re-packetization tests to verify proper functionality of the lossless re-packetization feature\n\nSee [rtpproxy/test/](https://github.com/sippy/rtpproxy/tree/master/tests) for more details.\n\n## Lossless RTP Payload Resize\n\nThe Lossless RTP Payload Resize feature has been promoted from experimental to fully supported feature and has been extensively tested with all supported codecs, which currently include the following codecs:\n- G.711u\n- G.711a\n- G.729\n- G.722 (new in 2.0)\n- GSM (new in 2.0)\n\n## Miscellaneous\n- make will build a `rtpproxy` binary and a `rtpproxy_debug` binary. The latter includes memdebug\n- systemd support on Linux\n- udp_storm - a utility to stress-test rtpproxy with the RTP-like traffic.\n\n## Sponsors & Contributors\n\nThank you to our contributors!\n- @sobomax \n- @bogdan-iancu\n- @jevonearth\n- @lemenkov \n- @miconda\n- @oej\n- @taisph \n"}
{"url": "https://api.github.com/repos/sippy/rtpproxy/releases/384161", "assets_url": "https://api.github.com/repos/sippy/rtpproxy/releases/384161/assets", "upload_url": "https://uploads.github.com/repos/sippy/rtpproxy/releases/384161/assets{?name,label}", "html_url": "https://github.com/sippy/rtpproxy/releases/tag/v1.3-beta.1", "id": 384161, "author": {"login": "jevonearth", "id": 1114943, "node_id": "MDQ6VXNlcjExMTQ5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1114943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jevonearth", "html_url": "https://github.com/jevonearth", "followers_url": "https://api.github.com/users/jevonearth/followers", "following_url": "https://api.github.com/users/jevonearth/following{/other_user}", "gists_url": "https://api.github.com/users/jevonearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/jevonearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jevonearth/subscriptions", "organizations_url": "https://api.github.com/users/jevonearth/orgs", "repos_url": "https://api.github.com/users/jevonearth/repos", "events_url": "https://api.github.com/users/jevonearth/events{/privacy}", "received_events_url": "https://api.github.com/users/jevonearth/received_events", "type": "User", "site_admin": false}, "node_id": "MDc6UmVsZWFzZTM4NDE2MQ==", "tag_name": "v1.3-beta.1", "target_commitish": "master", "name": "rtpproxy-1.3-beta", "draft": false, "prerelease": true, "created_at": "2014-06-17T18:55:35Z", "published_at": "2014-06-19T19:06:21Z", "assets": [], "tarball_url": "https://api.github.com/repos/sippy/rtpproxy/tarball/v1.3-beta.1", "zipball_url": "https://api.github.com/repos/sippy/rtpproxy/zipball/v1.3-beta.1", "body": "This is a beta release of version of 1.3.\n"}
